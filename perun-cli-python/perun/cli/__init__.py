from perun_openapi import ApiException
from perun_openapi.api_client import ApiClient
from perun_openapi.configuration import Configuration
from perun_openapi.api.attributes_manager_api import AttributesManagerApi
from perun_openapi.api.authz_resolver_api import AuthzResolverApi
from perun_openapi.api.database_manager_api import DatabaseManagerApi
from perun_openapi.api.ext_sources_manager_api import ExtSourcesManagerApi
from perun_openapi.api.facilities_manager_api import FacilitiesManagerApi
from perun_openapi.api.groups_manager_api import GroupsManagerApi
from perun_openapi.api.members_manager_api import MembersManagerApi
from perun_openapi.api.owners_manager_api import OwnersManagerApi
from perun_openapi.api.registrar_manager_api import RegistrarManagerApi
from perun_openapi.api.resources_manager_api import ResourcesManagerApi
from perun_openapi.api.users_manager_api import UsersManagerApi
from perun_openapi.api.utils_api import UtilsApi
from perun_openapi.api.vos_manager_api import VosManagerApi
from perun_openapi.api.services_manager_api import ServicesManagerApi
import json


class PerunRpc:
    """
    Class collecting all API classes generated by OpenAPI Generator for Perun RPC API
    """

    def __init__(self, config: Configuration):
        self.config = config
        self.api_client = ApiClient(config)
        self.api_client.user_agent = "Perun OpenAPI Python"
        self.attributes_manager = AttributesManagerApi(self.api_client)
        self.users_manager = UsersManagerApi(self.api_client)
        self.authz_resolver = AuthzResolverApi(self.api_client)
        self.database_manager = DatabaseManagerApi(self.api_client)
        self.ext_sources_manager = ExtSourcesManagerApi(self.api_client)
        self.facilities_manager = FacilitiesManagerApi(self.api_client)
        self.groups_manager = GroupsManagerApi(self.api_client)
        self.members_manager = MembersManagerApi(self.api_client)
        self.owners_manager = OwnersManagerApi(self.api_client)
        self.registrar_manager = RegistrarManagerApi(self.api_client)
        self.resources_manager = ResourcesManagerApi(self.api_client)
        self.users_manager = UsersManagerApi(self.api_client)
        self.utils = UtilsApi(self.api_client)
        self.vos_manager = VosManagerApi(self.api_client)
        self.services_manager = ServicesManagerApi(self.api_client)


# singleton for PERUN RPC client instance
rpc: PerunRpc


class PerunException:
    def __init__(self, ex: ApiException):
        self.body = json.loads(ex.body)
        if 'name' in self.body:
            self.name = self.body['name']
        if 'type' in self.body:
            self.name = self.body['type']
        self.message = self.body['message']

    def __str__(self):
        return str(self.body)
