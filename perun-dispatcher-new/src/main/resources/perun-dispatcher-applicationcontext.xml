<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
">

    <!-- Enable @Transactional support -->
    <tx:annotation-driven/>

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    <!--It basically says, wrap any interface in the service package that ends
	with "Manager" with a transaction. Because of this, it's important to
	set your dependencies to interfaces, not to implementations.
    <aop:config>
        <!<aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* *..service.*Manager.*(..))"/>
    </aop:config>-->

    <!-- Importing Perun Core... -->
    <import resource="classpath:perun-beans.xml"/>
	<!-- Import Perun taskslib -->
    <import resource="classpath:perun-tasks-lib-applicationcontext.xml"/>
    	
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- Scans for @Repository, @Service and @Component -->
    <context:component-scan base-package="cz.metacentrum.perun.dispatcher"/>
    <context:component-scan base-package="cz.metacentrum.perun.controller"/>
    
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
  		<property name="corePoolSize" value="10" />
  		<property name="maxPoolSize" value="50" />
  		<property name="queueCapacity" value="100" />
	</bean>

    <!-- Properties Bean -->
    <bean id="propertiesBean" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
        	<list>
	           	<value>${perun.jdbc}</value>
				<value>file:${perun.conf.custom}jdbc.properties</value>
	            <value>file:${perun.conf}perun-dispatcher.properties</value>
                <value>file:${perun.conf.custom}perun-dispatcher.properties</value>
            </list>
        </property>
        <property name="ignoreResourceNotFound">
            <value>true</value>
        </property>
       	<property name="properties">
       		<props>
       		    	<prop key="perun.principal.name">perunTests</prop>
       		    	<prop key="perun.principal.extSourceName">cz.metacentrum.perun.core.impl.ExtSourceInternal</prop>
       		    	<prop key="perun.principal.extSourceType">cz.metacentrum.perun.core.impl.ExtSourceInternal</prop>
       		</props>	    
       	</property> 
    </bean>

    <!-- BEGIN Quartz tasks -->
	<bean id="maintenanceJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.MaintenanceJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="dispatcherManager" value-ref="dispatcherManager" />
			</map>
		</property>
	</bean>

	<bean id="checkInJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.CheckInJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="dispatcherManager" value-ref="dispatcherManager" />
			</map>
		</property>
	</bean>

	<bean id="maintenanceJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="maintenanceJob" />
		<!-- Every 20 minutes -->
		<!--<property name="cronExpression" value="0 0/20 * * * ?" /> -->
		<!-- Every 5 seconds -->
		<property name="cronExpression" value="0/5 * * * * ?" />
	</bean>

	<bean id="checkInJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="checkInJob" />
		<!-- Every 3 minutes -->
		<property name="cronExpression" value="0 0/5 * * * ?" />
		<!-- Every 10 seconds -->
		<!-- property name="cronExpression" value="0/10 * * * * ?" /-->
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<!--<ref bean="maintenanceJobTrigger" />-->
				<ref bean="checkInJobTrigger" />
				<ref bean="processPoolJobTrigger" />
				<ref bean="propagationMaintainerJobTrigger" />
			</list>
		</property>
	</bean>  
	
	<bean id="propagationMaintainerJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.PropagationMaintainerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="propagationMaintainer" value-ref="propagationMaintainer" />
			</map>
		</property>
	</bean>

	<bean id="propagationMaintainerJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="propagationMaintainerJob" />	
		<property name="cronExpression" value="45 0/4 * * * ?" />	
	</bean>
	
	<bean id="processPoolJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.ProcessPoolJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="taskScheduler" value-ref="taskScheduler" />
			</map>
		</property>
	</bean>
	
	<bean id="processPoolJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="processPoolJob" />
		<property name="cronExpression" value="0 0/2 * * * ?" />
	</bean>
	<!-- END Quartz tasks -->	
           
</beans>
