#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage getSortingFunction tableContentToPrint);

sub help {
	return qq{
	Prints attribute policy collections for selected attribute.
	--------------------------------
	Available options:
	--attributeId     | -a  attribute identifier
	--attributeName   | -A  attribute name (including namespace)
	--batch           | -b  batch
	--help            | -h  prints this help
	};
}

my ($attributeId, $attributeName, $batch);
GetOptions("help|h"   => sub {
	 	print help;
		exit 0;
	},
	"attributeId|a=i"       => \$attributeId,
	"attributeName|A=s"     => \$attributeName,
	"batch|b"               => \$batch) || die help;

#options check
unless (defined $attributeId or defined $attributeName) { die "ERROR: attributeId or attributeName are required\n";}

my $agent = Perun::Agent->new();
my $attributesAgent = $agent->getAttributesAgent;
my $attributeDefinition;
if (defined $attributeName and not defined $attributeId) {
	$attributeDefinition = $attributesAgent->getAttributeDefinition( attributeName => $attributeName );
	$attributeId=$attributeDefinition->getId;
}
my @policyCollections;
@policyCollections = $attributesAgent->getAttributePolicyCollections( attributeId => $attributeId );
#OUTPUT
printMessage "\n.-----------------------------.\n| Attribute : ".$attributeId."\t      |", $batch;
foreach my $collection (@policyCollections) {
	my @rows = ();
	printMessage "\n.-----------------------------.\n| Action : ".$collection->getAction."\t      |", $batch;
	foreach my $policy ($collection->getPolicies) {
		my @row = ($policy->getRole, $policy->getObject);
		push(@rows, \@row)
	}
	my @columnsNames = ('Role', 'Object');
	print tableContentToPrint(\@columnsNames, \@rows, $batch);
}