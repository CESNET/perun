#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage getSortingFunction tableContentToPrint);

sub help {
	return qq{
	Displayes list of SecurityTeam admins. SecurityTeam is required field.
	------------------------------------
	Available options:
	--securityTeamId | -s SecurityTeam id
	--orderByName    | -n  order by manager's name (default by Id)
	--batch          | -b batch
	--help           | -h prints this help

	};
}

my ($securityTeamId, $batch, $sortingFunction, $sortingFunction2, $byName);
GetOptions ("help|h"     => sub {
		print help();
		exit 0;
	}, "batch|b"         => \$batch,
	"orderByName|n"      => \$byName,
	"securityTeamId|s=i" => \$securityTeamId || die help());

# Check options
if (defined $byName) {
	$sortingFunction = getSortingFunction("getLastName",1);
	$sortingFunction2 = getSortingFunction("getLastName",1);
} else {
	$sortingFunction = getSortingFunction("getId");
	$sortingFunction2 = getSortingFunction("getUserId");
}
unless (defined($securityTeamId)) {die "ERROR: securityTeamId is required\n";}

my $agent = Perun::Agent->new();
my $securityTeamsAgent = $agent->getSecurityTeamsAgent;
my $groupsAgent = $agent->getGroupsAgent;

my $securityTeam = $securityTeamsAgent->getSecurityTeamById( 'id', $securityTeamId );

my  @richUsers = $securityTeamsAgent->getAdmins( securityTeam => $securityTeamId, onlyDirectAdmins => 1 );

my @groups = $securityTeamsAgent->getAdminGroups ( securityTeam => $securityTeamId );

unless (@richUsers or @groups ) {
	printMessage "No Managers found", $batch;
}

my @rows = ();

# direct managers
my $ii=0;
foreach my $richUser (sort $sortingFunction @richUsers) {
	if ($ii++ == 0) {
		my @row = ('Direct Managers',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	} else {
		my @row = ('',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	}
}

# groups of managers
while (@groups) {
	if ($ii) {
		my @row = (' ',' ',' ');
		push(@rows, \@row);
	}
	my $group=shift (@groups);
	my @members = $groupsAgent->getGroupRichMembers ( group => $group->getId);
	$ii=0;
	foreach my $member (sort $sortingFunction2 @members) {
		if ($ii++ == 0) {
			my @row = ($group->getName,$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		} else {
			my @row = ('',$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		}
	}
}
my @columnsNames = ('Managers group', 'User Id', 'Name');
print tableContentToPrint(\@columnsNames, \@rows, $batch);
