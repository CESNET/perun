#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage getSortingFunction tableContentToPrint);

sub help {
	return qq{
	Prints list of group Managers. Group is required field. Group can by specified by it's ID or by both it's name and VO.
	---------------------------------
	Available options:
	--groupId     | -g   Group identifier
	--groupName   | -G   Group name
	--voId        | -v   VO idetifier
	--voShortName | -V   VO short name
	--orderByName | -n   order by Manager's Name (default by Id)
	--batch       | -b  batch
	--help        | -h  prints this help

	};
}

our $batch;
my ($groupId, $groupName, $voId, $voShortName, $sortingFunction, $sortingFunction2, $byName);
GetOptions("help|h"   => sub {
		print help;
		exit 0;
	},
	"groupId|g=i"     => \$groupId,
	"groupName|G=s"   => \$groupName,
	"voId|v=i"        => \$voId,
	"voShortName|V=s" => \$voShortName,
	"orderByName|n"   => \$byName,
	"batch|b"         => \$batch) || die help;

my $agent = Perun::Agent->new();
my $groupsAgent = $agent->getGroupsAgent;

#options check
if (defined $byName) {
	$sortingFunction = getSortingFunction("getLastName",1);
	$sortingFunction2 = getSortingFunction("getLastName",1);
} else {
	$sortingFunction = getSortingFunction("getId");
	$sortingFunction2 = getSortingFunction("getUserId");
}

unless (defined $groupId) {
	unless (defined $groupName) { die "ERROR: Group specification required.\n"; }
	unless (defined $voId) {
		unless (defined $voShortName) { die "ERROR: VO specification required.\n"; }
		my $vo = $agent->getVosAgent->getVoByShortName( shortName => $voShortName );
		$voId = $vo->getId;
	}
	my $group = $groupsAgent->getGroupByName( vo => $voId, name => $groupName );
	$groupId = $group->getId;
}

my @richUsers = $groupsAgent->getAdmins( group => $groupId, onlyDirectAdmins => 1, pageSize => 0, pageNum => 0 );

my @groups = $groupsAgent->getAdminGroups ( group => $groupId);

unless (@richUsers or @groups ) {
	printMessage "No Managers found", $batch;
}

# direct managers
my $ii=0;
my @rows = ();
foreach my $richUser (sort $sortingFunction @richUsers) {
	if ($ii++ == 0) {
		my @row = ('Direct Managers',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	} else {
		my @row = ('',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	}
}

# groups of managers
while (@groups) {
	if ($ii) {
		my @row = (' ',' ',' ');
		push(@rows, \@row);
	}
	my $group=shift (@groups);
	my @members = $groupsAgent->getGroupRichMembers ( group => $group->getId);
	$ii=0;
	foreach my $member (sort $sortingFunction2 @members) {
		if ($ii++ == 0) {
			my @row = ($group->getName,$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		} else {
			my @row = ('',$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		}
	}
}
my @columnsNames = ('Managers group', 'User Id', 'Name');
print tableContentToPrint(\@columnsNames, \@rows, $batch);
