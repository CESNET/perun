#!/usr/bin/perl -w

use strict;
use warnings;
use Switch;
use Getopt::Long qw(:config no_ignore_case);
use Perun::Agent;
use Perun::Common qw(printMessage);


sub help {
	return qq{
	Adds role to user or authorizedGroup. User or group is required.
	Name of the role to set in all caps with no spaces is required (e.g. GROUPADMIN).
	Unless the role does not have a complementary object (e.g. PERUNADMIN),
	the type of complementary object (e.g. Vo, Resource, Facility) to set is required along with its id.
	------------------------------------
	Available options:
	--userId            | -u user id
	--authorizedGroupId | -a authorizedGroup id
	--role              | -r role name
	--compObject	    | -o object name
	--objectId          | -i object id
	--batch             | -b batch
	--help              | -h prints this help
};
}

our $batch;

my ($userId, $authorizedGroupId, $role, $compObjectName, $objectId);

GetOptions ("help|h"        => sub {
	print help();
	exit 0;
}, "batch|b"            => \$batch,
	"userId|u=i"            => \$userId,
	"authorizedGroupId|a=i" => \$authorizedGroupId,
	"role|r=s"              => \$role,
	"compObject|o=s" 		=> \$compObjectName,
	"objectId|i=i"			=> \$objectId) || die help();


# One of userId or authorizedGroupId must be set
if (!defined($userId) && !defined($authorizedGroupId)) { die "ERROR: one of userId and authorizedGroupId is required\n"; }
if (defined($userId) && defined($authorizedGroupId)) { die "ERROR: only one of userId and authorizedGroupId must be set at one moment\n"; }

# Role must be set
unless (defined($role)) { die "ERROR: role name is required\n" };
if ($role !~ /^[A-Z]+$/) { die "ERROR: role must be one word in uppercase format\n"; }


my $agent = Perun::Agent->new();
my $authzResolverAgent = $agent->getAuthzResolverAgent();
my @rules = $authzResolverAgent->getAllRolesManagementRules();

foreach (@rules) {
	my $rule = $_;
	if ($rule->getRoleName() eq $role) {
		my $primObject = $rule->getPrimaryObject();
		if (!defined($primObject)) {
			if (defined($compObjectName)) {
				die "ERROR: role $role doesn't have a complementary object\n";
			}
		} elsif (!defined($compObjectName) || !defined($objectId) || lc $primObject ne lc $compObjectName) {
			die "ERROR: role $role requires object $primObject";
		}

		if (defined($userId)) {
			if (!exists($rule->getEntitiesToManage()->{User})) {
				die "ERROR: $role is not assignable to user\n";
			}
			if (defined($primObject)) {
				$authzResolverAgent->setRole(user => $userId, complementaryObject => getObject(), role => $role);
			} else {
				$authzResolverAgent->setRole(user => $userId,  role => $role);
			}
			my $displayName = $rule->getDisplayName();
			printMessage("Role $displayName successfully set for user $userId", $batch);
			exit 0;
		} elsif (defined($authorizedGroupId)) {
			if (!exists($rule->getEntitiesToManage->{Group})) {
				die "ERROR: $role is not assignable to group\n";
			}
			if (defined($primObject)) {
				$authzResolverAgent->setRole(authorizedGroup => $authorizedGroupId, complementaryObject => getObject(), role => $role);
			} else {
				$authzResolverAgent->setRole(authorizedGroup => $authorizedGroupId,  role => $role);
			}
			my $displayName = $rule->getDisplayName();
			printMessage("Role $displayName successfully set for group $authorizedGroupId", $batch);
			exit 0;
		}
	}
}

die "ERROR: role $role not found\n";


sub getObject {
	switch(lc $compObjectName) {
		case "vo" {
			my $vosAgent = $agent->getVosAgent;
			return $vosAgent->getVoById( id => $objectId );
		}
		case "facility" {
			my $facilitiesAgent = $agent->getFacilitiesAgent;
			return $facilitiesAgent->getFacilityById( id => $objectId );
		}
		case "group" {
			my $groupsAgent = $agent->getGroupsAgent;
			return $groupsAgent->getGroupById( id => $objectId );
		}
		case "resource" {
			my $resourcesAgent = $agent->getResourcesAgent;
			return $resourcesAgent->getResourceById( id => $objectId );
		}
		case "service" {
			my $servicesAgent = $agent->getServicesAgent;
			return $servicesAgent->getServiceById( id => $objectId );
		}
		case "securityteam" {
			my $securityTeamsAgent = $agent->getSecurityTeamsAgent;
			return $securityTeamsAgent->getSecurityTeamById( id => $objectId );
		}
		else {
			die "ERROR: Invalid object name\n";
		}
	}
}