#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage getSortingFunction tableContentToPrint);

sub help {
	return qq{
	Tool prints list of Facility Manager. Facility is required field.
	------------------------------
	Available options:
	--facilityId   | -f facility id
	--facilityName | -F facility name
	--orderByName  | -n  order by Manager's name (default by Id)
	--batch        | -b batch
	--help         | -h prints this help
	};
}

my ($facilityId, $userId, $facilityName, $sortingFunction, $sortingFunction2,  $byName, $batch);
GetOptions("help|h"    => sub {
		print help;
		exit 0;
	},
	"facilityId|f=i"   => \$facilityId,
	"facilityName|F=s" => \$facilityName,
	"orderByName|n"    => \$byName,
	"batch|b"          => \$batch) || die help;

my $agent = Perun::Agent->new();
my $facilitiesAgent = $agent->getFacilitiesAgent;
my $groupsAgent = $agent->getGroupsAgent;

#options check
if (defined $byName) {
	$sortingFunction = getSortingFunction("getLastName",1);
	$sortingFunction2 = getSortingFunction("getLastName",1);
} else {
	$sortingFunction = getSortingFunction("getId");
	$sortingFunction2 = getSortingFunction("getUserId");
}

unless (defined($facilityId) or (defined($facilityName))) { die "ERROR: facilityId or facilityName is required \n";}

unless ($facilityId) {
	my $facility = $facilitiesAgent->getFacilityByName( name => $facilityName );
	$facilityId = $facility->getId;
}

my @richUsers = $facilitiesAgent->getAdmins( facility => $facilityId, onlyDirectAdmins => 1, pageSize => 0, pageNum => 0 );

my @groups = $facilitiesAgent->getAdminGroups ( facility => $facilityId );

unless (@richUsers or @groups ) {
	printMessage "No Managers found", $batch;
}

# direct managers
my $ii=0;
my @rows = ();
foreach my $richUser (sort $sortingFunction @richUsers) {
	if ($ii++ == 0) {
		my @row = ('Direct Managers',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	} else {
		my @row = ('',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	}
}

# groups of managers
while (@groups) {
	if ($ii) {
		my @row = (' ',' ',' ');
		push(@rows, \@row);
	}
	my $group=shift (@groups);
	my @members = $groupsAgent->getGroupRichMembers ( group => $group->getId);
	$ii=0;
	foreach my $member (sort $sortingFunction2 @members) {
		if ($ii++ == 0) {
			my @row = ($group->getName,$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		} else {
			my @row = ('',$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		}
	}
}
my @columnsNames = ('Managers group', 'User Id', 'Name');
print tableContentToPrint(\@columnsNames, \@rows, $batch);
