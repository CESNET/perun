#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage getSortingFunction tableContentToPrint);

sub help {
	return qq{
	Tool prints list of VO Managers. Vo is required fields.
	------------------------------
	Available options:
	--voId        | -v  VO idetifier
	--voShortName | -V  VO short name
	--orderByName | -n  order by Manager's name (default by Id)
	--batch       | -b  batch
	--help        | -h  prints this help
	};
}

our $batch;
my ($voId, $voShortName, $sortingFunction, $sortingFunction2, $byName, $role);
GetOptions("help|h"   => sub {
		print help;
		exit 0;
	},
	"voId|v=i"        => \$voId,
	"voShortName|V=s" => \$voShortName,
	"orderByName|n"   => \$byName,
	"batch|b"         => \$batch) || die help;

$role = "VOADMIN";
my $agent = Perun::Agent->new();
my $vosAgent = $agent->getVosAgent;
my $groupsAgent = $agent->getGroupsAgent; 

#options check
if (defined $byName) { 
	$sortingFunction = getSortingFunction("getLastName",1);
	$sortingFunction2 = getSortingFunction("getLastName",1);
} else {
	$sortingFunction = getSortingFunction("getId"); 
	$sortingFunction2 = getSortingFunction("getUserId"); 
}
unless (defined $voId) {
	unless (defined $voShortName) { die "ERROR: VO specification required.\n"; }
	my $vo = $vosAgent->getVoByShortName( shortName => $voShortName );
	$voId = $vo->getId;
}

my @richUsers = $vosAgent->getAdmins( vo => $voId, role => $role, onlyDirectAdmins => 1);

my @groups = $vosAgent->getAdminGroups ( vo => $voId);

unless (@richUsers or @groups ) {
	printMessage "No Managers found", $batch;
}

my @rows = ();

# direct managers
my $ii=0;
foreach my $richUser (sort $sortingFunction @richUsers) {
	if ($ii++ == 0) {
		my @row = ('Direct Managers',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	} else {
		my @row = ('',$richUser->getId, $richUser->getDisplayName);
		push(@rows, \@row);
	}
}

# groups of managers
while (@groups) {
	if ($ii) {
		my @row = (' ',' ',' ');
		push(@rows, \@row);
	}
	my $group=shift (@groups);
	my @members = $groupsAgent->getGroupRichMembers ( group => $group->getId);
	$ii=0;
	foreach my $member (sort $sortingFunction2 @members) {
		if ($ii++ == 0) {
			my @row = ($group->getName,$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		} else {
			my @row = ('',$member->getUserId, $member->getDisplayName);
			push(@rows, \@row);
		}
	} 
}
my @columnsNames = ('Managers group', 'User Id', 'Name');
print tableContentToPrint(\@columnsNames, \@rows, $batch);
