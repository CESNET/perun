#!/usr/bin/perl
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use File::Basename;

our $SERVICE_NAME = basename($0);
our $PROTOCOL_VERSION = "3.6.0";
my $SCRIPT_VERSION = "3.0.9";

sub mergeQuotas {
	my ($sumQuota, $resourceQuota, $memberQuota) = @_;
	{ 
		no warnings qw(uninitialized);
		if($sumQuota ~~ 0 || $resourceQuota == 0 || $memberQuota ~~ 0) { return 0; } #note operator == at $resourceQuota
	}

	if(!defined $memberQuota) { $memberQuota = 0; } 

	return ($sumQuota || 0) + ($memberQuota > $resourceQuota ? $memberQuota : $resourceQuota);
}

sub mergeStatuses {
	my ($finalStatus, $memberStatus) = @_;
	unless(defined $finalStatus) { return $memberStatus; }

	# SUSPENDED state has priority, then it is enough to have at least one member status == VALID
	if ($memberStatus eq "SUSPENDED" || $finalStatus eq "SUSPENDED") { 
		return "SUSPENDED";
	} elsif ($memberStatus eq "VALID" || $finalStatus eq "VALID") { 
		return "VALID";
	} elsif ($memberStatus eq "EXPIRED" || $finalStatus eq "EXPIRED") { 
		return "EXPIRED";
	} elsif ($memberStatus eq "DISABLED" || $finalStatus eq "DISABLED") { 
		return "DISABLED";
	}
}

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getDataWithGroups;

#Constants
our $A_USER_LOGIN;                 *A_USER_LOGIN =                   \'urn:perun:user_facility:attribute-def:virt:login';
our $A_USER_STATUS;                *A_USER_STATUS =                  \'urn:perun:member:attribute-def:core:status';
our $A_HOME_MOUNTPOINT;            *A_HOME_MOUNTPOINT =              \'urn:perun:resource:attribute-def:def:fsHomeMountPoint';
our $A_R_VOLUME;                   *A_R_VOLUME =                     \'urn:perun:resource:attribute-def:def:fsVolume';
our $A_GID;                        *A_GID =                          \'urn:perun:resource:attribute-def:virt:unixGID';
our $A_UID;                        *A_UID =                          \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_R_SOFT_QUOTA_DATA;          *A_R_SOFT_QUOTA_DATA =            \'urn:perun:resource:attribute-def:def:defaultDataQuota';
our $A_R_SOFT_QUOTA_FILE;          *A_R_SOFT_QUOTA_FILE =            \'urn:perun:resource:attribute-def:def:defaultFilesQuota';
our $A_R_HARD_QUOTA_DATA;          *A_R_HARD_QUOTA_DATA =            \'urn:perun:resource:attribute-def:def:defaultDataLimit';
our $A_R_HARD_QUOTA_FILE;          *A_R_HARD_QUOTA_FILE =            \'urn:perun:resource:attribute-def:def:defaultFilesLimit';
our $A_F_UMASK;                    *A_F_UMASK =                      \'urn:perun:facility:attribute-def:def:homeDirUmask';
our $A_MR_DATALIMIT;               *A_MR_DATALIMIT =                 \'urn:perun:member_resource:attribute-def:def:dataLimit';
our $A_MR_DATAQUOTA;               *A_MR_DATAQUOTA =                 \'urn:perun:member_resource:attribute-def:def:dataQuota';
our $A_MR_FILESLIMIT;              *A_MR_FILESLIMIT =                \'urn:perun:member_resource:attribute-def:def:filesLimit';
our $A_MR_FILESQUOTA;              *A_MR_FILESQUOTA =                \'urn:perun:member_resource:attribute-def:def:filesQuota';
our $A_F_QUOTAENABLED;             *A_F_QUOTAENABLED =               \'urn:perun:facility:attribute-def:def:quotaEnabled';

#our $A_RESOURCE_UNIX_GROUP_NAME;  *A_RESOURCE_UNIX_GROUP_NAME =     \'urn:perun:resource:attribute-def:virt:unixGroupName';
#our $A_RESOURCE_UNIX_GID;         *A_RESOURCE_UNIX_GID =            \'urn:perun:resource:attribute-def:virt:unixGID';
our $A_GROUP_UNIX_GROUP_NAME;      *A_GROUP_UNIX_GROUP_NAME =        \'urn:perun:group_resource:attribute-def:virt:unixGroupName';
our $A_GROUP_GROUP_NAME;           *A_GROUP_GROUP_NAME =             \'urn:perun:group:attribute-def:core:name';
#our $A_GROUP_UNIX_GID;            *A_GROUP_UNIX_GID =               \'urn:perun:group_resource:attribute-def:virt:unixGID';
our $A_R_VO_NAME;                  *A_R_VO_NAME =                    \'urn:perun:resource:attribute-def:virt:voShortName';

our $STRUC_GROUPS;   *STRUC_GROUPS =  \"groups";

my $service_file_name = "$DIRECTORY/$::SERVICE_NAME";
my $umask_file_name = "$DIRECTORY/umask";
my $quota_enabled_file_name = "$DIRECTORY/quota_enabled";

my $memberAttributesByLoginAndMount = {};

my %facilityAttributes = attributesToHash $data->getAttributes;
#####################################

####### output file ######################
open SERVICE_FILE,">$service_file_name" or die "Cannot open $service_file_name: $! \n";

my @resourcesData = $data->getChildElements;
foreach my $rData (@resourcesData) {
	my %resourceAttributes = attributesToHash $rData->getAttributes;

	my $volume = $resourceAttributes{$A_R_VOLUME} || $resourceAttributes{$A_HOME_MOUNTPOINT};
	my $mountPoint = $resourceAttributes{$A_HOME_MOUNTPOINT};

	my @membersData = ($rData->getChildElements)[1]->getChildElements;

	foreach my $mData (@membersData) {
		my %memberAttributes = attributesToHash $mData->getAttributes;

		unless(defined $memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume}) { $memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume} = {}; }
		my $alreadyStoredMemberAttrByMount = $memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume};

		$alreadyStoredMemberAttrByMount->{$A_R_VOLUME} = $volume;
		$alreadyStoredMemberAttrByMount->{$A_USER_LOGIN} = $memberAttributes{$A_USER_LOGIN};
		$alreadyStoredMemberAttrByMount->{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_GID} = $resourceAttributes{$A_GID};
		$alreadyStoredMemberAttrByMount->{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_UID} = $memberAttributes{$A_UID};
		$alreadyStoredMemberAttrByMount->{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_USER_STATUS} = mergeStatuses $memberAttributes{$A_HOME_MOUNTPOINT}->{$resourceAttributes{$A_HOME_MOUNTPOINT}}->{$A_USER_STATUS}, $memberAttributes{$A_USER_STATUS};
		$alreadyStoredMemberAttrByMount->{$A_MR_DATAQUOTA}  = mergeQuotas $memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume}->{$A_MR_DATAQUOTA},  quotaToKb $resourceAttributes{$A_R_SOFT_QUOTA_DATA}, (defined $memberAttributes{$A_MR_DATAQUOTA} ? quotaToKb $memberAttributes{$A_MR_DATAQUOTA} : undef);
		$alreadyStoredMemberAttrByMount->{$A_MR_DATALIMIT}  = mergeQuotas $memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume}->{$A_MR_DATALIMIT},  quotaToKb $resourceAttributes{$A_R_HARD_QUOTA_DATA}, (defined $memberAttributes{$A_MR_DATALIMIT} ? quotaToKb $memberAttributes{$A_MR_DATALIMIT} : undef);
		$alreadyStoredMemberAttrByMount->{$A_MR_FILESQUOTA} = mergeQuotas $memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume}->{$A_MR_FILESQUOTA}, $resourceAttributes{$A_R_SOFT_QUOTA_FILE}, $memberAttributes{$A_MR_FILESQUOTA};
		$alreadyStoredMemberAttrByMount->{$A_MR_FILESLIMIT} = mergeQuotas $memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume}->{$A_MR_FILESLIMIT}, $resourceAttributes{$A_R_HARD_QUOTA_FILE}, $memberAttributes{$A_MR_FILESLIMIT};

		#store to global structure
		#$memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume} = \%memberAttributes;
	}

	foreach my $groupData (($rData->getChildElements)[0]->getChildElements) {
		my $membersElement = ($groupData->getChildElements)[1];
		my %groupAttributes = attributesToHash $groupData->getAttributes;

		my $groupName = $groupAttributes{$A_GROUP_GROUP_NAME};
		my $groupNameWithVo = $resourceAttributes{$A_R_VO_NAME} . ":" . $groupName;
		my $unixGroupName = $groupAttributes{$A_GROUP_UNIX_GROUP_NAME};

		my @membersData = $groupData->getChildElements;

		foreach my $mData ($membersElement->getChildElements) {
			my %memberAttributes = attributesToHash $mData->getAttributes;
			$memberAttributesByLoginAndMount->{$memberAttributes{$A_USER_LOGIN}}->{$volume}->{$STRUC_GROUPS}->{$groupNameWithVo} = $unixGroupName;
		}
	}
}
				
for my $userAttributesByMount (values %$memberAttributesByLoginAndMount) {
	for my $userAttributes (values %$userAttributesByMount) {
		for my $mountPoint (keys %{$userAttributes->{$A_HOME_MOUNTPOINT}}) {
			print SERVICE_FILE $mountPoint . "\t";
			print SERVICE_FILE $userAttributes->{$A_USER_LOGIN} . "\t";
			print SERVICE_FILE $userAttributes->{$A_HOME_MOUNTPOINT}->{$mountPoint}->{$A_UID} . "\t";
			print SERVICE_FILE $userAttributes->{$A_HOME_MOUNTPOINT}->{$mountPoint}->{$A_GID} . "\t";
			print SERVICE_FILE $userAttributes->{$A_MR_DATAQUOTA} . "\t";
			print SERVICE_FILE $userAttributes->{$A_MR_DATALIMIT} . "\t";
			print SERVICE_FILE $userAttributes->{$A_MR_FILESQUOTA} . "\t";
			print SERVICE_FILE $userAttributes->{$A_MR_FILESLIMIT} . "\t";
			print SERVICE_FILE $userAttributes->{$A_HOME_MOUNTPOINT}->{$mountPoint}->{$A_USER_STATUS} . "\t";

			print SERVICE_FILE join ',', map { $_ . ">" . ($userAttributes->{$STRUC_GROUPS}->{$_} || "") } keys %{$userAttributes->{$STRUC_GROUPS}};
			print SERVICE_FILE "\n";

		}
	}
}

close(SERVICE_FILE);

if(defined $facilityAttributes{$A_F_UMASK}) {
	open UMASK_FH, ">$umask_file_name" or die "Cannot open $umask_file_name: $!\n";
	print UMASK_FH $facilityAttributes{$A_F_UMASK}, "\n";
	close UMASK_FH;
}

if(defined $facilityAttributes{$A_F_QUOTAENABLED}) {
	open QUOTA_FH, ">$quota_enabled_file_name" or die "Cannot open $quota_enabled_file_name: $!\n";
	print QUOTA_FH $facilityAttributes{$A_F_QUOTAENABLED}, "\n";
	close QUOTA_FH;
}
#####################################################
perunServicesInit::finalize;
