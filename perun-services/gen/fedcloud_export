#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;

local $::SERVICE_NAME = "fedcloud_export";
local $::PROTOCOL_VERSION = "3.1.0";
my $SCRIPT_VERSION = "3.0.1";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#Constants
our $A_R_VO_SHORT_NAME;             *A_R_VO_SHORT_NAME =             \'urn:perun:resource:attribute-def:virt:voShortName';
our $A_MEMBER_MAIL;                 *A_MEMBER_MAIL =                 \'urn:perun:user:attribute-def:def:preferredMail';
our $A_MEMBER_STATUS;               *A_MEMBER_STATUS =               \'urn:perun:member:attribute-def:core:status';
our $A_USER_CERT_DNS;               *A_USER_CERT_DNS =               \'urn:perun:user:attribute-def:virt:userCertDNs';
our $A_USER_FACILITY_UID;           *A_USER_FACILITY_UID =           \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_USER_SSH_KEY;                *A_USER_SSH_KEY =                \'urn:perun:user:attribute-def:def:sshPublicKey';
our $A_F_DESTINATION_PLATFORM_MAP;  *A_F_DESTINATION_PLATFORM_MAP =  \'urn:perun:facility:attribute-def:def:cloudPlatformDestinationMap';

our $STATUS_VALID;                  *STATUS_VALID =                  \'VALID';

my $RECORD_SEPARATOR = chr 30;

my %facilityAttributes = attributesToHash $data->getAttributes;
my %destinationPlatformMap = %{$facilityAttributes{$A_F_DESTINATION_PLATFORM_MAP}};
$destinationPlatformMap{'all'} = 'opennebula'; #hard-coded default

for my $destination (keys %destinationPlatformMap) {
	my $destinationDirectory = getDestinationDirectory $destination;
	my $platformFileName = "$destinationDirectory/CLOUD_PLATFORM";
	open PLATFORM,">$platformFileName" or die "Cannot open $platformFileName: $! \n";
	print PLATFORM $destinationPlatformMap{$destination};
	close PLATFORM or die "Error closing file";
}

my $fileName = "$DIRECTORY/$::SERVICE_NAME";
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";

my @membersAttributes;
my @resourcesData = $data->getChildElements;
for my $rData (@resourcesData) {
	my %resourcesAttributes = attributesToHash $rData->getAttributes;
	for my $mData ($rData->getChildElements) {
		my %mAttrs = attributesToHash $mData->getAttributes;
		$mAttrs{$A_R_VO_SHORT_NAME} = $resourcesAttributes{$A_R_VO_SHORT_NAME};
		push @membersAttributes, \%mAttrs;
	}
}

# DN uzivatele:DN certifikacni autority:jmeno uzivatele:email uzivatele
foreach my $memberAttributes (@membersAttributes) {
	if ($memberAttributes->{$A_MEMBER_STATUS} eq $STATUS_VALID) {
		my @DNs = keys %{$memberAttributes->{$A_USER_CERT_DNS}};
		my $DN = $DNs[0];
		my $uid = $memberAttributes->{$A_R_VO_SHORT_NAME} . "_" . $memberAttributes->{$A_USER_FACILITY_UID};

		my $sshKeys = "";
		if($memberAttributes->{$A_USER_SSH_KEY}) {
			$sshKeys = join '|', @{$memberAttributes->{$A_USER_SSH_KEY}};
		}

		print FILE $uid, $RECORD_SEPARATOR, $memberAttributes->{$A_R_VO_SHORT_NAME}, $RECORD_SEPARATOR, $DN, $RECORD_SEPARATOR, $memberAttributes->{$A_MEMBER_MAIL}, $RECORD_SEPARATOR, $sshKeys, "\n";
	}
}

close (FILE) or die "Cannot close $fileName: $! \n";
perunServicesInit::finalize;
