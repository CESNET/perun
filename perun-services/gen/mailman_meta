#!/usr/bin/perl

#######################################
# Generates members of a mailing list #
#######################################

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Text::Unidecode;
use POSIX qw/strftime/; 

local $::SERVICE_NAME = "mailman_meta";
local $::PROTOCOL_VERSION = "3.1.0";
my $SCRIPT_VERSION = "3.2.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#Constants
our $A_USER_NAME;                            *A_USER_NAME =                             \'urn:perun:user:attribute-def:core:displayName';
our $A_USER_MAIL;                            *A_USER_MAIL =                             \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_LANG;                            *A_USER_LANG =                             \'urn:perun:user:attribute-def:def:preferredLanguage';
our $A_USER_STATUS;                          *A_USER_STATUS =                           \'urn:perun:member:attribute-def:core:status';
our $A_USER_EXPIRES;                         *A_USER_EXPIRES =                          \'urn:perun:member:attribute-def:def:membershipExpiration';
our $A_USER_LOA;                             *A_USER_LOA =                              \'urn:perun:member:attribute-def:virt:loa';
our $A_USER_OPT_OUT;                         *A_USER_OPT_OUT =                          \'urn:perun:member_resource:attribute-def:def:optOutMailingList';

our $A_RESOURCE_MAILING_LIST_NAME;           *A_RESOURCE_MAILING_LIST_NAME =            \'urn:perun:resource:attribute-def:def:mailingListName';
our $A_RESOURCE_MAILING_LIST_VARIANTS;			 *A_RESOURCE_MAILING_LIST_VARIANTS =        \'urn:perun:resource:attribute-def:def:mailingListUsesLangVariants'; # true for -cs and -en variants
our $A_RESOURCE_MAILING_LIST_NONVALID_USERS; *A_RESOURCE_MAILING_LIST_NONVALID_USERS =  \'urn:perun:resource:attribute-def:def:mailingListAllowInvalidUsers'; # true to allow users with status other than VALID

my $mailinglistStruc = {};  # $mailinglistStruc->{"mailing list name including lang"}->{"user's e-mail"}->{A_USER_*} 

my $mailinglistsDirectory = "$DIRECTORY/mailinglists";
mkdir $mailinglistsDirectory or die "Can't mkdir $mailinglistsDirectory: $!";

my @membersAttributes;
my @resourcesData = $data->getChildElements;
foreach my $rData (@resourcesData) {
	my %resourceAttributes  = attributesToHash $rData->getAttributes;
	local *FILE;

	my @membersData = $rData->getChildElements;
	my $useLangVariants = (defined($resourceAttributes{$A_RESOURCE_MAILING_LIST_VARIANTS}) && ($resourceAttributes{$A_RESOURCE_MAILING_LIST_VARIANTS} eq "true") );
	my $allowNonvalidUsers = (defined($resourceAttributes{$A_RESOURCE_MAILING_LIST_NONVALID_USERS}) && ($resourceAttributes{$A_RESOURCE_MAILING_LIST_NONVALID_USERS} eq "true") );

	my $listName = "$resourceAttributes{$A_RESOURCE_MAILING_LIST_NAME}";
	my $listNameEN = $listName . "-en";
	my $listNameCS = $listName . "-cs";

	#create not existing mailing list in structure (even if is empty)
	if($useLangVariants) {
		$mailinglistStruc->{$listNameCS} = {} unless $mailinglistStruc->{$listNameCS};
		$mailinglistStruc->{$listNameEN} = {} unless $mailinglistStruc->{$listNameEN};
	} else {
		print "No list\n";
		$mailinglistStruc->{$listName} = {} unless $mailinglistStruc->{$listName};
	}

	foreach my $memberAttributes (dataToAttributesHashes @membersData) {
		#list only VALID members except if allowNonvalidUsers is true
		next unless(($memberAttributes->{$A_USER_STATUS} eq "VALID") || ($allowNonvalidUsers));
		#list only members that did not opt out
		next if defined $memberAttributes->{$A_USER_OPT_OUT};

		my $listNameWithLang = $listName;
		if($useLangVariants) {
			if(defined($memberAttributes->{$A_USER_LANG}) && $memberAttributes->{$A_USER_LANG} eq "cs") {
				$listNameWithLang = $listNameCS;
			} else {
				$listNameWithLang = $listNameEN;
			}
		}
		
		#list-specific filters
		if ($listName eq "metavo-membership") {
			#list only members that have loa=2 and expires in less than 60 days or expired before less than 30 days
			my $userLoa = $memberAttributes->{$A_USER_LOA};
			next if not $userLoa eq "2" ;
			my $userExpires = $memberAttributes->{$A_USER_EXPIRES};
			my $in60days = strftime("%Y-%m-%d",localtime (time+(60*60*24*60)));
			my $before30days = strftime("%Y-%m-%d",localtime (time-(60*60*24*30)));
			next if ($userExpires gt $in60days);
			next if ($userExpires lt $before30days);
			$mailinglistStruc->{$listNameWithLang}->{$memberAttributes->{$A_USER_MAIL}}->{$A_USER_EXPIRES} = $memberAttributes->{$A_USER_EXPIRES};
		}

		$mailinglistStruc->{$listNameWithLang}->{$memberAttributes->{$A_USER_MAIL}}->{$A_USER_NAME} = $memberAttributes->{$A_USER_NAME};
	}
}


for my $listName (keys %$mailinglistStruc) {
	my $fileName = "$mailinglistsDirectory/$listName";
	open FILE,">$fileName" or die "Cannot open $fileName: $! \n";

	for my $mail (keys %{$mailinglistStruc->{$listName}}) {
		print FILE "\"", unidecode($mailinglistStruc->{$listName}->{$mail}->{$A_USER_NAME});
		if(defined $mailinglistStruc->{$listName}->{$mail}->{$A_USER_EXPIRES}) { print FILE " expiring ", $mailinglistStruc->{$listName}->{$mail}->{$A_USER_EXPIRES}; }
		print FILE "\" <", $mail, ">\n";
	}

	close FILE or die $!;
}

perunServicesInit::finalize;
