<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>perun</artifactId>
		<groupId>cz.metacentrum</groupId>
		<version>3.0.1-SNAPSHOT</version>
	</parent>

	<groupId>cz.metacentrum.perun</groupId>
	<artifactId>perun-core</artifactId>
	<version>3.0.1-SNAPSHOT-${perun.build.type}</version>
	<packaging>jar</packaging>

	<name>perun-core</name>
	<description>Core module of Perun system used to access DB</description>

	<!-- module properties and versions -->
	<properties>
		<powermock.version>1.4.8</powermock.version>
	</properties>

	<!-- Build settings for all profiles -->
	<build>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>eu.somatik.serviceloader-maven-plugin</groupId>
				<artifactId>serviceloader-maven-plugin</artifactId>
				<version>1.0.2</version>
				<configuration>
					<services>
						<param>cz.metacentrum.perun.core.implApi.modules.attributes.AttributesModuleImplApi</param>
					</services>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- JAR with Main class, needed to join the Spring 3 separate JARs with separate schemas and handlers into one JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<!-- which class should be run when the JAR is executed -->
									<mainClass>cz.metacentrum.perun.core.impl.Main</mainClass>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.handlers</resource>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.schemas</resource>
								</transformer>
							</transformers>
							<artifactSet>
								<excludes>
									<!-- test artifacts are excluded by default -->
									<!-- we don't need maven build plugins in our application -->
									<exclude>org.apache.maven*</exclude>
								</excludes>
							</artifactSet>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>

		<!-- set filtering on resources -->
		<resources>
			<resource>
				<!-- to set jdbc.properties path and logging folder -->
				<directory>src/main/resources/</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

	</build>

	<!-- Dependencies for all profiles -->
	<dependencies>

		<!-- PERUN -->

		<dependency>
			<groupId>cz.metacentrum.perun</groupId>
			<artifactId>perun-base</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>cz.metacentrum.perun</groupId>
			<artifactId>perun-auditparser</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- DBs -->
		<!-- PostgreSQL driver -->
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
		<!-- Oracle jdbc driver -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc7</artifactId>
		</dependency>
		<!-- Oracle internationalization -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>orai18n</artifactId>
		</dependency>
		<!-- SQL Lite -->
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
		</dependency>
		<!-- Mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<!--HSQL-->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-dbcp</artifactId>
		</dependency>

		<!-- SPRING -->

		<!-- spring -->
		<!-- see  http://blog.springsource.com/2009/12/02/obtaining-spring-3-artifacts-with-maven/ -->
		<!--
		  Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans)
		  This is the central artifact for Spring's Dependency Injection Container and is generally always defined
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>

		<!--
		  JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, spring-tx)
		  Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*)
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>

		<!--
		  Web application development utilities applicable to both Servlet and Portlet Environments
		  (depends on spring-core, spring-beans, spring-context)
		  Define this if you use Spring MVC, or wish to use Struts, JSF, or another web framework with Spring (org.springframework.web.*)

		  Perun-core does not require this dependency. However, it is required by the all perun-api-driven web applications, so we define it here rather than elsewhere.
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<!--
			Support for testing Spring applications with tools such as JUnit and TestNG
			This artifact is generally always defined with a 'test' scope for the integration testing framework and unit testing stubs
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>

		<!-- TEST -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>

		<!-- LOGGING -->

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<!-- OTHERS -->

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.2</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.5</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.4.5</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>4.5.2</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>1.7.11</version>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>

		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
		</dependency>

		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>2.2.2</version>
		</dependency>

		<dependency>
			<groupId>net.jcip</groupId>
			<artifactId>jcip-annotations</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<groupId>eu.somatik.serviceloader-maven-plugin</groupId>
			<artifactId>serviceloader-maven-plugin</artifactId>
			<version>1.0.2</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>3.3</version>
		</dependency>

		<dependency>
			<groupId>com.google.apis</groupId>
			<artifactId>google-api-services-admin-directory</artifactId>
			<version>directory_v1-rev54-1.20.0</version>
		</dependency>

		<dependency>
			<groupId>com.google.http-client</groupId>
			<artifactId>google-http-client-jackson2</artifactId>
			<version>1.18.0-rc</version>
		</dependency>

		<dependency>
			<groupId>com.google.api-client</groupId>
			<artifactId>google-api-client</artifactId>
			<version>1.18.0-rc</version>
		</dependency>
                <dependency>
 			<groupId>org.json</groupId>
 			<artifactId>json</artifactId>
 			<version>20160212</version>
 		</dependency>
	</dependencies>

	<profiles>

		<profile>

			<id>devel</id>

			<activation>
				<property>
					<name>devel</name>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<spring.profiles.default>devel</spring.profiles.default>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>

		</profile>

		<profile>

			<id>production</id>

			<activation>
				<property>
					<name>production</name>
				</property>
			</activation>

			<properties>
				<perun.build.type>production</perun.build.type>
				<maven.test.skip>true</maven.test.skip>
			</properties>

			<dependencies>

				<!-- FIXME - re-define "provided" scope, so it won't be in final production jar/war -->
				<!-- FIXME - it's provided by devel/production tomcat instance -->
				<dependency>
					<groupId>org.apache.tomcat</groupId>
					<artifactId>tomcat-dbcp</artifactId>
					<scope>provided</scope>
				</dependency>

			</dependencies>

		</profile>

	</profiles>

</project>
