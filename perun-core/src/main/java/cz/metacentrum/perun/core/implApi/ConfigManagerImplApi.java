package cz.metacentrum.perun.core.implApi;

import cz.metacentrum.perun.core.api.OidcConfig;
import cz.metacentrum.perun.core.api.exceptions.OidcConfigFileNotExistsException;
import cz.metacentrum.perun.core.api.exceptions.OidcConfigNotExistsException;
import cz.metacentrum.perun.core.impl.PerunAppsConfigLoader;
import cz.metacentrum.perun.core.impl.PerunOidcConfigLoader;

/**
 * ConfigManager serves to manage configuration files.
 *
 * @author David Flor <493294@mail.muni.cz>
 */
public interface ConfigManagerImplApi {

  /**
   * Returns Oidc Configuration for this Perun instance (to be used for CLI communication).
   *
   * @param name name of desired configuration
   * @return oidcConfig
   * @throws OidcConfigNotExistsException     when configuration under such name doesn't exist
   * @throws OidcConfigFileNotExistsException when configuration file for oidc configs doesn't exist.
   */
  OidcConfig getPerunOidcConfig(String name) throws OidcConfigNotExistsException, OidcConfigFileNotExistsException;

  /**
   * Reloads the configuration of brandings and their respective apps (see perun-apps-config.yml)
   */
  void reloadAppsConfig();

  /**
   * Checks whether spool files generated by the engine should be archived
   */
  boolean isArchiveSpoolEnabled();

  /**
   * Sets the PerunAppsConfigLoader
   *
   * @param perunAppsConfigLoader loader to set
   */
  void setPerunAppsConfigLoader(PerunAppsConfigLoader perunAppsConfigLoader);

  /**
   * Sets the PerunOidcConfigLoader
   *
   * @param perunOidcConfigLoader loader to set
   */
  void setPerunOidcConfigLoader(PerunOidcConfigLoader perunOidcConfigLoader);

  /**
   * Check if change of name to name from user ext source is enabled.
   *
   * @return true if name from ues is enabled, otherwise false
   */
  boolean getEnableLinkedName();

  /**
   * Check if change of name to custom name is enabled.
   *
   * @return true if custom name enabled, otherwise false
   */
  boolean getEnableCustomName();

  /**
   * Check if custom name requires approve.
   *
   * @return true if custom name requires approve, otherwise false
   */
  boolean getCustomNameRequiresApprove();

  /**
   * Check if change of organization to organization from user ext source is enabled.
   *
   * @return true if organization from ues is enabled, otherwise false
   */
  boolean getEnableLinkedOrganization();

  /**
   * Check if change of organization to organization name is enabled.
   *
   * @return true if custom organization enabled, otherwise false
   */
  boolean getEnableCustomOrganization();

  /**
   * Check if custom organization requires approve.
   *
   * @return true if custom organization requires approve, otherwise false
   */
  boolean getCustomOrganizationRequiresApprove();

  /**
   * Check if change of email to email from user ext source is enabled.
   *
   * @return true if email from ues is enabled, otherwise false
   */
  boolean getEnableLinkedEmail();

  /**
   * Check if change of email to organization email is enabled.
   *
   * @return true if custom email enabled, otherwise false
   */
  boolean getEnableCustomEmail();

  /**
   * Check if custom email requires verification.
   *
   * @return true if custom email requires verification, otherwise false
   */
  boolean getCustomEmailRequiresVerification();
}
