#!/usr/bin/perl -w
use strict;
use warnings FATAL => 'all';

use DBI;
use POSIX qw(:errno_h);
use Getopt::Long qw(:config no_ignore_case);

sub help {
	return qq{
        Adds SPREGAPPLICATION role to attribute policies.
        SPREGAPPLICATION can read selected facility attributes and user attributes.
        The script creates new policy collections for these attributes with single policy containing the new role.
        If the role is not in the database, the script inserts it first.
        --------------------------------------
        Available options:

        --user      | -u Username for Perun DB (required)
        --password  | -w Password for Perun DB (required)
        --overwrite | -o removes all existing SPREG application COLLECTIONS!
        };
}

# Specific attributes besides READ for facility attributes
my @readAttributes = (
	"urn:perun:user:attribute-def:def:preferredMail"
);
my @readWriteAttributes = (
	"urn:perun:facility:attribute-def:def:proxyIdentifiers",
	"urn:perun:facility:attribute-def:def:masterProxyIdentifier",
	"urn:perun:facility:attribute-def:def:isTestSp",
	"urn:perun:facility:attribute-def:def:showOnServiceList",
	"urn:perun:facility:attribute-def:def:administratorContact",
	"urn:perun:facility:attribute-def:def:OIDCClientID",
	"urn:perun:facility:attribute-def:def:OIDCClientSecret",
	"urn:perun:facility:attribute-def:def:entityID",
	"urn:perun:facility:attribute-def:def:isSamlFacility",
	"urn:perun:facility:attribute-def:def:isOidcFacility",
	"urn:perun:facility:attribute-def:def:serviceName",
	"urn:perun:facility:attribute-def:def:serviceDescription",
	"urn:perun:facility:attribute-def:def:rpManagersGroupId",
	"urn:perun:facility:attribute-def:def:spInformationURL",
	"urn:perun:facility:attribute-def:def:rpLoginURL",
	"urn:perun:facility:attribute-def:def:RaS",
	"urn:perun:facility:attribute-def:def:spPrivacyPolicyURL",
	"urn:perun:facility:attribute-def:def:spAdminContact",
	"urn:perun:facility:attribute-def:def:spSupportContact",
	"urn:perun:facility:attribute-def:def:spSecurityContact",
	"urn:perun:facility:attribute-def:def:spInternal",
	"urn:perun:facility:attribute-def:def:rpCategory",
	"urn:perun:facility:attribute-def:def:organizationName",
	"urn:perun:facility:attribute-def:def:spOrganizationURL",
	"urn:perun:facility:attribute-def:def:CoCo",
	"urn:perun:facility:attribute-def:def:assertionConsumerServices",
	"urn:perun:facility:attribute-def:def:singleLogoutServices",
	"urn:perun:facility:attribute-def:def:requiredAttributes",
	"urn:perun:facility:attribute-def:def:signingCert",
	"urn:perun:facility:attribute-def:def:encryptionCert",
	"urn:perun:facility:attribute-def:def:metadataURL",
	"urn:perun:facility:attribute-def:def:nameIDFormat",
	"urn:perun:facility:attribute-def:def:relayState",
	"urn:perun:facility:attribute-def:def:OIDCRedirectURIs",
	"urn:perun:facility:attribute-def:def:OIDCFlowTypes",
	"urn:perun:facility:attribute-def:def:OIDCCodeChallengeType",
	"urn:perun:facility:attribute-def:def:OIDCIssuedRefreshTokens",
	"urn:perun:facility:attribute-def:def:OIDCAllowIntrospection",
	"urn:perun:facility:attribute-def:def:requiredScopes",
	"urn:perun:facility:attribute-def:def:OIDCLogoutRedirectURIs",
	"urn:perun:facility:attribute-def:def:checkGroupMembership",
	"urn:perun:facility:attribute-def:def:allowRegistration",
	"urn:perun:facility:attribute-def:def:dynamicRegistration",
	"urn:perun:facility:attribute-def:def:registrationURL",
	"urn:perun:facility:attribute-def:def:OIDCTokenEndpointAuthenticationMethod",
	"urn:perun:facility:attribute-def:def:informationURL",
	"urn:perun:facility:attribute-def:def:loginURL",
	"urn:perun:facility:attribute-def:def:rpJurisdiction",
	"urn:perun:facility:attribute-def:def:privacyPolicyURL",
	"urn:perun:facility:attribute-def:def:organizationURL",
	"urn:perun:facility:attribute-def:def:certData",
	"urn:perun:facility:attribute-def:def:OIDCPostLogoutRedirectURIs",
	"urn:perun:facility:attribute-def:def:rpInformationURL",
	"urn:perun:facility:attribute-def:def:rpPrivacyPolicy",
	"urn:perun:facility:attribute-def:def:rpAdminContact",
	"urn:perun:facility:attribute-def:def:rpSupportContact",
	"urn:perun:facility:attribute-def:def:rpServiceAccessTerms",
	"urn:perun:facility:attribute-def:def:rpServiceIsNonEinfraUserEnabled",
	"urn:perun:facility:attribute-def:def:rpServiceGrantTermsUrl",
	"urn:perun:facility:attribute-def:def:rpOrganizationServiceGarant",
	"urn:perun:facility:attribute-def:def:assertionConsumerService",
	"urn:perun:facility:attribute-def:def:singleLogoutService",
	"urn:perun:facility:attribute-def:def:OIDCIssueRefreshTokens"
);
my ($user, $pwd, $overwrite);

GetOptions ("help|h" => sub { print help(); exit 0;},
	"user|u=s" => \$user,
	"password|w=s" => \$pwd,
	"overwrite|o" => \$overwrite) || die help();

if (!defined $user) { print "[ERROR] Username for Perun DB is required! Use --help | -h to print help.\n"; exit 1; }
if (!defined $pwd) { print "[ERROR] Password for Perun DB is required! Use --help | -h to print help.\n"; exit 1; }

my $dbh = DBI->connect('dbi:Pg:dbname=perun',$user,$pwd,{RaiseError=>1,AutoCommit=>0,pg_enable_utf8=>1}) or die EPERM," Connect";

my $stGetAttributeId = q{select a.id from attr_names a where a.attr_name=?};

my $sthNewCollection = $dbh->prepare(q{insert into attribute_policy_collections (id, attr_id, action) values (?,?,?);});

my $sthNewPolicy = $dbh->prepare(q{insert into attribute_policies (id, role_id, object, policy_collection_id) values (?,?,'None',?);});

my $sthInsertRole = $dbh->prepare(q{insert into roles (id, name) values (?,'spregapplication');});

my $sthDelCollections = $dbh->prepare(q{delete from attribute_policy_collections where id=?;});

my $sthExistingPolicies = $dbh -> prepare(q{select policy_collection_id from attribute_policies where role_id=?;});

# *******************************
# **     E X E C U T I O N     **
# *******************************

# Insert SPREGAPPLICATION role to DB if not created yet
my $roleId = $dbh->selectrow_array(q{select id from roles where name='spregapplication'});
unless ($roleId) {
	$roleId = $dbh->selectrow_array('select nextval(\'roles_id_seq\')');
	$sthInsertRole->execute($roleId);
	$dbh->commit() or die $dbh->errstr;
	print "INFO: Spregapplication role created\n";
}

# Remove all collections where any policy with SPREGAPPLICATION exists
if ($overwrite) {
	$sthExistingPolicies->execute($roleId);
	while (my @row = $sthExistingPolicies->fetchrow_array()) {
		my ($collectionId) = @row;
		$sthDelCollections->execute($collectionId);
	}
	$dbh->commit() or die $dbh->errstr;
	print "INFO: Existing policy collections successfully removed.\n";
}

# set WRITE policies for chosen attributes for SPREGAPPLICATION
foreach my $attrName (@readWriteAttributes) {
        my $attrId = $dbh->selectrow_array($stGetAttributeId, {}, $attrName);

        # If attribute does not exist on given instance, skip it
        unless ($attrId) {
            next;
        }

        my $nextCollectionId = $dbh->selectrow_array('select nextval(\'attribute_policy_collections_id_seq\')');
        my $nextPolicyId = $dbh->selectrow_array('select nextval(\'attribute_policies_id_seq\')');
        $sthNewCollection->execute($nextCollectionId, $attrId, "WRITE");          #(id, attr_id, action)
        $sthNewPolicy->execute($nextPolicyId, $roleId, $nextCollectionId); #(id, role_id, policy_collection_id)
}

# add READ/WRITE attributes to READ attributes array
push(@readAttributes, @readWriteAttributes);

# set policies for READ attributes for SPREGAPPLICATION
foreach my $attrName (@readAttributes) {
        my $attrId = $dbh->selectrow_array($stGetAttributeId, {}, $attrName);

        # If attribute does not exist on given instance, skip it
        unless ($attrId) {
            next;
        }

        my $nextCollectionId = $dbh->selectrow_array('select nextval(\'attribute_policy_collections_id_seq\')');
        my $nextPolicyId = $dbh->selectrow_array('select nextval(\'attribute_policies_id_seq\')');
        $sthNewCollection->execute($nextCollectionId, $attrId, "READ");           #(id, attr_id, action)
        $sthNewPolicy->execute($nextPolicyId, $roleId, $nextCollectionId); #(id, role_id, policy_collection_id)
}

$dbh->commit() or die $dbh->errstr;

print "INFO: Spregapplication role successfully set.\n";
print "===================================================\n";
$dbh->disconnect() or die $dbh->errstr;