#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage tableToPrint getSortingFunction);

sub help {
	return qq{
	Lists all required member group attributes. Group, VO and member fields are required. Resource id is optional.
	-----------------------------------------------------------------------
	Available options:.
        --groupId      | -g group id
	--groupName    | -G group name
	--voId         | -v vo id
	--voShortName  | -V vo short name
	--resourceId   | -r resource id
	--memberId     | -m member id
	--orderById    | -i order by attribute id
	--orderByName  | -n order by attribute friendly name
	--batch        | -b batch
	--help         | -h help

	};
}

my ($groupId, $groupName, $voId, $voShortName, $resourceId, $memberId, $sortingFunction, $batch);
GetOptions ("help|h" => sub { print help(); exit 0;}, "batch|b" => \$batch,
		"groupId|g=i" => \$groupId,
		"groupName|G=s" => \$groupName,
		"voId|v=i" => \$voId,
		"voShortName|V=s" => \$voShortName,
		"resourceId|r=i" => \$resourceId,
		"memberId|m=i" => \$memberId,
		"orderById|i" => sub { $sortingFunction = getSortingFunction('getId') },
		"orderByName|n" => sub {$sortingFunction = getSortingFunction("getFriendlyName", 1)
		} ) || die help();

unless(defined $sortingFunction) { $sortingFunction = getSortingFunction("getFriendlyName", 1); }

# Check options
unless (defined($groupId) or ((defined($voShortName) or defined($voId)) and defined($groupName))) {die "ERROR: groupId or groupName and voId or voShortName is required.\n";}
unless (defined($memberId)) { die "ERROR: memberId is required.\n";}

my $agent = Perun::Agent->new();
my $vosAgent = $agent->getVosAgent;
my $groupsAgent = $agent->getGroupsAgent;

unless(defined($groupId)) {
	unless (defined($voId)) {
		my $vo = $vosAgent->getVoByShortName(shortName => $voShortName);
		$voId = $vo->getId;
	}

	my $group = $groupsAgent->getGroupByName(vo => $voId, name => $groupName);
	$groupId = $group->getId;
}

my $attributesAgent = $agent->getAttributesAgent;
my @attributes;
if ($resourceId) {
	@attributes = $attributesAgent->getResourceRequiredAttributes(group => $groupId, member => $memberId, resourceToGetServicesFrom => $resourceId);
} else {
	@attributes = $attributesAgent->getRequiredAttributes(group => $groupId, member => $memberId);
}

unless(@attributes) { printMessage "No required attributes found", $batch;  exit 0; }

my $table = Text::ASCIITable->new();
$table->setCols('attribute Id','attribute friendly name','namespace');

foreach my $attribute (sort $sortingFunction @attributes) {
	$table->addRow($attribute->getId, $attribute->getFriendlyName, $attribute->getNamespace );
}
print tableToPrint($table, $batch);
