#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage tableToPrint getSortingFunction);

sub help {
	return qq{
	Lists all user_facility attributes. User id and facility id or name are required options.
	-----------------------------------------------------------------------
	Available options:
	--facilityId   | -f facility id
	--facilityName | -F facility name
	--userId       | -u user id
	--orderById    | -i order by attribute id
	--orderByName  | -n order by attribute friendly name
	--batch        | -b batch
	--help         | -h help

	};
}

my ($facilityId, $facilityName, $userId, $sortingFunction, $batch);
GetOptions ("help|h" => sub { print help(); exit 0;}, "batch|b" => \$batch,
	"facilityId|f=i" => \$facilityId,
	"facilityName|F=s" => \$facilityName,
	"userId|u=i" => \$userId,
	"orderById|i" => sub { $sortingFunction = getSortingFunction('getId') },
	"orderByName|n" => sub {$sortingFunction = getSortingFunction("getFriendlyName", 1); } ) || die help();

unless(defined $sortingFunction) { $sortingFunction = getSortingFunction("getFriendlyName", 1); }

# Check options
unless (defined($facilityId) or (defined($facilityName))) { die "ERROR: facilityId  or facilityName is required \n";}
unless (defined($userId)) { die "ERROR: userId is required \n";}

my $agent = Perun::Agent->new();
my $facilitiesAgent = $agent->getFacilitiesAgent;

unless($facilityId) {
	my $facility = $facilitiesAgent->getFacilityByName(name => $facilityName);
	$facilityId = $facility->getId;
}

my $attributesAgent = $agent->getAttributesAgent;
my @attributes = $attributesAgent->getAttributes(facility =>$facilityId,user => $userId);

unless(@attributes) { printMessage "No attributes found", $batch;  exit 0; }

my $table = Text::ASCIITable->new({reportErrors => 0, utf8 => 0});
$table->setCols('attribute Id','Name', 'Type', 'Value');

foreach my $attribute (sort $sortingFunction @attributes) {
	$table->addRow($attribute->getId, $attribute->getName, $attribute->getType, $attribute->getValueAsScalar);
}
print tableToPrint($table, $batch);
