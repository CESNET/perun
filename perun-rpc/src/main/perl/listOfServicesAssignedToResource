#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage tableToPrint getSortingFunction);

sub help {
	return qq{
	Prints list of Services assigned to Resource. Resource is required field.
	------------------------------------------------
	Available options:
	--resourceId  | -r  Resource idetifier
	--orderById   | -i  order by numeric ID
	--orderByName | -n  order by name
	--batch       | -b  batch
	--help        | -h  prints this help
	};
}

my ($resourceId, $batch, $sortingFunction);
GetOptions("help|h" => sub { print help; exit 0;} ,
	"resourceId|r=i" => \$resourceId,
"orderById|i" => sub { $sortingFunction = getSortingFunction("getId") } ,
"orderByName|n" =>  sub {$sortingFunction = getSortingFunction("getName", 1) },
"batch|b" => \$batch) || die help;

#options check
unless(defined $sortingFunction) { $sortingFunction = getSortingFunction("getName", 1); }
unless(defined $resourceId) { die "ERROR: resourceId required\n";}

my $agent = Perun::Agent->new();
my $resourcesAgent = $agent->getResourcesAgent;

my @services = $resourcesAgent->getAssignedServices(resource => $resourceId);
unless(@services) { printMessage "No Service found", $batch; exit 0; }

#output
my $table = Text::ASCIITable->new({reportErrors => 0, utf8 => 0});
$table->setCols('ID','Name');

foreach my $service (sort $sortingFunction @services) {
	$table->addRow($service->getId, $service->getName);
}

print tableToPrint($table, $batch);
