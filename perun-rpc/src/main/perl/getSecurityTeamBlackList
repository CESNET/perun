#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage tableToPrint getSortingFunction);

sub help {
	return qq{
	Displayes BlackList of SecurityTeam. SecurityTeam is required field.
	------------------------------------
	Available options:
	--securityTeamId | -s SecurityTeam id
        --orderById      | -i  order by user's identifier
        --orderByName    | -n  order by user's name
	--batch          | -b batch
	--help           | -h prints this help

	};
}

my ($securityTeamId, $batch, $sortingFunction);
GetOptions ("help|h" => sub { print help(); exit 0;} ,"batch|b" => \$batch,
"orderById|i" => sub { $sortingFunction = getSortingFunction("getId") } ,
"orderByName|n" => sub { $sortingFunction = getSortingFunction("getLastName", 1) } ,
"securityTeamId|s=i" => \$securityTeamId || die help());

# Check options
unless (defined($securityTeamId)) {die "ERROR: securityTeamId is required\n";}
unless(defined $sortingFunction) { $sortingFunction = getSortingFunction("getLastName", 1); }

my $agent = Perun::Agent->new();
my $securityTeamsAgent = $agent->getSecurityTeamsAgent;

my $securityTeam=$securityTeamsAgent->getSecurityTeamById('id',$securityTeamId);

my @users = $securityTeamsAgent->getBlacklist(securityTeam => $securityTeamId);
unless (@users) { printMessage "No blacklisted users found", $batch; exit 0; }

#output
my $table = Text::ASCIITable->new({reportErrors => 0, utf8 => 0});
printMessage "\nSecurityTeamId: ".$securityTeamId.", SecurityTeamName: ".$securityTeam->getName, $batch;

$table->setCols('User Id','User Name');
foreach my $user (sort $sortingFunction @users) {
    $table->addRow($user->getId, $user->getCommonName);
}
print tableToPrint($table, $batch);
