#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Perun::Agent;
use Perun::Common qw(printMessage);

sub help {
	return qq{
	Removes a service from service package. Package id or name and service id or name are required fields.
	-----------------------------------------------------
	Available options:
	--packageId   | -p package id
	--packageName | -P package name
	--serviceId   | -s service id
	--serviceName | -S service name
	--batch       | -b batch
	--help        | -h prints this help

	};
}

my ($packageName,$packageId,$serviceName,$serviceId,$batch);
GetOptions ("help|h" => sub { print help(); exit 0;} ,"batch|b" => \$batch,
"packageName|P=s" => \$packageName,
 "packageId|p=i" => \$packageId,
 "serviceName|S=s" => \$serviceName,
 "serviceId|s=i" => \$serviceId) || die help();

# Check options
unless (defined($packageName) or defined($packageId)) { die "ERROR: packageName or packageId is required \n";}
unless (defined($serviceName) or defined($serviceId)) { die "ERROR: serviceName or serviceId is required \n";}

my $agent = Perun::Agent->new();
my $servicesAgent = $agent->getServicesAgent;

unless ($packageId) {
	my $package = $servicesAgent->getServicesPackageByName(name => $packageName);
	$packageId=$package->getId;
}

unless($serviceId) {
	my $service = $servicesAgent->getServiceByName(name => $serviceName);
	$serviceId=$service->getId;
}

$servicesAgent->removeServiceFromServicesPackage(servicesPackage => $packageId, service => $serviceId);

printMessage("Service Id:$serviceId removed from service package: $packageId",$batch);


