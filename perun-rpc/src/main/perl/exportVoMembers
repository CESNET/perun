#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage getSortingFunction tableToPrint);

sub help {
	return qq{
	Prints list of VO members, their stauses and values of selected attributes. VO can be specified by Id or shortName.
	---------------------------------
	Available options:
	--voId         | -v  VO idetifier
	--voShortName  | -V  VO short name
        --attrList     | -a  list of attributes to print *)
        --statuses     | -s  list of allowed statuses   **)
	--orderByName  | -n  order by member's name
	--batch        | -b  batch
	--help         | -h  prints this help

        *) names of attributes are required in short form like
           u:d:organization = urn:perun:user:attribute-def:def:organization,
           m:d:organization = urn:perun:member:attribute-def:def:organization
           u:d:preferredMail = urn:perun:user:attribute-def:def:preferredMail
           ...
           default value -a u:d:preferredMail m:d:organization
        **)if parameter -s is not used the default value is 
           VALID+INVALID+SUSPENDED
           if parameter -s is used but the list of statuses is empty
           ALL statuses are listed
	};
}

our $batch;
my ($voId, $voShortName, $sortingFunction, @attributes, @statuses);
GetOptions("help|h" => sub { print help; exit 0;} ,
"voId|v=i" => \$voId,
"voShortName|V=s" => \$voShortName,
'attrList|a=s@{1,}' => \@attributes,
'statusList|s=s@{0,}' => \@statuses,
"orderByName|n" => sub { $sortingFunction = getSortingFunction("getLastName",1) },
"batch|b" => \$batch) || die help;

my $agent = Perun::Agent->new();
my $groupsAgent = $agent->getGroupsAgent;
my $attributesAgent = $agent->getAttributesAgent;
my $membersAgent = $agent->getMembersAgent;

#options check
unless(defined $sortingFunction) { $sortingFunction = getSortingFunction("getLastName",1); }
unless(defined $voId) {
    unless(defined $voShortName) { die "ERROR: VO specification required.\n"; }
    my $vo = $agent->getVosAgent->getVoByShortName(shortName => $voShortName);
    $voId = $vo->getId;
}

unless (defined $statuses[0]) {
    @statuses=("VALID","INVALID","SUSPENDED");
}
if (defined $statuses[0] and $statuses[0] eq "") {
    @statuses=();
}
foreach my $stat (@statuses) {
    if ($stat ne "VALID" and $stat ne "INVALID" and $stat ne "SUSPENDED" and $stat ne "EXPIRED" and $stat ne "DISABLED") {die "ERROR: wrong status value. \n";}
}

my %attrShort;
my %entities = ("u"=>"user","m"=>"member");
my %types = ("d"=>"def","o"=>"opt","v"=>"virt","c"=>"core");

unless(@attributes) {
    @attributes=("u:d:preferredMail","m:d:organization");
}
foreach my $attr (@attributes) {
    my $attrName="urn:perun:";
    if ($attr =~ /^(\w)\:(\w)\:(\w+)$/) {
        $attrName=$attrName.$entities{$1}.":attribute-def:".$types{$2}.":".$3;
        $attrShort{$attr}=$attrName;
    } else {    
        printMessage "Wrong attribute name:$attr", $batch;
    }
}

my @richMembers = $membersAgent->getCompleteRichMembers(vo => $voId, attrsNames => [values %attrShort], allowedStatuses => \@statuses);
unless(@richMembers) { printMessage "No member found", $batch; exit 0; }

#output
my $table = Text::ASCIITable->new({utf8=>0});
#my $table = Text::ASCIITable->new();

$table->setCols('Name', 'Status', sort keys(%attrShort));

foreach my $richMember (sort $sortingFunction @richMembers) {
        my @uattributes = $richMember->getUserAttributes;
        my @mattributes = $richMember->getMemberAttributes; 
        my @dispAtt;
        
        foreach my $shnam (sort keys (%attrShort)) {
            foreach my $ua (@uattributes) {
                if ($attrShort{$shnam} eq $ua->getName) {
                    push (@dispAtt,$ua->getValue);
                }
            }      
            foreach my $ma (@mattributes) {
                if ($attrShort{$shnam} eq $ma->getName) {
                    push (@dispAtt,$ma->getValue);
                }
            }      
        }
        $table->addRow($richMember->getDisplayName,$richMember->getStatus,@dispAtt);
}

print tableToPrint($table, $batch);

