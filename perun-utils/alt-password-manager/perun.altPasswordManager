#!/usr/bin/perl

######################################################
#
# PASSWORD MANAGER FOR alternative passwords
#
# Usage: ./perun.altPasswordManager [create|delete] [altLoginNamespace] [userId] [passwordId]
#
# Error codes: see perun.passwordManager
#
#####################################################

use strict;
use warnings;
use Switch;
use Net::LDAPS;
use Net::LDAP::Entry;
use Net::LDAP::Message;
use Net::LDAP::LDIF;
use Data::Dumper;

sub ldap_connect;
sub ldap_disconnect;
sub ldap_search;
sub ldap_log;
sub check_user;

# location of configuration files
my $config_dir = "/etc/perun";

# location of log file
my $log_file = "/var/log/perun/apwd.log";

# ldap instance holder
my $ldap = undef;

# base DN
my $base_dn = undef;

##########
#
# RUN SCRIPT ITSELF
#
##########

# read input parameters
my $action = $ARGV[0];
my $namespace = $ARGV[1];
my $login = $ARGV[2];
my $password_id = $ARGV[3];
my $password = undef;

# do stuff based on password manager action type
switch ($action){

	case("create"){

		$password = <STDIN>;
		ldap_connect( $namespace );

		# Check if the user has an entry in LDAP
		check_user($login);

		my $entry = Net::LDAP::Entry->new;
		$entry->dn("dc=" . $password_id . ",uid=" . $login . "," .  $base_dn );
		$entry->add(
			objectClass => ["top", "appPassword"] ,
			serviceGroupRDN => "cn=Default" ,
			altUserPassword => "$password",
			description => "$password_id"
		);

		my $mesg;
		eval {
			$mesg = $ldap->add( $entry );
		};
		if ( $@ ) {

			# error adding entry
			ldap_log("[APWDM] Creation of password id $password_id for $login failed with LDAP return code: ".$@);
			ldap_disconnect();
			exit 4; # creation of new password failed
		} else {
			ldap_disconnect();
			my $code = $mesg->code;
			if ($code != 0) {
				ldap_log("[APWDM] Creation of password id $password_id for $login failed with LDAP return code: ".$code);
				exit 4 # creation of new password failed
			}

			# entry added
			ldap_log("[APWDM] Password id $password_id for $login created.");
		}

	}

	case("delete"){

		ldap_connect( $namespace );
		my $mesg;
		eval {
			$mesg = $ldap->delete( "dc=" . $password_id . ",uid=" . $login . "," .  $base_dn );
		};
		if ( $@ ) {
			ldap_log("[APWDM] Password id $password_id deletion for $login failed with LDAP return code: " . $@);
			ldap_disconnect();
			exit 5; # can't delete password
		} else {
			ldap_disconnect();
			my $code = $mesg->code;
			if($code != 0) {
				ldap_log("[APWDM] Password id $password_id deletion for $login failed with LDAP return code: ".$code);
				exit 5 # can't delete password
			}
			ldap_log("[APWDM] Password id $password_id for $login deleted.");
		}

	}
	#case("search"){
	#  ldap_connect( $namespace );
	#  ldap_search( $login );
	#  ldap_disconnect();
	#}
	case("noop") {
		print "noop";
	}

	else {
		ldap_log("[APWDM] Unknown action " . $action . " for handling passwords.");
		exit 10;
	}

}

###########################################
#
# Auxiliary functions used by main script
#
###########################################

#
# Connects to LDAP
#
# @param login-namespace for loading config data
#
sub ldap_connect{

	my $namespace = shift;

	# check if config file for namespace exists
	my $filename = $config_dir . "/alt.pwchange.".$namespace.".ldap";
	unless (-e $filename) {
		ldap_log("[APWDM] Configuration file for namespace \"" . $namespace . "\" doesn't exist!");
		exit 2; # login-namespace is not supported
	}

	# load configuration file
	open FILE, "<" . $filename;
	my @lines = <FILE>;

	# remove new-line characters from the end of lines
	chomp @lines;

	# read configuration
	my $ldap_location = $lines[0];
	my $ldap_user = $lines[1];
	my $ldap_pass = $lines[2];
	$base_dn = $lines[3];

	# LDAP connect
	$ldap = Net::LDAPS->new( "$ldap_location" , onerror => 'die' , timeout => 5 , debug => 0, verify => 'none', port => 636);

	# Check if there is https connection
#	if ($ldap_location =~ /^ldaps/) {
#		$ldap->start_tls(verify => 'none',
#				 cafile => '/etc/apache2/ssl/tcs_chain.pem');
#	}

	# LDAP log-in
	if ($ldap) {
		my $mesg = $ldap->bind( "$ldap_user" , password => "$ldap_pass" );
		ldap_log("[LDAP] connected as: $ldap_user");
	} else {
		print $@;
		ldap_log("[LDAP] can't connect to LDAP.");
		exit 1;
	}

}

#
# Disconnect from LDAP if connected
#
sub ldap_disconnect(){
	if ($ldap) {
		my $mesg = $ldap->unbind;
		ldap_log("[LDAP] disconnected.");
	} else {
		ldap_log("[LDAP] can't disconnect from LDAP (connection not exists).");
	}
}

#
# Search used only for debugging purposes
#
sub ldap_search {
	my $login = shift;

	my $mesg = $ldap->search( base => $base_dn ,
		scope => 'sub' ,
		filter => "(uid=$login)" ,
		);

#	print "\n[LDAP] Search return code: " . $mesg->code;
	my @size = $mesg->entries;
	return ~~@size;
#	print "\n[LDAP] Found entries: " . ~~@size;
#	Net::LDAP::LDIF->new( \*STDOUT, "w" )->write( $mesg->entries );
}

#
# Log any message to pwdm.log file located in same folder as script.
#
# Each message starts at new line.
#
sub ldap_log {

	my $message = (@_)[0];
	open(LOGFILE, ">>" . $log_file);
	print LOGFILE ($message . "\n");
	close(LOGFILE);

}

#
# Checks if the user has an entry in LDAP. Return 1 if user is OK
#
sub check_user {
	my $login = shift;

	my $res = ldap_search($login);

	if ($res == 0) {
		# User doesn't exist so create an entry

		#		dn: uid=novak,ou=People,dc=perun-test,dc=einfra,dc=cz
		#uid: novak
		#givenName: Jan
		#objectClass: top
		#objectClass: person
		#objectClass: organizationalPerson
		#objectClass: inetorgperson
		#sn: Novak
		#cn: Jan Novak 

		my $entry = Net::LDAP::Entry->new;
		$entry->dn("uid=" . $login . "," . $base_dn );
		$entry->add(
				objectClass => ["top", "inetUser", "inetOrgPerson"] ,
#TODO			inetUserStatus => "inactive" ,
				cn => $login ,
				sn => $login
			   );

		my $mesg;
		eval {
			$mesg = $ldap->add( $entry );
		};
		if ( $@ ) {

			# error adding entry
			ldap_log("[APWDM] Creation of user entry fro $login failed with LDAP return code: ".$@);
			ldap_disconnect();
			exit 7; # creation of user entry failed
		} else {
			ldap_disconnect();
			my $code = $mesg->code;
			if ($code != 0) {
				ldap_log("[APWDM] Creation of user entry for $login failed with LDAP return code: ".$code);
				exit 7 # creation of user entry failed
			}

			# entry added
			ldap_log("[APWDM] Entry for user $login created.");
			return 1;
		}
	} elsif ($res > 1) {
		# Something is wrong, there are more than one entry for one user
		ldap_log("[APWDM] Creation of user entry for $login failed with LDAP return code: ".$@);
                ldap_disconnect();
                exit 7; # creation of user entry failed
	}
	return $res;
}
