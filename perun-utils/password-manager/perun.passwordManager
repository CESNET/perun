#!/bin/bash
# Program which manages user's passwords
#
# Usage: perun.passwordManager [change|check|reserve|validate|delete] loginNamespace userLogin
#
# Password comes from the STDIN
#
# If password check fails then return 1
# If there is no handler for loginNamespace return 2
# If setting the new password failed return 3
# If creation of the new password failed return 4
# If deletion of the password failed return 5
# If user login doesn't exists return 6
# Problem with creating user entry return 7
# Operation is not known - return 10

LOGINNAMESPACE=$2
USERLOGIN=$3

PATH=$PATH:/usr/sbin

# Below is an example for managing Kerberos KDC for login-namespace called einfra.

# Check if the password is OK
function check() {
	case $TYPE in
	KERBEROS)
		TMP_FILE=/tmp/perun.passwd.check
		# Check old password
		echo -n "$PASSWORD" | kinit -c ${TMP_FILE} --password-file=STDIN ${USERLOGIN}@${REALM}
		if [ $? -ne 0 ]; then
			logger "Perun-PasswordChange: old password doesn't match for $LOGINNAMESPACE:$USERLOGIN"
			rm -f ${TMP_FILE}
			exit 1
		fi
		rm -f ${TMP_FILE}
		;;
	esac
}

# Change the password
function change() {
	case $TYPE in
	KERBEROS)
		# Change password in EINFRA
		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM passwd --password="${PASSWORD}" ${USERLOGIN}@${REALM} 2>&1`
		if [ $? -ne 0 ]; then
			logger "Perun-PasswordChange: setting new password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 3
		fi

		# Set password expiration to never - this can be useful when the principal has been suspended for password leakage
		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="never" ${USERLOGIN}@${REALM} 2>&1`
		if [ $? -ne 0 ]; then
			logger "Perun-PasswordChange: setting expiration time to never for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		logger "Perun-PasswordChange: changing password for $LOGINNAMESPACE:$USERLOGIN in $REALM was successful"
		;;
	esac
}

# Do only login reservation in the authentication system, login can be used for authentication. Password will be validated after the application form will be approved.
function reserve() {
	case $TYPE in
	KERBEROS)
		# Check if the principal already exists, if yes, just remove it and create a new one = self-repair
		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM get ${USERLOGIN}@${REALM} 2>/dev/null`
		if [ "$RET" ]; then
			RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM del ${USERLOGIN}@${REALM} 2>&1`
			if [ $? -ne 0 ]; then
				logger "Perun-PasswordReserve: removing old entry $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordReserve: WARNING old entry $LOGINNAMESPACE:$USERLOGIN in $REALM which shouldn't be there was removed."
		fi

		# If empty password was supplied then set random one
		if [ -z "${PASSWORD}" ]; then
			logger "Perun-PasswordReserve: empty password provided for $LOGINNAMESPACE:$USERLOGIN in $REALM."
			exit 4
		else
			RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM add --password="${PASSWORD}" --use-defaults ${USERLOGIN}@${REALM} 2>&1`
		fi

		if [ $? -ne 0 ]; then
			logger "Perun-PasswordReserve: setting new password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		# Set expiration to 1.1.1970
		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="1970-01-01" ${USERLOGIN}@${REALM} 2>&1`
		if [ $? -ne 0 ]; then
			logger "Perun-PasswordReserve: setting expiration time to 1.1.1970 for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi
		logger "Perun-PasswordReserve: successfuly reserved login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	esac
}

# Do the reservation of the login, but set random password. Usually used for service users.
function reserve_random() {
	case $TYPE in
	KERBEROS)
		 # Check if the principal already exists, if yes, just remove it and create a new one = self-repair
		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM get ${USERLOGIN}@${REALM} 2>/dev/null`
		if [ "$RET" ]; then
			RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM del ${USERLOGIN}@${REALM} 2>&1`
			if [ $? -ne 0 ]; then
				logger "Perun-PasswordReserveRandom: removing old entry $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordReserveRandom: WARNING old entry $LOGINNAMESPACE:$USERLOGIN in $REALM which shouldn't be there was removed."
		fi

		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM add -r --use-defaults ${USERLOGIN}@${REALM} 2>&1`

		if [ $? -ne 0 ]; then
			logger "Perun-PasswordReserveRandom: setting new random password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		# Set expiration to 1.1.1970
		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="1970-01-01" ${USERLOGIN}@${REALM} 2>&1`
		if [ $? -ne 0 ]; then
			logger "Perun-PasswordReserveRandom: setting expiration time to 1.1.1970 for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi
		logger "Perun-PasswordReserveRandom: successfuly reserved login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	esac
}

# Enable reserved password.
function validate() {
	case $TYPE in
	KERBEROS)
		RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="never" ${USERLOGIN}@${REALM} 2>&1`
		if [ $? -ne 0 ]; then
			logger "Perun-PasswordCreate: setting expiration time to never for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi
		logger "Perun-PasswordValidate: successfuly validated login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	esac
}

# Remove entry from the authentication system
function delete() {
       	case $TYPE in
	KERBEROS)
	 	RET=`kadmin --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM del ${USERLOGIN}@${REALM} 2>&1`
		if [ $? -ne 0 ]; then
			logger "Perun-PasswordDelete: removing the password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 5
		fi
		logger "Perun-PasswordDelete: successfuly deleted login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	esac
}

# Setup environement for each login namespace.
case $LOGINNAMESPACE in
        einfra)
		TYPE=KERBEROS
                REALM=EINFRA
                KEYTAB=/pathtokeytab
                ADMINPRINCIPAL=pwchange/principal
                ;;
         *)
                logger "Perun-PasswordChange: there is no handler for $LOGINNAMESPACE (user: $USERLOGIN)"
                exit 0
        ;;
esac

# Do the action
case $1 in
        change)
		# Read password
		read -r PASSWORD

                change
                ;;
        check)
		# Read password
		read -r PASSWORD

                check
                ;;
	delete)
		delete
		;;
	reserve)
		# Read password
		read -r PASSWORD

		reserve
		;;
       	reserve_random)
		reserve_random
		;;
	validate)
		validate
		;;
 	*)
                exit 10
                ;;
esac

exit 0
