#!/bin/bash
# Program which manages user's passwords
#
# Usage: perun.passwordManager [change|check|reserve|validate|delete] loginNamespace userLogin
#
# Password comes from the STDIN
#
# If password check fails then return 1
# If there is no handler for loginNamespace return 2
# If setting the new password failed return 3
# If creation of the new password failed return 4
# If deletion of the password failed return 5
# If user login doesn't exists return 6
# Problem with creating user entry return 7
# Operation is not known - return 10

LOGINNAMESPACE=$2
USERLOGIN=$3

PATH=$PATH:/usr/sbin

TIMEOUT="15" # wait 15 sec for callback to KDC
TIMEOUT_KILL="15" # kill process after additional 15 sec, resultin in 30s real timeout

# Below is an example for managing Kerberos KDC for login-namespace called einfra.

# Check if the password is OK

function check() {
	case $TYPE in
	KERBEROS_HEIMDAL|KERBEROS_MIT)
		TMP_FILE=/tmp/perun.passwd.check
		# Check old password
		echo -n "$PASSWORD" | timeout -k $TIMEOUT_KILL $TIMEOUT kinit -c ${TMP_FILE} --password-file=STDIN ${USERLOGIN}@${REALM}
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordChange: password check timed out for $LOGINNAMESPACE:$USERLOGIN (Warning: this error can mask original error 124 from KDC!)"
			rm -f ${TMP_FILE}
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordChange: old password doesn't match for $LOGINNAMESPACE:$USERLOGIN"
			rm -f ${TMP_FILE}
			exit 1
		fi
		rm -f ${TMP_FILE}
		;;
	esac
}

# Change the password

function change() {
	case $TYPE in
	KERBEROS_HEIMDAL)
		# Change password
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM passwd --password="${PASSWORD}" ${USERLOGIN}@${REALM} 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordChange: setting new password timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordChange: setting new password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 3
		fi

		# Set password expiration to never - for sure:-)
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="never" --pw-expiration-time="never" ${USERLOGIN}@${REALM} 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordChange: setting expiration time to never timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordChange: setting expiration time to never for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		logger "Perun-PasswordChange: changing password for $LOGINNAMESPACE:$USERLOGIN in $REALM was successful"
		;;
	KERBEROS_MIT)
		# Change password
		RET=$(printf "cpw -pw \"%s\" %s\n" "${PASSWORD}" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordChange: setting new password timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordChange: setting new password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 3
		fi

		# Set principal expiration to never - this can be useful when the principal has been suspended for password leakage
		RET=$(printf "modprinc -expire never %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordChange: setting expiration time to never timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordChange: setting expiration time to never for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		logger "Perun-PasswordChange: changing password for $LOGINNAMESPACE:$USERLOGIN in $REALM was successful"
		;;
	esac
}

# Do only login reservation in the authentication system, login can be used for authentication. Password will be validated after the application form will be approved.

function reserve() {
	case $TYPE in
	KERBEROS_HEIMDAL)
		# Check if the principal already exists, if yes, just remove it and create a new one = self-repair
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM get ${USERLOGIN}@${REALM} 2>/dev/null)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserve: check for existence timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ "$RET" ]; then
			RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM del ${USERLOGIN}@${REALM} 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordReserve: removing old entry timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
			if [ $RET_CODE -ne 0 ]; then
				logger "Perun-PasswordReserve: removing old entry $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordReserve: WARNING old entry $LOGINNAMESPACE:$USERLOGIN in $REALM which shouldn't be there was removed."
		fi

		# If empty password was supplied then set random one
		if [ ${#PASSWORD} -lt 8 ]; then
			logger "Perun-PasswordReserve: password shorter than 8 characters provided for $LOGINNAMESPACE:$USERLOGIN in $REALM."
			exit 4
		else
			RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM add --password="${PASSWORD}" --use-defaults ${USERLOGIN}@${REALM} 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordReserve: setting new password timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
		fi

		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserve: setting new password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		# Set expiration to 1.1.1970
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="1970-01-01" ${USERLOGIN}@${REALM} 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserve: setting expiration time to 1.1.1970 timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserve: setting expiration time to 1.1.1970 for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi
		logger "Perun-PasswordReserve: successfully reserved login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	KERBEROS_MIT)
		# Check if the principal already exists, if yes, just remove it and create a new one = self-repair
		RET=$(printf "getprinc %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>/dev/null)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserve: check for existence timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ "$RET" ]; then
			RET=$(printf "delprinc -force %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordReserve: removing old entry timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
			if [ $RET_CODE -ne 0 ]; then
				logger "Perun-PasswordReserve: removing old entry $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordReserve: WARNING old entry $LOGINNAMESPACE:$USERLOGIN in $REALM which shouldn't be there was removed."
		fi

		# If empty password was supplied then exit with error and require calling reserve_random()
		if [ ${#PASSWORD} -lt 8 ]; then
			logger "Perun-PasswordReserve: password shorter than 8 characters provided for $LOGINNAMESPACE:$USERLOGIN in $REALM."
			exit 4
		else
			RET=$(printf "addprinc -pw \"%s\" %s\n" "${PASSWORD}" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordReserve: setting new password for timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
		fi

		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserve: setting new password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		# Set expiration to 1.1.1970
		RET=$(printf "modprinc -expire \"01/01/1970 00:00:01 UTC\" %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserve: setting expiration time to 1.1.1970 timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserve: setting expiration time to 1.1.1970 for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi
		logger "Perun-PasswordReserve: successfully reserved login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	esac
}

# Do the reservation of the login, but set random password. Usually used for service users.

function reserve_random() {
	case $TYPE in
	KERBEROS_HEIMDAL)
		 # Check if the principal already exists, if yes, just remove it and create a new one = self-repair
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM get ${USERLOGIN}@${REALM} 2>/dev/null)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserveRandom: check for existence timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ "$RET" ]; then
			RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM del ${USERLOGIN}@${REALM} 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordReserveRandom: removing old entry timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
			if [ $RET_CODE -ne 0 ]; then
				logger "Perun-PasswordReserveRandom: removing old entry $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordReserveRandom: WARNING old entry $LOGINNAMESPACE:$USERLOGIN in $REALM which shouldn't be there was removed."
		fi

		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM add -r --use-defaults ${USERLOGIN}@${REALM} 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserveRandom: setting new random password timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserveRandom: setting new random password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		# Set expiration to 1.1.1970
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="1970-01-01" ${USERLOGIN}@${REALM} 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserveRandom: setting expiration time to 1.1.1970 timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserveRandom: setting expiration time to 1.1.1970 for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi
		logger "Perun-PasswordReserveRandom: successfully reserved login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	KERBEROS_MIT)
		 # Check if the principal already exists, if yes, just remove it and create a new one = self-repair
		RET=$(printf "getprinc %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>/dev/null)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserveRandom: check for existence timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ "$RET" ]; then
			RET=$(printf "delprinc -force %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordReserveRandom: removing old entry timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
			if [ $RET_CODE -ne 0 ]; then
				logger "Perun-PasswordReserveRandom: removing old entry $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordReserveRandom: WARNING old entry $LOGINNAMESPACE:$USERLOGIN in $REALM which shouldn't be there was removed."
		fi

		RET=$(printf "addprinc -randkey %s\n" "${PASSWORD}" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserveRandom: setting new random password timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserveRandom: setting new random password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi

		# Set expiration to 1.1.1970
		RET=$(printf "modprinc -expire \"01/01/1970 00:00:01 UTC\" %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordReserveRandom: setting expiration time to 1.1.1970 timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordReserveRandom: setting expiration time to 1.1.1970 for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 4
		fi
		logger "Perun-PasswordReserveRandom: successfully reserved login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	esac
}

# Enable reserved password.

function validate() {
	case $TYPE in
	KERBEROS_HEIMDAL)
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM get ${USERLOGIN}@${REALM} 2>/dev/null)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordValidate: check for existence timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		# if RET was not empty, then entry exist
		if [ "$RET" ]; then
			RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM modify --expiration-time="never" ${USERLOGIN}@${REALM} 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordValidate: setting expiration time to never timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
			if [ $RET_CODE -ne 0 ]; then
				logger "Perun-PasswordValidate: setting expiration time to never for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordValidate: successfully validated login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		else
			# RET was empty, silently skipping
			logger "Perun-PasswordValidate: doing nothing because entry $LOGINNAMESPACE:$USERLOGIN in $REALM doesn't exist."
		fi
		;;
	KERBEROS_MIT)
		RET=$(printf "getprinc %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>/dev/null)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordValidate: check for existence timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		# if RET was not empty, then entry exist
		if [ "$RET" ]; then
			RET=$(printf "modprinc -expire never %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
			RET_CODE=$?
			if [ $RET_CODE -eq 124 ]; then
				logger "Perun-PasswordValidate: setting expiration time to never timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
				exit $RET_CODE
			fi
			if [ $RET_CODE -ne 0 ]; then
				logger "Perun-PasswordValidate: setting expiration time to never for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
				exit 4
			fi
			logger "Perun-PasswordValidate: successfully validated login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		else
			# RET was empty, silently skipping
			logger "Perun-PasswordValidate: doing nothing because entry $LOGINNAMESPACE:$USERLOGIN in $REALM doesn't exist."
		fi
		;;
	esac
}

# Remove entry from the authentication system

function delete() {
	case $TYPE in
	KERBEROS_HEIMDAL)
		RET=$(timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.heimdal --principal=$ADMINPRINCIPAL --keytab=$KEYTAB --realm=$REALM del ${USERLOGIN}@${REALM} 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordDelete: removing the password timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordDelete: removing the password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 5
		fi
		logger "Perun-PasswordDelete: successfully deleted login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	KERBEROS_MIT)
		RET=$(printf "delprinc -force %s\n" "${USERLOGIN}@${REALM}" | timeout -k $TIMEOUT_KILL $TIMEOUT /usr/bin/kadmin.mit -p $ADMINPRINCIPAL -k -t $KEYTAB -r $REALM 2>&1)
		RET_CODE=$?
		if [ $RET_CODE -eq 124 ]; then
			logger "Perun-PasswordDelete: removing the password timed out for $LOGINNAMESPACE:$USERLOGIN in $REALM (Warning: this error can mask original error 124 from KDC!, reason: $RET.)"
			exit $RET_CODE
		fi
		if [ $RET_CODE -ne 0 ]; then
			logger "Perun-PasswordDelete: removing the password for $LOGINNAMESPACE:$USERLOGIN in $REALM failed, reason: $RET."
			exit 5
		fi
		logger "Perun-PasswordDelete: successfully deleted login for $LOGINNAMESPACE:$USERLOGIN in $REALM."
		;;
	esac
}

# Setup environment for each login namespace.

case $LOGINNAMESPACE in
	namespace1)
		TYPE=KERBEROS_HEIMDAL
		REALM=REALM1
		KEYTAB=/pathtokeytab
		ADMINPRINCIPAL=pwchange/principal
		;;
	namespace2)
		TYPE=KERBEROS_MIT
		REALM=REALM2
		KEYTAB=/pathtokeytab
		ADMINPRINCIPAL=pwchange/principal@REALM2
		;;
	*)
		logger "Perun-PasswordChange: there is no handler for $LOGINNAMESPACE (user: $USERLOGIN)"
		exit 0
		;;
esac

# Do the action
case $1 in
	change)
		# Read password
		read -r PASSWORD
		change
		;;
	check)
		# Read password
		read -r PASSWORD
		check
		;;
	delete)
		delete
		;;
	reserve)
		# Read password
		read -r PASSWORD
		reserve
		;;
	reserve_random)
		reserve_random
		;;
	validate)
		validate
		;;
	*)
		exit 10
		;;
esac

exit 0
