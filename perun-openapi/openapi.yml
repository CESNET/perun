openapi: 3.0.2
info:
  version: 3.10.0
  title: Perun RPC API
  description: Perun Remote Procedure Calls Application Programming Interface
  contact:
    url: https://perun-aai.org
    email: perun@cesnet.cz

servers:
  - url: 'https://{server}/{authentication}/rpc'
    description: Perun RPC server
    variables:
      server:
        default: perun.cesnet.cz
        description: DNS name of a Perun server
      authentication:
        default: krb
        description: way of authentication
        enum:
          - krb
          - cert
          - oidc
          - fed

security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []

components:
  #############################################
  #                                           #
  # SECURITY SCHEMES - ways of authentication #
  #                                           #
  #############################################
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://login.cesnet.cz/oidc/.well-known/openid-configuration

  #############################################
  #                                           #
  # SCHEMAS - data objects definitions        #
  #                                           #
  #############################################
  schemas:
    PerunException:
      type: object
      properties:
        errorId: { type: string }
        name: { type: string }
        message: { type: string }

    PerunBean:
      type: object
      properties:
        id: { type: integer }
        beanName: { type: string }
      required:
        - id
        - beanName
      discriminator:
        propertyName: beanName

    Auditable:
      allOf:
        - $ref: '#/components/schemas/PerunBean'
        - properties:
            createdAt: { type: string }
            createdBy: { type: string }
            modifiedAt: { type: string }
            modifiedBy: { type: string }
            createdByUid: { type: integer }
            modifiedByUid: { type: integer }
      discriminator:
        propertyName: beanName

    User:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            firstName: { type: string }
            lastName: { type: string }
            middleName: { type: string }
            titleBefore: { type: string }
            titleAfter: { type: string }
            serviceUser: { type: boolean }
            sponsoredUser: { type: boolean }
            specificUser: { type: boolean }
            majorSpecificType:  { type: string }
      discriminator:
        propertyName: beanName

    RichUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            userExtSources: { type: array, items: { $ref: '#/components/schemas/UserExtSource' } }
            userAttributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
          required:
            - userExtSources
            - userAttributes
      discriminator:
        propertyName: beanName

    Member:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            userId: { type: integer }
            voId: { type: integer }
            status: { type: string }
            membershipType: { type: string }
            sourceGroupId: { type: integer }
            sponsored: { type: boolean }
            suspendedTo: { type: string }
            suspended: { type: boolean }
            groupStatus:  { type: string }
            groupStatuses:
              type: object
              additionalProperties:
                type: string
      discriminator:
        propertyName: beanName

    RichMember:
      allOf:
        - $ref: '#/components/schemas/Member'
        - properties:
            user: { $ref: '#/components/schemas/User' }
            userExtSources: { type: array, items: { $ref: '#/components/schemas/UserExtSource' } }
            userAttributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
            memberAttributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
          required:
            - user
            - userExtSources
      discriminator:
        propertyName: beanName

    UserExtSource:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            login: { type: string }
            userId: { type: integer }
            loa: { type: integer }
            persistent: { type: boolean }
            lastAccess: { type: string, format: timestamp, description: 'SQL timestamp', example: '2012-01-01 00:00:00.100000' }
            extSource: { $ref: '#/components/schemas/ExtSource' }
          required:
            - login
            - extSource
      discriminator:
        propertyName: beanName

    ExtSource:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            type: { type: string }
      discriminator:
        propertyName: beanName

    AttributeDefinition:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            friendlyName: { type: string }
            namespace: { type: string }
            description: { type: string }
            type: { type: string }
            displayName: { type: string }
            writable: { type: boolean }
            unique: { type: boolean }
            entity:
              type: string
              readOnly: true
      discriminator:
        propertyName: beanName

    Attribute:
      allOf:
        - $ref: '#/components/schemas/AttributeDefinition'
        - properties:
            valueCreatedAt: { type: string }
            valueCreatedBy: { type: string }
            valueModifiedAt: { type: string }
            valueModifiedBy: { type: string }
            value: { type: object }
      discriminator:
        propertyName: beanName

    AuditEvent:
      type: object
      properties:
        name: { type: string }
        message: { type: string }

    AuditMessage:
      type: object
      properties:
        event: { $ref: '#/components/schemas/AuditEvent'}
        id: { type: integer }
        actor: { type: string }
        createdAt: { type: string }
        createdByUid: { type: integer }

    ActionType:
      type: string
      description: "Action types for attributes."
      enum:
        - "WRITE"
        - "WRITE_VO"
        - "WRITE_PUBLIC"
        - "READ"
        - "READ_VO"
        - "READ_PUBLIC"

    AttributeRights:
      type: object
      required:
        - attributeId
        - rights
        - role
      properties:
        attributeId: { type: integer }
        role: { type: string }
        rights:
          type: array
          items:
            $ref: '#/components/schemas/ActionType'

    Facility:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            description: { type: string }
      discriminator:
        propertyName: beanName

    RichFacility:
      allOf:
        - $ref: '#/components/schemas/Facility'
        - properties:
            facilityOwners: { type: array, items: { $ref: '#/components/schemas/Owner' } }
          required:
            - facilityOwners
      discriminator:
        propertyName: beanName

    Host:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            hostname: { type: string }
      discriminator:
        propertyName: beanName

    Owner:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            contact: { type: string }
            type:
              type: string
              enum: [ technical, administrative ]
      discriminator:
        propertyName: beanName

    Group:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            shortName: { type: string }
            description: { type: string }
            voId: { type: integer }
            parentGroupId: { type: integer }
      discriminator:
        propertyName: beanName

    RichGroup:
      allOf:
        - $ref: '#/components/schemas/Group'
        - properties:
            attributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
      discriminator:
        propertyName: beanName

    Resource:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            description: { type: string }
            voId: { type: integer }
            facilityId: { type: integer }
      discriminator:
        propertyName: beanName

    RichResource:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - properties:
            vo: { $ref: '#/components/schemas/Vo' }
            facility: { $ref: '#/components/schemas/Facility' }
            resourceTags: { type: array, items: { $ref: '#/components/schemas/ResourceTag' } }
      discriminator:
        propertyName: beanName

    ResourceTag:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            tagName: { type: string }
            voId: { type: integer }
      discriminator:
        propertyName: beanName

    Vo:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            shortName: { type: string }
      discriminator:
        propertyName: beanName

    VoAdminRoles:
      type: string
      description: 'admin roles for a Vo'
      enum:
        - "VOOBSERVER"
        - "TOPGROUPCREATOR"
        - "VOADMIN"

    VoMemberStatuses:
      type: string
      description: 'statuses of a member in a Vo'
      enum:
        - VALID
        - INVALID
        - SUSPENDED
        - EXPIRED
        - DISABLED

    Service:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            description: { type: string }
            delay: { type: integer }
            recurrence: { type: integer }
            enabled: { type: boolean }
            script: { type: string }
      discriminator:
        propertyName: beanName

    DestinationType:
      type: string
      description: 'type of destination, i.e. way of delivery of service settings'
      enum:
        - "host"
        - "email"
        - "semail"
        - "url"
        - "user@host"
        - "user@host:port"
        - "service-specific"
        - "user@host-windows"
        - "host-windows-proxy"

    DestinationPropagationType:
      type: string
      description: 'type of propagation of service settings to a destination'
      enum: ['PARALLEL', 'SERIAL', 'DUMMY' ]

    Destination:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            destination: { type: string }
            type: { $ref: '#/components/schemas/DestinationType' }
            propagationType: { $ref: '#/components/schemas/DestinationPropagationType' }
      discriminator:
        propertyName: beanName

    RichDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - properties:
            service: { $ref: '#/components/schemas/Service' }
            facility: { $ref: '#/components/schemas/Facility' }
      discriminator:
        propertyName: beanName

    ApplicationForm:
      type: object
      properties:
        id: { type: integer }
        vo: { $ref: '#/components/schemas/Vo' }
        group: { $ref: '#/components/schemas/Group' }
        automaticApproval: { type: boolean }
        automaticApprovalExtension: { type: boolean }
        moduleClassName: {type: string }

    Type:
      type: string
      description: 'type of application form items'
      enum:
        - HTML_COMMENT
        - SUBMIT_BUTTON
        - AUTO_SUBMIT_BUTTON
        - FROM_FEDERATION_SHOW
        - FROM_FEDERATION_HIDDEN
        - PASSWORD
        - VALIDATED_EMAIL
        - TEXTFIELD
        - TEXTAREA
        - CHECKBOX
        - RADIO
        - SELECTIONBOX
        - COMBOBOX
        - USERNAME
        - HEADING
        - TIMEZONE

    ItemTexts:
      type: object
      properties:
        locale: { type: string }
        label: { type: string }
        options: { type: string }
        help: { type: string }
        errorMessage: { type: string }

    ApplicationFormItem:
      type: object
      properties:
        id: { type: integer }
        shortname: { type: string }
        required: { type: boolean }
        type: { $ref: '#/components/schemas/Type' }
        federationAttribute: { type: string }
        perunSourceAttribute: { type: string }
        perunDestinationAttribute: { type: string }
        regex: { type: string }
        applicationTypes:
          type: array
          items:
            $ref: '#/components/schemas/AppType'
        ordnum: { type: integer }
        i18n:
          type: object
          additionalProperties: { $ref: '#/components/schemas/ItemTexts' }

    ApplicationFormItemData:
      type: object
      properties:
        id: { type: integer }
        formItem: { $ref: '#/components/schemas/ApplicationFormItem' }
        shortname: { type: string }
        value: { type: string }
        assuranceLevel: { type: string }
        prefilledValue: { type: string }

    AppType:
      type: string
      enum:
        - INITIAL
        - EXTENSION

    AppState:
      type: string
      enum:
        - NEW
        - VERIFIED
        - APPROVED
        - REJECTED

    Application:
      type: object
      properties:
        id: { type: integer }
        vo: { $ref: '#/components/schemas/Vo' }
        group: { $ref: '#/components/schemas/Group' }
        type: { $ref: '#/components/schemas/AppType' }
        fedInfo: { type: string }
        state: { $ref: '#/components/schemas/AppState' }
        extSourceName: { type: string }
        extSourceType: { type: string }
        extSourceLoa: { type: integer }
        user: { $ref: '#/components/schemas/User' }
        createdBy: { type: string }
        createdAt: { type: string }
        modifiedBy: { type: string }
        modifiedAt: { type: string }

    MailType:
      type: string
      enum:
        - APP_CREATED_USER
        - APP_CREATED_VO_ADMIN
        - MAIL_VALIDATION
        - APP_APPROVED_USER
        - APP_REJECTED_USER
        - APP_ERROR_VO_ADMIN
        - USER_INVITE

    PerunPrincipal:
      type: object
      required:
        - userId
        - user
      properties:
        actor: { type: string }
        extSourceName: { type: string }
        extSourceType: { type: string }
        extSourceLoa: { type: integer }
        user: { $ref: "#/components/schemas/User" }
        authzInitialized: { type: boolean }
        additionalInformations:
          type: object
          additionalProperties: { type: string }
        userId: { type: integer }
        # Map<String, Map<String, List<Integer>>>
        roles:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: array
              items:
                type: integer

    ContactGroup:
      type: object
      properties:
        name: { type: string }
        facility: { $ref: '#/components/schemas/Facility' }
        groups: { type: array, items: { $ref: '#/components/schemas/Group' } }
        owners: { type: array, items: { $ref: '#/components/schemas/Owner' } }
        users: { type: array, items: { $ref: '#/components/schemas/RichUser' } }

    SecurityTeam:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            description: { type: string }
      discriminator:
        propertyName: beanName

    Ban:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            validityTo: { type: string }
            description: { type: string }
      discriminator:
        propertyName: beanName

    BanOnResource:
      allOf:
        - $ref: '#/components/schemas/Ban'
        - properties:
            memberId: { type: integer }
            resourceId: { type: integer }
      discriminator:
        propertyName: beanName

    BanOnFacility:
      allOf:
        - $ref: '#/components/schemas/Ban'
        - properties:
            userId: { type: integer }
            facilityId: { type: integer }
      discriminator:
        propertyName: beanName

    RichUserExtSource:
      allOf:
        - properties:
            userExtSource: { $ref: '#/components/schemas/UserExtSource', nullable: false }
            attributes: { type: array, items: { $ref: '#/components/schemas/Attribute' }, nullable: false }
      required:
        - userExtSource
        - attributes
      discriminator:
        propertyName: beanName

    Candidate:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            userExtSource: { $ref: '#/components/schemas/UserExtSource' }
            additionalUserExtSources: { type: array, items: { $ref: '#/components/schemas/UserExtSource' } }
            attributes:
              type: object
              additionalProperties: { type: string }
      discriminator:
        propertyName: beanName

    MemberCandidate:
      type: object
      properties:
        candidate: { $ref: '#/components/schemas/Candidate' }
        member: { $ref: '#/components/schemas/Member' }
        richUser: { $ref: '#/components/schemas/RichUser' }

    ServiceForGUI:
      allOf:
        - $ref: '#/components/schemas/Service'
        - properties:
            allowedOnFacility: { type: boolean }
      discriminator:
        propertyName: beanName

    ServiceAttributes:
      type: object
      properties:
        attributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
        childElements: { type: array, items: { $ref: '#/components/schemas/ServiceAttributes' } }

    ServicesPackage:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            description: { type: string }
            name: { type: string }
      discriminator:
        propertyName: beanName

    TaskStatus:
      type: string
      enum:
        - WAITING
        - PLANNED
        - GENERATING
        - GENERROR
        - GENERATED
        - SENDING
        - DONE
        - SENDERROR
        - ERROR

    Task:
      type: object
      properties:
        id: { type: integer }
        delay: { type: integer }
        recurrence: { type: integer }
        startTime: { type: string }
        sentToEngine: { type: string }
        sendStartTime: { type: string }
        schedule: { type: string }
        genStartTime: { type: string }
        genEndTime: { type: string }
        sendEndTime: { type: string }
        endTime: { type: string }
        service: { $ref: '#/components/schemas/Service' }
        facility: { $ref: '#/components/schemas/Facility' }
        destinations: { type: array, items: { $ref: '#/components/schemas/Destination' } }
        status: { $ref: '#/components/schemas/TaskStatus' }
        sourceUpdated: { type: boolean }
        propagationForced: { type: boolean }

    TaskResultStatus:
      type: string
      enum:
        - DONE
        - ERROR
        - FATAL_ERROR
        - DENIED
        - WARN

    TaskResult:
      allOf:
        - $ref: '#/components/schemas/PerunBean'
        - properties:
            taskId: { type: integer }
            destinationId: { type: integer }
            errorMessage: { type: string }
            standardMessage: { type: string }
            returnCode: { type: integer }
            timestamp: { type: string }
            status: { $ref: '#/components/schemas/TaskResultStatus' }
            destination: { $ref: '#/components/schemas/Destination' }
            service: { $ref: '#/components/schemas/Service' }
      discriminator:
        propertyName: beanName

    FacilityPropagationState:
      type: string
      enum:
        - OK
        - ERROR
        - PROCESSING
        - NOT_DETERMINED

    FacilityState:
      type: object
      properties:
        facility: { $ref: '#/components/schemas/Facility' }
        state: { $ref: '#/components/schemas/FacilityPropagationState' }
        results:
          type: object
          additionalProperties: { $ref: '#/components/schemas/FacilityPropagationState' }

    ResourceState:
      type: object
      properties:
        resource: { $ref: '#/components/schemas/Resource' }
        taskList: { type: array, items: { $ref: '#/components/schemas/Task' } }

    ServiceState:
      type: object
      properties:
        service: { $ref: '#/components/schemas/Service' }
        facility: { $ref: '#/components/schemas/Facility' }
        task: { $ref: '#/components/schemas/Task' }
        isBlockedOnFacility: { type: boolean }
        hasDestinations: { type: boolean }

    MailText:
      type: object
      properties:
        locale: { type: string }
        subject: { type: string }
        text: { type: string }

    ApplicationMail:
      type: object
      properties:
        id: { type: integer }
        appType: { $ref: '#/components/schemas/AppType' }
        formId: { type: integer }
        mailType: { $ref: '#/components/schemas/MailType' }
        send: { type: boolean }
        message:
          type: object
          additionalProperties: { $ref: '#/components/schemas/MailText' }

    #Map<String, Map<String, List<Integer>>>
    AuthzRoles:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: array
          items:
            type: integer

    RTMessage:
      type: object
      properties:
        memberPreferredEmail: { type: string }
        ticketNumber: { type: integer }

  #################################################
  #                                               #
  # RESPONSES - type definitions of return values #
  #                                               #
  #################################################
  responses:
    ExceptionResponse:
      description: exception occured
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PerunException"

    VoidResponse:
      description: "returns nothing"

    IntegerResponse:
      description: "returns Integer"
      content:
        application/json:
          schema:
            type: integer

    LongResponse:
      description: "returns Long"
      content:
        application/json:
          schema:
            type: integer
            format: int64

    BooleanResponse:
      description: "returns Boolean"
      content:
        application/json:
          schema:
            type: boolean

    StringResponse:
      description: "returns String"
      content:
        application/json:
          schema:
            type: string

    ListOfStringsResponse:
      description: "returns List<String>"
      content:
        application/json:
          schema:
            type: array
            items:
              type: string

    MapStringStringResponse:
      description: "returns Map<String,String>"
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
                type: string

    UserResponse:
      description: returns User
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    ListOfUsersResponse:
      description: "returns List<User>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"

    RichUserResponse:
      description: returns RichUser
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichUser"

    ListOfRichUsersResponse:
      description: 'returns List<RichUser>'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichUser"

    MemberResponse:
      description: returns Member
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Member"

    ListOfMembersResponse:
      description: "returns List<Member>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Member"

    ListOfRichMembersResponse:
      description: "returns List<RichMember>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichMember"

    RichMemberResponse:
      description: returns RichMember
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichMember"

    FacilityResponse:
      description: "returns Facility"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Facility"

    ListOfFacilitiesResponse:
      description: "returns List<Facility>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Facility"

    ListOfRichFacilitiesResponse:
      description: "returns List<RichFacility>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichFacility"

    OwnerResponse:
      description: "returns Owner"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Owner"

    ListOfOwnersResponse:
      description: "returns List<Owner>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Owner"

    ListOfAuditMessagesResponse:
      description: "returns List<AuditMessage>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuditMessage"

    AttributeDefinitionResponse:
      description: "returns AttributeDefinition"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeDefinition"

    ListOfAttributeDefinitionsResponse:
      description: "returns List<Attribute>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AttributeDefinition"

    ListOfAttributeRightsResponse:
      description: "returns List<AttributeRights>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AttributeRights"

    AttributeResponse:
      description: "returns Attribute"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attribute"

    ListOfAttributesResponse:
      description: "returns List<Attribute>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Attribute"

    GroupResponse:
      description: "returns Group"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"

    RichGroupResponse:
      description: "returns RichGroup"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichGroup"

    ListOfGroupsResponse:
      description: "returns List<Group>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Group"

    ListOfRichGroupsResponse:
      description: "returns List<RichGroup>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichGroup"

    ResourceResponse:
      description: "returns Resource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Resource"

    ListOfResourcesResponse:
      description: "returns List<Resource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Resource"

    ResourceTagResponse:
      description: "returns ResourceTag"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceTag"

    ListOfResourceTagsResponse:
      description: "returns List<ResourceTag>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResourceTag"

    RichResourceResponse:
      description: "returns RichResource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichResource"

    ListOfRichResourcesResponse:
      description: "returns List<RichResource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichResource"

    VoResponse:
      description: "returns Vo"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Vo"

    ListOfVosResponse:
      description: "returns List<Vo>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Vo"

    ExtSourceResponse:
      description: "returns ExtSource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExtSource"

    ListOfExtSourcesResponse:
      description: "returns List<ExtSource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ExtSource"

    ListOfUserExtSourcesResponse:
      description: "returns List<UserExtSource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserExtSource"

    ListOfRichUserExtSourcesResponse:
      description: "returns List<RichUserExtSource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichUserExtSource"

    ApplicationFormResponse:
      description: "returns ApplicationForm"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApplicationForm"

    ListOfApplicationFormItemsResponse:
      description: "returns List<ApplicationFormItem>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ApplicationFormItem"

    ListOfApplicationFormItemDataResponse:
      description: "returns List<ApplicationFormItemData>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ApplicationFormItemData"

    ApplicationResponse:
      description: "returns Application"
      content:
        application/json:
          schema:
              $ref: "#/components/schemas/Application"

    ListOfApplicationsResponse:
      description: "returns List<Application>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Application"

    ServiceResponse:
      description: "returns Service"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Service"

    ListOfServicesResponse:
      description: "returns List<Service>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Service"

    HostResponse:
      description: "returns Host"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Host"

    ListOfHostsResponse:
      description: "returns List<Host>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Host"

    DestinationResponse:
      description: "returns Destination"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Destination"

    ListOfDestinationsResponse:
      description: "returns List<Destination>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Destination"

    ListOfRichDestinationsResponse:
      description: "returns List<RichDestination>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichDestination"

    GraphDTOResponse:
      description: "returns GraphDTO"
      content:
        application/json:
          schema:
            type: object
            properties:
              graph:
                type: string
              format:
                type: string
                enum: [DOT, TGF]

    BanOnResourceResponse:
      description: "returns banOnResource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BanOnResource"

    ListOfBanOnResourceResponse:
      description: "return List<BanOnResource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BanOnResource"

    ContactGroupResponse:
      description: "returns ContactGroup"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContactGroup"

    ListOfContactGroupResponse:
      description: "returns List<ContactGroup>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ContactGroup"

    ListOfServiceForGUIResponse:
      description: "return List<ServiceForGUI>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ServiceForGUI"


    SecurityTeamResponse:
      description: "returns SecurityTeam"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecurityTeam"

    ListOfSecurityTeamsResponse:
      description: "returns List<SecurityTeam>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SecurityTeam"

    ListOfCandidatesResponse:
      description: "return List<Candidate>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Candidate"

    BanOnFacilityResponse:
      description: "returns banOnFacility"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BanOnFacility"

    ListOfBanOnFacilitiesResponse:
      description: "return List<BanOnFacility>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BanOnFacility"

    ListOfMemberCandidatesResponse:
      description: "return List<MemberCandidate>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/MemberCandidate"

    ServiceAttributesResponse:
      description: "return List<ServiceAttributes>"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServiceAttributes"

    ServicesPackageResponse:
      description: "return ServicesPackage"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServicesPackage"

    ListOfServicesPackageResponse:
      description: "return List<ServicesPackage>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ServicesPackage"

    TaskResponse:
      description: "Task"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Task"

    ListOfTasksResponse:
      description: "List<Task> Tasks"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Task"

    ApplicationMailResponse:
      description: "ApplicationMail"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApplicationMail"

    ListOfApplicationMailsResponse:
      description: "List<ApplicationMail> Application mails"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ApplicationMail"

    TaskResultResponse:
      description: "Task result"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskResult"

    ListOfTaskResultsResponse:
      description: "List<TaskResult> Task results"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TaskResult"

    FacilityStateResponse:
      description: "Facility state"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FacilityState"

    ListOfFacilityStatesResponse:
      description: "List<FacilityState> Propagation status"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/FacilityState"

    ListOfResourceStatesResponse:
      description: "List<ResourceState> Propagation status"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResourceState"

    ListOfServiceStatesResponse:
      description: "List<ServiceState> serviceStates"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ServiceState"

    AuthzRolesResponse:
      description: AuthzRoles of user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthzRoles"

    RTMessageResponse:
      description: Confirmation with e-mail address the ticket was created for
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RTMessage"


  #####################################################
  #                                                   #
  # PARAMETERS - definitions of often used parameters #
  #                                                   #
  #####################################################
  parameters:
    id:
      name: id
      description: numeric id
      schema:
        type: integer
      in: query
      required: true

    attributeId:
      name: attributeId
      description: "id of AttributeDefinition"
      schema:
        type: integer
      in: query
      required: true

    attributeInteger:
      name: attribute
      description: "id of AttributeDefinition"
      schema:
        type: integer
      in: query
      required: true

    attributeDefinitionId:
      name: attributeDefinition
      description: "id of AttributeDefinition"
      schema:
        type: integer
      in: query
      required: true

    attributes:
      name: "attributes[]"
      description: "list of attribute ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    attributeName:
      name: attributeName
      description: "full name of attribute definition (namespace + ':' + friendlyName)"
      schema:
        type: string
      in: query
      required: true

    attrName:
      name: attrName
      description: "full name of attribute definition (namespace + ':' + friendlyName)"
      schema:
        type: string
      in: query
      required: true

    attrNames:
      name: "attrNames[]"
      description: "list of attribute names List<String>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: string

    attrNamesOptional:
      name: "attrNames[]"
      description: "list of attribute names List<String> or null"
      in: query
      required: false
      schema:
        type: array
        items:
          type: string

    attributeValue:
      name: attributeValue
      description: "string value of Attribute"
      schema:
        type: string
      in: query
      required: true

    facilityId:
      name: facility
      description: "id of Facility"
      schema:
        type: integer
      in: query
      required: true

    optionalFacilityId:
      name: facility
      description: "id of Facility"
      schema:
        type: integer
      in: query
      required: false

    userId:
      name: user
      description: "id of User"
      schema:
        type: integer
      in: query
      required: true

    userIdLiterally:
      name: userId
      description: "id of User"
      schema:
        type: integer
      in: query
      required: true

    optionalUserId:
      name: user
      description: "id of User"
      schema:
        type: integer
      in: query
      required: false

    memberId:
      name: member
      description: "id of Member"
      schema:
        type: integer
      in: query
      required: true

    memberIds:
        name: "members[]"
        description: "id of Member"
        schema:
          type: array
          items:
            type: integer
        in: query
        required: true

    optionalMemberId:
      name: member
      description: "id of Member"
      schema:
        type: integer
      in: query
      required: false

    voId:
      name: vo
      description: "id of Vo"
      schema:
        type: integer
      in: query
      required: true

    optionalVoId:
      name: vo
      description: "id of Vo"
      schema:
        type: integer
      in: query
      required: false

    groupId:
      name: group
      description: "id of Group"
      schema:
        type: integer
      in: query
      required: true

    optionalGroupId:
      name: group
      description: "id of Group"
      schema:
        type: integer
      in: query
      required: false

    groupIds:
      name: "groups[]"
      description: "list of Group ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    groupDescription:
      name: description
      description: "description of Group"
      schema:
        type: string
      in: query
      required: true

    groupName:
      name: name
      description: "name of Group"
      schema:
        type: string
      in: query
      required: true

    resourceId:
      name: resource
      description: "id of Resource"
      schema:
        type: integer
      in: query
      required: true

    optionalResourceId:
      name: resource
      description: "id of Resource"
      schema:
        type: integer
      in: query
      required: false

    resourceIds:
      name: "resources[]"
      description: "list of Resource ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    userExtSourceId:
      name: userExtSource
      description: "id of UserExtSource"
      schema:
        type: integer
      in: query
      required: true

    optionalUserExtSourceId:
      name: userExtSource
      description: "id of UserExtSource"
      schema:
        type: integer
      in: query
      required: false

    hostId:
      name: host
      description: "id of Host"
      schema:
        type: integer
      in: query
      required: true

    optionalHostId:
      name: host
      description: "id of Host"
      schema:
        type: integer
      in: query
      required: false

    hostnames:
      name: "hostnames[]"
      description: "list of host names List<String>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: string

    listOfHostIds:
      name: "hosts[]"
      description: "list of host ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    destinationId:
      name: destination
      description: "id of Destination"
      schema:
        type: integer
      in: query
      required: true

    destinationName:
      name: destination
      description: "string name of destination"
      schema:
        type: string
      in: query
      required: true

    ownerId:
      name: owner
      description: "id of Owner"
      schema:
        type: integer
      in: query
      required: true

    serviceId:
      name: service
      description: "id of Service"
      schema:
        type: integer
      in: query
      required: true

    servicesPackageId:
      name: servicesPackage
      description: "id of ServicesPackage"
      schema:
        type: integer
      in: query
      required: true

    workWithUserAttributes:
      name: workWithUserAttributes
      description: "flag to work with user attributes"
      schema:
        type: boolean
      in: query
      required: true

    workWithGroupAttributes:
      name: workWithGroupAttributes
      description: "flag to work with group attributes"
      schema:
        type: boolean
      in: query
      required: true

    extLogin:
      name: extLogin
      description: external login of user, e.g. john
      schema:
        type: string
      in: query
      required: true

    sourceId:
      name: source
      description: external source id
      schema:
        type: integer
      in: query
      required: true

    extSourceName:
      name: extSourceName
      description: external source name, e.g. IdP entityId
      schema:
        type: string
      in: query
      required: true

    resultGroupId:
      name: resultGroup
      description: "id of Group to have removed 'operandGroup' from subgroups"
      schema:
         type: integer
      in: query
      required: true

    operandGroupId:
      name: operandGroup
      description: "id of Group to have removed 'resultGroup' from subgroups"
      schema:
        type: integer
      in: query
      required: true

    key:
      name: key
      description: key of an entityless attribute
      schema:
        type: string
      in: query
      required: true

    complementaryObjectId:
      name: complementaryObjectId
      description: "Property id of complementaryObject to get managers for"
      schema:
        type: integer
      in: query
      required: true

    complementaryObjectName:
        name: complementaryObjectName
        description: "Property beanName of complementaryObject, meaning object type (Vo | Group | Facility | ... )"
        schema:
          type: string
        in: query
        required: true

    role:
      name: role
      schema:
        type: string
      in: query
      required: true

    consumerName:
      name: consumerName
      schema:
        type: string
      in: query
      required: true

    applicationId:
      name: appId
      description: id of application
      schema:
        type: integer
      in: query
      required: true

    authorizedGroup:
      name: authorizedGroup
      description: 'Group id'
      schema:
        type: integer
      in: query
      required: true

    listOfApplicationFormItems:
      name: "ApplicationFormItem[]"
      description: "list of ApplicationFormItem List<ApplicationFormItem>"
      in: query
      required: true
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ApplicationFormItem"

    applicationForm:
      name: applicationForm
      description: application form
      schema:
        $ref: "#/components/schemas/ApplicationForm"
      in: query
      required: true

    searchString:
      name: searchString
      description: 'Text to search by'
      schema:
       type: string
      in: query
      required: true

    specificAttributes:
      name: specificAttributes
      description: 'list of specified attributes which are needed in object richUser'
      schema:
        type: array
        items:
          type: string
      in: query
      required: true

    destinationType:
      name: destinationType
      description: "Destination type (like host, user@host, user@host:port, email, service-specific, ...)"
      schema:
        type: string
      in: query
      required: true

    taskId:
      name: task
      description: "Task id"
      schema:
        type: integer
      required: true
      in: query

    taskResultId:
      name: taskResult
      description: "TaskResult id"
      schema:
        type: integer
      required: true
      in: query

    name:
      name: name
      description: name of entity
      schema:
        type: string
      in: query
      required: true

#################################################
#                                               #
# TAGS - documentation for groups of operations #
#                                               #
#################################################

tags:
  - name: AuthzResolver
    description: AuthzResolver RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AuthzResolver.html
  - name: AuditMessagesManager
    description: AuditMessage RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AuditMessagesManager.html
  - name: UsersManager
    description: UsersManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-UsersManager.html
  - name: MembersManager
    description: MembersManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-MembersManager.html
  - name: FacilitiesManager
    description: FacilitiesManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-FacilitiesManager.html
  - name: OwnersManager
    description: OwnersManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-OwnersManager.html
  - name: AttributesManager
    description: AttributesManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html
  - name: GroupsManager
    description: GroupsManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-GroupsManager.html
  - name: ResourcesManager
    description: ResourcesManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-ResourcesManager.html
  - name: VosManager
    description: VosManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-VosManager.html
  - name: TasksManager
    description: TasksManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-TasksManager.html
  - name: RTMessagesManager
    description: RTMessagesManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-RTMessagesManager.html


#################################################
#                                               #
# PATHS - URLs of RPC operations                #
#                                               #
#################################################
paths:

  #################################################
  #                                               #
  # Utils                                         #
  #                                               #
  #################################################

  /:
    get:
      tags:
        - Utils
      operationId: getPerunRPCVersion
      summary: Gets Perun runtime status
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: "OK! Version: 3.8.6, User: makub@META, extSource: META"

  /json/utils/getPerunStatus:
    get:
      tags:
        - Utils
      operationId: getPerunStatus
      summary: Gets Perun runtime status
      description: |
        Returns list of strings which looks like this
        "Version of Perun: 3.8.6",
        "Version of PerunDB: 3.1.55",
        "Version of Servlet: Apache Tomcat/9.0.16 (Debian)",
        "Version of DB-driver: PostgreSQL JDBC Driver-42.2.8",
        "Version of DB: PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)",
        "Version of Java platform: 11.0.5",
        "AuditerConsumer: '127.0.0.1:6071' with last processed id='23463958'",
        "AuditerConsumer: 'ldapcConsumer' with last processed id='23463958'",
        "AuditerConsumer: 'notifications' with last processed id='23463952'",
        "LastMessageId: 23463958",
        "Timestamp: 2019-11-14 10:12:30.99"
      responses:
        '200':
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/utils/getPerunStatistics:
    get:
      tags:
        - Utils
      operationId: getPerunStatistics
      summary: Gets Perun runtime statistics
      description: |
        Returns list of strings which looks like this
        "Timestamp: '2019-11-14 10:46:39.613'",
        "USERS: '39927'",
        "FACILITIES: '552'",
        "DESTINATIONS: '2568'",
        "VOS: '341'",
        "RESOURCES: '2560'",
        "GROUPS: '2300'",
        "AUDITMESSAGES: '7333237'"
      responses:
        '200':
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/utils/getPerunSystemTimeInMillis:
    get:
      tags:
        - Utils
      operationId: getPerunSystemTimeInMillis
      summary: Gets Perun system time in milliseconds since the epoch
      responses:
        '200':
          $ref: '#/components/responses/LongResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/utils/getGuiConfiguration:
    get:
      tags:
        - Utils
      operationId: getGuiConfiguration
      summary: Gets perun-web-gui.properties as Map<String,String>
      responses:
        '200':
          $ref: '#/components/responses/MapStringStringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # AuthzResolver                                 #
  #                                               #
  #################################################

  /json/authzResolver/getPerunPrincipal:
    get:
      tags:
        - AuthzResolver
      operationId: getPerunPrincipal
      summary: Gets current user
      description: Returns object representing the currently authenticated user.
      responses:
        '200':
          description: successfully returned authenticated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PerunPrincipal"
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/authzResolver/getRichAdmins:
    get:
      tags:
        - AuthzResolver
      operationId: getAuthzRichAdmins
      summary: Gets all rich admins
      description: Returns all managers for complementaryObject and role with specified attributes.
      parameters:
        - $ref: '#/components/parameters/role'
        - $ref: '#/components/parameters/complementaryObjectId'
        - $ref: '#/components/parameters/complementaryObjectName'
        - { name: specificAttributes,
            description: "list of specified attributes which are needed in object richUser",
            schema: {
              type: array,
              items: {
                type: string
              }
            },
            in: query,
            required: true
        }
        - { name: allUserAttributes,
            description: "When true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes",
            schema: {
              type: boolean,
              default: false
            },
            in: query,
            required: false
        }
        - { name: onlyDirectAdmins,
            description: "When true, return only direct users of the complementary object for role with specific attributes",
            schema: {
              type: boolean,
              default: true
            },
            in: query,
            required: false
        }
      responses:
        '200':
          $ref: "#/components/schemas/ListOfRichUsersResponse"
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/authzResolver/getAdminGroups:
    get:
      tags:
        - AuthzResolver
      operationId: getAuthzAdminGroups
      summary: Get all groups of managers (authorizedGroups) for complementaryObject and role
      parameters:
        - $ref: '#/components/parameters/role'
        - $ref: '#/components/parameters/complementaryObjectId'
        - $ref: '#/components/parameters/complementaryObjectName'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/authzResolver/setRole/u-co:
    post:
      tags:
        - AuthzResolver
      operationId: setRoleWithUserComplementaryObject
      summary: Set role for user and complementaryObject
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: setRoleWithUserComplementaryObject
              description: "input to setRoleWithUserComplementaryObject"
              type: object
              required:
                - role
                - users
                - complementaryObject
              properties:
                role: {type: string, nullable: false}
                users:
                  type: array
                  description: "List of user ids"
                  nullable: false
                  items:
                    type: integer
                complementaryObject: { $ref: "#/components/schemas/PerunBean"}

  /json/authzResolver/unsetRole/u-co:
    post:
      tags:
        - AuthzResolver
      operationId: unsetRoleWithUserComplementaryObject
      summary: Unset role for user and complementaryObject
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: unsetRoleWithUserComplementaryObject
              description: "input to unsetRoleWithUserComplementaryObject"
              type: object
              required:
                - role
                - users
                - complementaryObject
              properties:
                role: {type: string, nullable: false}
                users:
                  type: array
                  description: "List of user ids"
                  nullable: false
                  items:
                    type: integer
                complementaryObject: {$ref: "#/components/schemas/PerunBean"}


  /json/authzResolver/setRole/g-co:
    post:
      tags:
        - AuthzResolver
      operationId: setRoleWithGroupComplementaryObject
      summary: Set role for authorizedGroup and complementaryObject
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: setRoleWithGroupComplementaryObject
              description: "input to unsetRoleWithUserComplementaryObject"
              type: object
              required:
                - role
                - authorizedGroups
                - complementaryObject
              properties:
                role: {type: string, nullable: false}
                authorizedGroups:
                  type: array
                  description: "List of authorizedGroups ids"
                  nullable: false
                  items:
                    type: integer
                complementaryObject: {$ref: "#/components/schemas/PerunBean"}

  /json/authzResolver/unsetRole/g-co:
    post:
      tags:
        - AuthzResolver
      operationId: unsetRoleWithGroupComplementaryObject
      summary: Unset role for authorizedGroup and complementaryObject
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: unsetRoleWithGroupComplementaryObject
              description: "input to unsetRoleWithUserComplementaryObject"
              type: object
              required:
                - role
                - authorizedGroups
                - complementaryObject
              properties:
                role: {type: string, nullable: false}
                authorizedGroups:
                  type: array
                  description: "List of authorizedGroups ids"
                  nullable: false
                  items:
                    type: integer
                complementaryObject: {$ref: "#/components/schemas/PerunBean"}

  /json/authzResolver/getUserRoles:
    get:
      tags:
        - AuthzResolver
      operationId: getUserRoles
      summary: Returns all roles as an AuthzRoles object for a given user.
      parameters:
        - $ref: '#/components/parameters/userIdLiterally'
      responses:
        '200':
          $ref: '#/components/responses/AuthzRolesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/authzResolver/getUserRoleNames:
    get:
      tags:
        - AuthzResolver
      operationId: getUserRoleNames
      summary: Returns list of user's role names. Perun system uses role names in the upper case format. However, for now, they are converted to the lower case format because of the compatibility with external systems.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/authzResolver/loadAuthorizationComponents:
    get:
      tags:
        - AuthzResolver
      operationId: loadAuthorizationComponents
      summary: Load perun roles and policies from the configuration file perun-roles.yml.
        Roles are loaded to the database and policies are loaded to the PerunPoliciesContainer.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # AttributesManager                             #
  #                                               #
  #################################################


  /json/attributesManager/getAttributes/f-r-u-m:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityResourceUserMemberAttributes
      summary: Get all non-empty member, user, member-resource and user-facility attributes.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/f-u:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityUserAttributes
      summary: Get all non-empty attributes associated with the user on the facility.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes1
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/f-names:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributesByNames
      summary: Returns all specified Facility attributes for selected Facility.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes3
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/f:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributes
      summary: Returns all non-empty Facility attributes for selected Facility.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes2
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/vo-names:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributesByNames
      summary: Get all attributes associated with the vo which have name in list attrNames (empty too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes5
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/vo:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributes
      summary: Get all attributes associated with the vo.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes4
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-r-names-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAndUserFacilityAttributesByNames
      description: |
        Gets selected non-empty attributes associated with the member and the resource.
        It returns member and member-resource attributes and also user and user-facility attributes if
        workWithUserAttributes is true.
        Attributes are selected by list of attr_names. Empty list means all attributes.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes9
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-r-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAndUserFacilityAttributes
      description: |
        Gets all non-empty attributes associated with the member on the resource and if workWithUserAttributes is
        true, gets also all non-empty user, user-facility and member attributes.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes8
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g-m-names:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupMemberAttributesByNames
      description: |
        Get all attributes by the list of attrNames if they are in one of these namespaces:
        - member
        - group
        - member-group
        - resource
        - member-resource
        - group-resource
        - user (get from member object)
        - facility (get from resource object)
        - user-facility
        Returns all attributes even if they are empty or virtual.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes11
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-r:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAttributes
      summary: Get all non-empty attributes associated with the member on the resource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes10
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g-names-wg:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupAndGroupAttributesByNames
      description: |
        Get all attributes associated with the group and the resource which have their name in list attrNames (empty too).
        Virtual attributes too.
        If workWithGroupAttributes is true, return also all group attributes in list of attrNames (with virtual attributes too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes14
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithGroupAttributes'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g-wg:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupAndGroupAttributes
      description: |
        Get all non-empty attributes associated with the group and resource. Virtual attributes too.
        If workWithGroupAttributes is true, return also all group attributes.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes13
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/workWithGroupAttributes'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupAttributes
      summary: Get all non-empty attributes associated with the group on resource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes12
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-names:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributesByNames
      description: |
        Get all attributes associated with the resource which have name in list attrNames (empty too).
        Virtual attributes too.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes16
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributes
      summary: Get all non-empty attributes associated with the resource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes15
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-g-names-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAndUserAttributesByNames
      description: |
        Get all attributes associated with the member in the group which have name in list attrNames (empty too).
        If workWithUserAttribute is true, return also all user attributes in list of attrNames (with virtual attributes too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes17
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-names-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAndUserAttributesByNames
      description: |
        Get all attributes associated with the member which have name in list attrNames (empty too).
        Virtual attributes too.
        If workWithUserAttribute is true, return also all user attributes in list of attrNames (with virtual attributes too).
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAndUserAttributes
      description: |
        Get all non-empty attributes associated with the member and if workWithUserAttributes is
        true, get all non-empty attributes associated with user, who is this member.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes19
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-g-names:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributesByNames
      description: |
        Get all attributes (empty and virtual too)associated with the member in the group which have name in list attrNames.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes20
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-names:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributesByNames
      description: |
        Get all attributes associated with the member which have name in list attrNames (empty too).
        Virtual attribute too.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes21
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-g:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributes
      description: |
        Get all non-empty attributes associated with the member in the group.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes22
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributes
      description: |
        Get all non-empty attributes associated with the member.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes18
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/u-names:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributesByNames
      description: |
        Get all attributes associated with the user which have name in list attrNames (empty too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes24
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/u:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributes
      description: |
        Get all non-empty attributes associated with the user.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes23
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/g-names:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributesByNames
      description: |
        Get all attributes associated with the group which have name in list attrNames (empty too).
        Virtual attribute too.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes26
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/g:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributes
      description: |
        Get all non-empty attributes associated with the group.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes25
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/h:
    get:
      tags:
        - AttributesManager
      operationId: getHostAttributes
      description: |
        Get all non-empty attributes associated with the host.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes27
      parameters:
        - $ref: '#/components/parameters/hostId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/key:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessAttributesByKey
      description: |
        Get all entityless attributes with subject equaled String key.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes28
      parameters:
        - { name: key, description: "key for entityless attributes", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/ues-names:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributesByNames
      description: |
        Get all attributes associated with the userExtSource which have name in list attrNames (empty too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes7
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/ues:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributes
      description: |
        Get all non-empty attributes associated with the UserExtSource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes6
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getEntitylessAttributes:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessAttributesByName
      summary: Returns all entityless attributes with attrName.
      parameters:
        - $ref: '#/components/parameters/attrName'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getEntitylessKeys:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessKeys
      summary: Returns list of Keys which fits the attributeDefinition.
      parameters:
        - $ref: '#/components/parameters/attributeDefinitionId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/setAttributes/f-r-g-u-m:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityResourceGroupUserMemberAttributes
      description: |
        Store the member, user, member-group, member-resource and user-facility attributes.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
        Group and group-resource attributes are not supported in this context.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityResourceGroupUserMemberAttributes
              description: "input to setFacilityResourceGroupUserMemberAttributes"
              type: object
              required:
                - facility
                - resource
                - group
                - user
                - member
                - attributes
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                user: { type: integer, description: "user id", nullable: false }
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                 type: array
                 nullable: false
                 items:
                   $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/f-r-u-m:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityResourceUserMemberAttributes
      description: |
        Store the member, user, member-resource and user-facility attributes.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityResourceUserMemberAttributes
              description: "input to setFacilityResourceUserMemberAttributes"
              type: object
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                user: { type: integer, description: "user id", nullable: false }
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/f-u:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityUserAttributes
      description: |
        Store the attributes associated with the facility and user combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityUserAttributes
              description: "input to setFacilityUserAttributes"
              type: object
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                user: { type: integer, description: "user id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/f:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityAttributes
      description: |
        Store the attributes associated with the facility.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityAttributes
              description: "input to setFacilityAttributes"
              type: object
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/vo:
    post:
      tags:
        - AttributesManager
      operationId: setVoAttributes
      description: |
        Store the attributes associated with the vo.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetVoAttributes
              description: "input to setVoAttributes"
              type: object
              properties:
                vo: { type: integer, description: "vo id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/m-r-wu:
    post:
      tags:
        - AttributesManager
      operationId: setMemberResourceAndUserAttributes
      description: |
        Store the attributes associated with the resource and member combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
        If workWithUserAttributes is true, the method stores also the attributes associated with user, user-facility and member.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberResourceAndUserAttributes
              description: "input to setMemberResourceAndUserAttributes"
              type: object
              required:
                - member
                - resource
                - attributes
                - workWithUserAttributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithUserAttributes: { type: boolean }

  /json/attributesManager/setAttributes/m-r:
    post:
      tags:
        - AttributesManager
      operationId: setMemberResourceAttributes
      description: |
        Store the attributes associated with the resource and member combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberResourceAttributes
              description: "input to setMemberResourceAttributes"
              type: object
              required:
                - member
                - resource
                - attributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/r-g-wg:
    post:
      tags:
        - AttributesManager
      operationId: setResourceGroupWithGroupAttributes
      description: |
        Store the attributes associated with group and resource, if workWithUserAttributes is true then also from group itself.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceGroupWithGroupAttributes
              description: "input to setResourceGroupWithGroupAttributes"
              type: object
              required:
                - resource
                - group
                - attributes
                - workWithGroupAttributes
              properties:
                resource: { type: integer, description: "resource id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithGroupAttributes: { type: boolean }

  /json/attributesManager/setAttributes/r-g:
    post:
      tags:
        - AttributesManager
      operationId: setResourceGroupAttributes
      description: |
        Store the attributes associated with the group on resource.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceGroupAttributes
              description: "input to setResourceGroupAttributes"
              type: object
              required:
                - resource
                - group
                - attributes
              properties:
                resource: { type: integer, description: "resource id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/r:
    post:
      tags:
        - AttributesManager
      operationId: setResourceAttributes
      description: |
        Store the attributes associated with the resource.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceAttributes
              description: "input to setResourceAttributes"
              type: object
              required:
                - resource
                - attributes
              properties:
                resource: { type: integer, description: "resource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/m-g-wu:
    post:
      tags:
        - AttributesManager
      operationId: setMemberGroupWithUserAttributes
      description: |
        Store the attributes associated with the member and group combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
        If workWithUserAttributes is true, the method stores also the attributes associated with user and member.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberGroupWithUserAttributes
              description: "input to setMemberGroupWithUserAttributes"
              type: object
              required:
                - member
                - group
                - attributes
                - workWithUserAttributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithUserAttributes: { type: boolean }

  /json/attributesManager/setAttributes/m-wu:
    post:
      tags:
        - AttributesManager
      operationId: setMemberWithUserAttributes
      description: |
        Store the attributes associated with member and user (which we get from this member) if workWithUserAttributes is true.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberWithUserAttributes
              description: "input to setMemberWithUserAttributes"
              type: object
              required:
                - member
                - attributes
                - workWithUserAttributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithUserAttributes: { type: boolean }

  /json/attributesManager/setAttributes/m-g:
    post:
      tags:
        - AttributesManager
      operationId: setMemberGroupAttributes
      description: |
        Store the attributes associated with the member and group combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberGroupAttributes
              description: "input to setMemberGroupAttributes"
              type: object
              required:
                - member
                - group
                - attributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/m:
    post:
      tags:
        - AttributesManager
      operationId: setMemberAttributes
      description: |
        Store the attributes associated with the member.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberAttributes
              description: "input to setMemberAttributes"
              type: object
              required:
                - member
                - attributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/u:
    post:
      tags:
        - AttributesManager
      operationId: setUserAttributes
      description: |
        Store the attributes associated with the user.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserAttributes
              description: "input to setUserAttributes"
              type: object
              required:
                - user
                - attributes
              properties:
                user: { type: integer, description: "user id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/g:
    post:
      tags:
        - AttributesManager
      operationId: setGroupAttributes
      description: |
        Store the attributes associated with the group.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetGroupAttributes
              description: "input to setGroupAttributes"
              type: object
              required:
                - group
                - attributes
              properties:
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/h:
    post:
      tags:
        - AttributesManager
      operationId: setHostAttributes
      description: |
        Store the attributes associated with the host.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetHostAttributes
              description: "input to setHostAttributes"
              type: object
              required:
                - host
                - attributes
              properties:
                host: { type: integer, description: "host id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/ues:
    post:
      tags:
        - AttributesManager
      operationId: setUserExtSourceAttributes
      description: |
        Store the attributes associated with the UserExtSource.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserExtSourceAttributes
              description: "input to setUserExtSourceAttributes"
              type: object
              required:
                - userExtSource
                - attributes
              properties:
                userExtSource: { type: integer, description: "userExtSource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/getAttribute/name-facility:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributeByName
      summary: Returns a facility Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for facility and attribute name.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-facility:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributeById
      summary: Returns a facility Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for facility and attribute id.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-user:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributeByName
      summary: Returns a user Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for user and attribute name.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-user:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributeById
      summary: Returns a user Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for user and attribute id.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-user_facility:
    get:
      tags:
        - AttributesManager
      operationId: getUserFacilityAttributeByName
      summary: Returns a user_facility Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for user, facility and attribute name.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-user_facility:
    get:
      tags:
        - AttributesManager
      operationId: getUserFacilityAttributeById
      summary: Returns a user_facility Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for user, facility and attribute id.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-vo:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributeByName
      summary: Returns a Vo Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for virtual organization and attribute name.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-vo:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributeById
      summary: Returns a Vo Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for virtual organization and attribute id.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-member:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributeByName
      summary: Returns a member Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for member and attribute name.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-member:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributeById
      summary: Returns a member Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for member and attribute id.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-group:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributeByName
      summary: Returns a group Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for group and attribute name.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-group:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributeById
      summary: Returns a group Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for group and attribute id.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-resource:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributeByName
      summary: Returns a resource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for resource and attribute name.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-resource:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributeById
      summary: Returns a resource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for resource and attribute id.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-member-group:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributeByName
      summary: Returns a member_group Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for member, group and attribute name.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-member-group:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributeById
      summary: Returns a member_group Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for member, group and attribute id.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-member-resource:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAttributeByName
      summary: Returns a member_resource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for member, resource and attribute name.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-member-resource:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAttributeById
      summary: Returns a member_resource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for member, resource and attribute id.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-group-resource:
    get:
      tags:
        - AttributesManager
      operationId: getGroupResourceAttributeByName
      summary: Returns a group_resource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for group, resource and attribute name.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-group-resource:
    get:
      tags:
        - AttributesManager
      operationId: getGroupResourceAttributeById
      summary: Returns a group_resource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for group, resource and attribute id.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-ues:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributeByName
      summary: Returns a UserExtSource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for UserExtSource and attribute name.
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-ues:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributeById
      summary: Returns a UserExtSource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for UserExtSource and attribute id.
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-host:
    get:
      tags:
        - AttributesManager
      operationId: getHostAttributeByName
      summary: Returns a host Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for host and attribute name.
      parameters:
        - $ref: '#/components/parameters/hostId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-host:
    get:
      tags:
        - AttributesManager
      operationId: getHostAttributeById
      summary: Returns a host Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for host and attribute id.
      parameters:
        - $ref: '#/components/parameters/hostId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-entityless:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessAttributeByName
      summary: Returns an entityless Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for entityless key and attribute name.
      parameters:
        - { name: key, description: "key for entityless attribute", schema: { type: string },  in: query, required: true }
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/any:
    get:
      tags:
        - AttributesManager
      operationId: getAttribute
      summary: Returns an Attribute by its name or id.
      description: |
        This method cannot be fully described correctly in OpenID, because it cannot describe allowed combinations of parameters.
        One of attributeName, attributeId is required.
        The other parameters specify ids that can be combined in the following ways:
         (facility), (user), (user,facility), (vo), (member), (group), (resource),
         (member,group), (member,resource), (group,resource),(userExtSource), (host), (key)
        Use the specialized methods getFacilityAttributeByName(), getMemberResourceAttributeById() etc.
      externalDocs:
        url:  https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html
      parameters:
        - { name: attributeName, description: "full name of attribute (namespace + ':' + friendlyName)", schema: { type: string },  in: query }
        - { name: attributeId, description: "id of attribute", schema: { type: integer },  in: query }
        - { name: facility, description: "id of Facility", schema: { type: integer },  in: query }
        - { name: user, description: "id of User", schema: { type: integer },  in: query }
        - { name: vo, description: "id of Vo", schema: { type: integer },  in: query }
        - { name: resource, description: "id of Resource", schema: { type: integer },  in: query }
        - { name: member, description: "id of Member", schema: { type: integer },  in: query }
        - { name: group, description: "id of Group", schema: { type: integer },  in: query }
        - { name: host, description: "id of Host", schema: { type: integer },  in: query }
        - { name: userExtSource, description: "id of UserExtSource", schema: { type: integer },  in: query }
        - { name: key, description: "key for entityless attribute", schema: { type: string },  in: query }
      responses:
        '200':
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributeDefinition:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeDefinitionByName
      summary: Returns an AttributeDefinition by its name.
      parameters:
        - $ref: '#/components/parameters/attributeName'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDefinitionResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributesDefinition:
    get:
      tags:
        - AttributesManager
      operationId: getAllAttributeDefinitions
      summary: Returns all AttributeDefinitions.
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributeDefinitionsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributeDefinitionById:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeDefinitionById
      summary: Returns an AttributeDefinition by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDefinitionResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributesDefinitionByNamespace:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeDefinitionsByNamespace
      summary: Returns all AttributeDefinitions in a namespace.
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributeDefinitionsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/getAttributesDefinitionWithRights:
    get:
      tags:
        - AttributesManager
      operationId: getAttributesDefinitionWithRights
      summary: Returns all AttributeDefinitions for every entity and possible
        combination of entities with rights. Only attribute definition of
        attributes user can read (or write) you will get. Combination of entities
        is based on provided parameters, which are optional (at least one must be present).
      parameters:
        - $ref: '#/components/parameters/optionalMemberId'
        - $ref: '#/components/parameters/optionalUserId'
        - $ref: '#/components/parameters/optionalVoId'
        - $ref: '#/components/parameters/optionalGroupId'
        - $ref: '#/components/parameters/optionalResourceId'
        - $ref: '#/components/parameters/optionalFacilityId'
        - $ref: '#/components/parameters/optionalHostId'
        - $ref: '#/components/parameters/optionalUserExtSourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributeDefinitionsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

##
# combinations:
#  (facility), (user), (user,facility), (vo), (member), (group), (resource),
#  (member,group), (member,resource), (group,resource),(userExtSource), (host), (key)

  /json/attributesManager/setAttribute/facility:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityAttribute
      summary: Sets Attribute for Facility.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityAttribute
              description: "input to setFacilityAttribute"
              type: object
              required:
                - facility
                - attribute
              properties:
                facility: { type: integer, description: "facility id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/user:
    post:
      tags:
        - AttributesManager
      operationId: setUserAttribute
      summary: Sets Attribute for User.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserAttribute
              description: "input to setUserAttribute"
              type: object
              required:
                - user
                - attribute
              properties:
                user: { type: integer, description: "user id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/facility-user:
    post:
      tags:
        - AttributesManager
      operationId: setUserFacilityAttribute
      summary: Sets Attribute for User and Facility.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserFacilityAttribute
              description: "input to setUserFacilityAttribute"
              type: object
              required:
                - user
                - facility
                - attribute
              properties:
                user: { type: integer, description: "user id" }
                facility: { type: integer, description: "facility id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/vo:
    post:
      tags:
        - AttributesManager
      operationId: setVoAttribute
      summary: Sets Attribute for Vo.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetVoAttribute
              description: "input to setVoAttribute"
              type: object
              required:
                - vo
                - attribute
              properties:
                vo: { type: integer, description: "vo id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/member:
    post:
      tags:
        - AttributesManager
      operationId: setMemberAttribute
      summary: Sets Attribute for Member.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberAttribute
              description: "input to setMemberAttribute"
              type: object
              required:
                - member
                - attribute
              properties:
                member: { type: integer, description: "member id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/group:
    post:
      tags:
        - AttributesManager
      operationId: setGroupAttribute
      summary: Sets Attribute for Group.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetGroupAttribute
              description: "input to setGroupAttribute"
              type: object
              required:
                - group
                - attribute
              properties:
                group: { type: integer, description: "group id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/resource:
    post:
      tags:
        - AttributesManager
      operationId: setResourceAttribute
      summary: Sets Attribute for Resource.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceAttribute
              description: "input to setResourceAttribute"
              type: object
              required:
                - resource
                - attribute
              properties:
                resource: { type: integer, description: "resource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/member-group:
    post:
      tags:
        - AttributesManager
      operationId: setMemberGroupAttribute
      summary: Sets Attribute for Member and Group.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberGroupAttribute
              description: "input to setMemberGroupAttribute"
              type: object
              required:
                - member
                - group
                - attribute
              properties:
                member: { type: integer, description: "member id" }
                group: { type: integer, description: "group id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/member-resource:
    post:
      tags:
        - AttributesManager
      operationId: setMemberResourceAttribute
      summary: Sets Attribute for Member and Resource.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberResourceAttribute
              description: "input to setMemberResourceAttribute"
              type: object
              required:
                - member
                - resource
                - attribute
              properties:
                member: { type: integer, description: "member id" }
                resource: { type: integer, description: "resource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/group-resource:
    post:
      tags:
        - AttributesManager
      operationId: setGroupResourceAttribute
      summary: Sets Attribute for Group and Resource.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetGroupResourceAttribute
              description: "input to setGroupResourceAttribute"
              type: object
              required:
                - group
                - resource
                - attribute
              properties:
                group: { type: integer, description: "group id" }
                resource: { type: integer, description: "resource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/userExtSource:
    post:
      tags:
        - AttributesManager
      operationId: setUserExtSourceAttribute
      summary: Sets Attribute for UserExtSource.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserExtSourceAttribute
              description: "input to setUserExtSourceAttribute"
              type: object
              required:
                - userExtSource
                - attribute
              properties:
                userExtSource: { type: integer, description: "userExtSource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/host:
    post:
      tags:
        - AttributesManager
      operationId: setHostAttribute
      summary: Sets Attribute for Host.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetHostAttribute
              description: "input to setHostAttribute"
              type: object
              required:
                - host
                - attribute
              properties:
                host: { type: integer, description: "host id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/entityless:
    post:
      tags:
        - AttributesManager
      operationId: setEntitylessAttribute
      summary: Sets entityless Attribute.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputEntitylessAttribute
              description: "input to setEntitylessAttribute"
              type: object
              required:
                - key
                - attribute
              properties:
                key: { type: string, description: "key for entityless attribute" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/createAttribute:
    post:
      tags:
        - AttributesManager
      operationId: createAttributeDefinition
      summary: Creates AttributeDefinition.
      responses:
        '200':
          $ref: '#/components/responses/AttributeDefinitionResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCreateAttributeDefinition
              description: "input to createAttributeDefinition"
              type: object
              required:
                - attribute
              properties:
                attribute: { $ref: '#/components/schemas/AttributeDefinition' }

  /urlinjsonout/attributesManager/deleteAttribute:
    post:
      tags:
        - AttributesManager
      operationId: deleteAttributeDefinition
      summary: Deletes attribute definition from Perun including all values set for any entity.
      parameters:
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/deleteAttributes:
    post:
      tags:
        - AttributesManager
      operationId: deleteAttributeDefinitions
      summary: Deletes attribute definitions from Perun including all values set for any entity.
      parameters:
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

#TODO getRequiredAttributes

#TODO getRequiredAttributesDefinition

#TODO getResourceRequiredAttributes

#TODO fillAttribute

#TODO fillAttributes

#TODO checkAttributeValue

#TODO checkAttributeSyntax

#TODO checkAttributeSemantics

#TODO checkAttributesValue

#TODO checkAttributesSemantics

#TODO checkAttributesSyntax

  /urlinjsonout/attributesManager/removeAttributes/m-workWithUserAttributes:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberAttributesWorkWithUserAttributes
      summary: Remove attributes of namespace member
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/m-g-workWithUserAttributes:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberGroupAttributesWorkWithUserAttributes
      summary: Remove attributes of namespace member-group
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/g-r-workWithGroupAttributes:
    post:
      tags:
        - AttributesManager
      operationId: removeGroupResourceAttributesWorkWithGroupAttributes
      summary: Remove attributes of namespace group-resource
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/workWithGroupAttributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/m-g:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberGroupAttributes
      summary: Remove attributes of namespace member-group
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/m-r:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberResourceAttributes
      summary: Remove attributes of namespace member-resource
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/u-f:
    post:
      tags:
        - AttributesManager
      operationId: removeUserFacilityAttributes
      summary: Remove attributes of namespace user-facility
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/f-r-u-m:
    post:
      tags:
        - AttributesManager
      operationId: removeAttributesForFacilityResourceUserMember
      summary: Remove attributes of namespace facility, resource, user and member
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/f-r-g-u-m:
    post:
      tags:
        - AttributesManager
      operationId: removeAttributesForFacilityResourceGroupUserMember
      summary: Remove attributes of namespace facility, resource, group, user and member
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/g-r:
    post:
      tags:
        - AttributesManager
      operationId: removeGroupResourceAttributes
      summary: Remove attributes of namespace group-resource
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/r:
    post:
      tags:
        - AttributesManager
      operationId: removeResourceAttributes
      summary: Remove attributes of namespace resource
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/ues:
    post:
      tags:
        - AttributesManager
      operationId: removeUesAttributes
      summary: Remove attributes of namespace userExtSource
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/h:
    post:
      tags:
        - AttributesManager
      operationId: removeHostAttributes
      summary: Remove attributes of namespace host
      parameters:
        - $ref: '#/components/parameters/hostId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/f:
    post:
      tags:
        - AttributesManager
      operationId: removeFacilityAttributes
      summary: Remove attributes of namespace facility
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/m:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberAttributes
      summary: Remove attributes of namespace member
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/u:
    post:
      tags:
        - AttributesManager
      operationId: removeUserAttributes
      summary: Remove attributes of namespace user
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/g:
    post:
      tags:
        - AttributesManager
      operationId: removeGroupAttributes
      summary: Remove attributes of namespace group
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttributes/v:
    post:
      tags:
        - AttributesManager
      operationId: removeVoAttributes
      summary: Remove attributes of namespace vo
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/u-f:
    post:
      tags:
        - AttributesManager
      operationId: removeUserFacilityAttribute
      summary: Remove user facility attribute
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/f:
    post:
      tags:
        - AttributesManager
      operationId: removeFacilityAttribute
      summary: Remove facility attribute
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/v:
    post:
      tags:
        - AttributesManager
      operationId: removeVoAttribute
      summary: Remove vo attribute
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/m-r:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberResourceAttribute
      summary: Remove member-resource attribute
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/g-r:
    post:
      tags:
        - AttributesManager
      operationId: removeGroupResourceAttribute
      summary: Remove group-resource attribute
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/r:
    post:
      tags:
        - AttributesManager
      operationId: removeResourceAttribute
      summary: Remove resource attribute
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/m-g:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberGroupAttribute
      summary: Remove member-group attribute
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/m:
    post:
      tags:
        - AttributesManager
      operationId: removeMemberAttribute
      summary: Remove member attribute
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/u:
    post:
      tags:
        - AttributesManager
      operationId: removeUserAttribute
      summary: Remove user attribute
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/g:
    post:
      tags:
        - AttributesManager
      operationId: removeGroupAttribute
      summary: Remove group attribute
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/h:
    post:
      tags:
        - AttributesManager
      operationId: removeHostAttribute
      summary: Remove host attribute
      parameters:
        - $ref: '#/components/parameters/hostId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/removeAttribute/ues:
    post:
      tags:
        - AttributesManager
      operationId: removeUserExtSourceAttribute
      summary: Remove userExtSource attribute
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /urlinjsonout/attributesManager/removeAttribute/e:
    post:
      tags:
        - AttributesManager
      operationId: removeEntitylessAttribute
      summary: Remove entityless attribute
      parameters:
        - $ref: '#/components/parameters/key'
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO removeAllAttributes

#TODO getLogins

  /json/attributesManager/updateAttributeDefinition:
    post:
      tags:
        - AttributesManager
      operationId: updateAttributeDefinition
      summary: Updates AttributeDefinition in Perun based on provided object.
        Update is done on AttributeDefinition selected by its <code>id</code>.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: InputAttributeDefinition
              description: Input to updateAttributeDefinition
              required:
                - attributeDefinition
              properties:
                attributeDefinition:
                  $ref: '#/components/schemas/AttributeDefinition'
      responses:
        '200':
          $ref: '#/components/responses/AttributeDefinitionResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

#TODO doTheMagic

  /json/attributesManager/getAttributeRights:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeRights
      summary: "Gets AttributeRights for specified Attribute. Rights specify which
      Role can do particular actions (read / write) with Attribute. Method always
      return rights for following roles: VOADMIN, GROUPADMIN, FACILITYADMIN, SELF."
      parameters:
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAttributeRightsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/setAttributeRights:
    post:
      tags:
        - AttributesManager
      operationId: setAttributeRights
      summary: "Sets all AttributeRights in the list given as a parameter. Allowed
       Roles to set rights for are: VOADMIN, GROUPADMIN, FACILITYADMIN, SELF."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAttributeRights
              description: Input to setAttributeRights
              type: object
              required:
                - rights
              properties:
                rights:
                  type: array
                  items:
                    $ref: '#/components/schemas/AttributeRights'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


#TODO convertAttributeToUnique

  /json/attributesManager/getAttributeModulesDependenciesGraphText:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeModulesDependenciesGraphText
      summary: |
        Generates text file describing dependencies between attribute modules.
        The format of text file can be specified by parameter. Modules that
        has no dependency relations are omitted.
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [DOT, TGF]
          description: Currently supported formats are DOT and TGF.
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GraphDTOResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributeModulesDependenciesGraphText/for-attribute:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeModulesDependenciesForAttributeGraphText
      summary: |
        Generates text file describing dependencies between attribute modules.
        The format of text file can be specified by parameter. Modules that
        has no dependency relations are omitted.
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [DOT, TGF]
          description: Currently supported formats are DOT and TGF.
          required: true
        - name: attrName
          in: query
          schema:
            type: string
          description: Attribute name which dependencies will be found.
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GraphDTOResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # AuditMessagesManager                          #
  #                                               #
  #################################################

  /json/AuditMessagesManager/getMessages:
    get:
      tags:
        - AuditMessagesManager
      operationId: getMessages
      summary: |
        Returns 100 newest audit messages from audit log. If there is a less messages than 100,
        then all of them are returned OR Returns exact number of newest audit messages defined by
        'count' param (disregarding message IDs). If there is less messages present, then all of them are returned..
      parameters:
        - { name: count, in: query, schema: { type: integer },  description: "Messages limit",  required: false }
      responses:
        '200':
          $ref: '#/components/responses/ListOfAuditMessagesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/AuditMessagesManager/getMessagesByCount:
    get:
      tags:
        - AuditMessagesManager
      operationId: getMessagesByCount
      summary: |
        Returns all messages with IDs within the range from max(ID) to (max(ID)-count),
        where number of returned messages is equal or less than 'count' param, because some
        IDs could be skipped in the sequence.
      parameters:
        - { name: count, in: query, schema: { type: integer }, description: "Number of IDs to subtract from max_id", required: true }
      responses:
        '200':
          $ref: '#/components/responses/ListOfAuditMessagesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/AuditMessagesManager/pollConsumerMessages:
    get:
      tags:
        - AuditMessagesManager
      operationId: pollConsumerMessages
      summary: |
        Returns list of AuditMessages from audit log with IDs > lastProcessedId for
        registered auditer consumer specified by consumerName param.
      parameters:
        - $ref: '#/components/parameters/consumerName'
      responses:
        '200':
          $ref: '#/components/responses/ListOfAuditMessagesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/AuditMessagesManager/setLastProcessedId:
    post:
      tags:
        - AuditMessagesManager
      operationId: setLastProcessedId
      summary: |
        Set ID of last processed message for specified consumer.
      parameters:
        - $ref: '#/components/parameters/consumerName'
        - { name: lastProcessedId, in: query, schema: { type: integer }, description: "id of message to what consumer will be set",  required: true }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/AuditMessagesManager/createAuditerConsumer:
    post:
      tags:
        - AuditMessagesManager
      operationId: createAuditerConsumer
      summary: |
        Creates new auditer consumer with last processed id which equals current auditer log max id.
      parameters:
        - $ref: '#/components/parameters/consumerName'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/AuditMessagesManager/getAllAuditerConsumers:
    get:
      tags:
        - AuditMessagesManager
      operationId: getAllAuditerConsumers
      summary: |
        Get all auditer consumers as a map with key=value pairs like String(name)=Integer(lastProcessedId).
      responses:
        '200':
          description: map with key=value pairs like String(name)=Integer(lastProcessedId)
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/AuditMessagesManager/getLastMessageId:
    get:
      tags:
        - AuditMessagesManager
      operationId: getLastMessageId
      summary: |
        Get ID of last (newest) message in auditer logs.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/AuditMessagesManager/getAuditerMessagesCount:
    get:
      tags:
        - AuditMessagesManager
      operationId: getAuditerMessagesCount
      summary: |
        Get count of all messages stored in auditer logs.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/AuditMessagesManager/log:
    post:
      tags:
        - AuditMessagesManager
      operationId: auditMessagesManagerLog
      summary: |
        Log arbitrary auditer message/event to the audit log.
      parameters:
        -  { name: msg, in: query, schema: { type: string }, description: "Message to be logged", required: true }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'



  #################################################
  #                                               #
  # DatabaseManager                               #
  #                                               #
  #################################################

  /json/databaseManager/getCurrentDatabaseVersion:
    get:
      tags:
        - DatabaseManager
      operationId: getCurrentDatabaseVersion
      summary: Returns current database version, e.g. "3.1.55"
      responses:
        '200':
          $ref: '#/components/responses/StringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/databaseManager/getDatabaseDriverInformation:
    get:
      tags:
        - DatabaseManager
      operationId: getDatabaseDriverInformation
      summary: Returns current database driver info, e.g. "PostgreSQL JDBC Driver-42.2.8"
      responses:
        '200':
          $ref: '#/components/responses/StringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/databaseManager/getDatabaseInformation:
    get:
      tags:
        - DatabaseManager
      operationId: getDatabaseInformation
      summary: Returns current database info, e.g. "PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)"
      responses:
        '200':
          $ref: '#/components/responses/StringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/databaseManager/getTimeOfQueryPerformance:
    get:
      tags:
        - DatabaseManager
      operationId: getTimeOfQueryPerformance
      summary: Get time in ns "nanoseconds" of calling 1 simple update query to DB
      responses:
        '200':
          $ref: '#/components/responses/LongResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # ExtSourcesManager                             #
  #                                               #
  #################################################

  /json/extSourcesManager/createExtSource/es:
    post:
      tags:
        - ExtSourcesManager
      operationId: createExtSourceFromExtSourceObject
      summary: "Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored."
      responses:
        '200':
          $ref: '#/components/responses/ExtSourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: ExtSourceObject
              description: "input to createExtSourceFromExtSourceObject"
              type: object
              required:
                - extSource
              properties:
                extSource: { $ref: '#/components/schemas/ExtSource' }

  /urlinjsonout/extSourcesManager/createExtSource/n-t:
    post:
      tags:
        - ExtSourcesManager
      operationId: createExtSourceWithNameType
      summary: "Creates an external source."
      parameters:
        - $ref: '#/components/parameters/name'
        - name: type
          schema:
            type: string
          description: type of ExtSource
          required: true
          in: query
      responses:
        '200':
          $ref: '#/components/responses/ExtSourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/extSourcesManager/deleteExtSource:
    post:
      tags:
        - ExtSourcesManager
      operationId: deleteExtSource
      summary: "Delete an external source."
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/extSourcesManager/getExtSourceById:
    get:
      tags:
        - ExtSourcesManager
      operationId: getExtSourceById
      summary: Returns an external source by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ExtSourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/extSourcesManager/getExtSourceByName:
    get:
      tags:
        - ExtSourcesManager
      operationId: getExtSourceByName
      summary: Returns an external source by its name.
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/ExtSourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/extSourcesManager/getVoExtSources:
    get:
      tags:
        - ExtSourcesManager
      operationId: getVoExtSources
      summary: Returns the list of external sources associated with a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/extSourcesManager/getGroupExtSources:
    get:
      tags:
        - ExtSourcesManager
      operationId: getGroupExtSources
      summary: Returns the list of external sources associated with a GROUP.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/extSourcesManager/getExtSources:
    get:
      tags:
        - ExtSourcesManager
      operationId: getExtSources
      summary: Returns the list of all external sources.
      responses:
        '200':
          $ref: '#/components/responses/ListOfExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/extSourcesManager/addExtSource/v-s:
    post:
      tags:
        - ExtSourcesManager
      operationId: addExtSourceWithVoSource
      summary: Associate an external source definition with a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/sourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/extSourcesManager/addExtSource/g-s:
    post:
      tags:
        - ExtSourcesManager
      operationId: addExtSourceWithGroupSource
      summary: Associate an external source definition with a GROUP.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/sourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/extSourcesManager/removeExtSource/v-s:
    post:
      tags:
        - ExtSourcesManager
      operationId: removeExtSourceWithVoSource
      summary: Remove an association of an external source from a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/sourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/extSourcesManager/removeExtSource/g-s:
    post:
      tags:
        - ExtSourcesManager
      operationId: removeExtSourceWithGroupSource
      summary: Remove an association of an external source from a GROUP.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/sourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/extSourcesManager/loadExtSourcesDefinitions:
    get:
      tags:
        - ExtSourcesManager
      operationId: loadExtSourcesDefinitions
      summary: Loads ext source definitions from the configuration file and updates entries stored in the DB.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # UsersManager                                  #
  #                                               #
  #################################################

  /json/usersManager/getUserById:
    get:
      tags:
        - UsersManager
      operationId: getUserById
      summary: Returns user by its id
      description: Returns object representing the User
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getUserByExtSourceNameAndExtLogin:
    get:
      tags:
        - UsersManager
      operationId: getUserByExtSourceNameAndExtLogin
      summary: Returns user by its ExtSourceName and ExtLogin.
      description: Returns User found by its authentication data
      parameters:
        - $ref: '#/components/parameters/extLogin'
        - $ref: '#/components/parameters/extSourceName'
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getRichUserWithAttributes:
    get:
      tags:
        - UsersManager
      operationId: getRichUserWithAttributes
      summary: Returns user with attributes
      description: Returns object representing the User with attributes
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/RichUserResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getUserExtSources:
    get:
      tags:
        - UsersManager
      operationId: getUserExtSources
      summary: Gets list of all user's external sources.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfUserExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getGroupsWhereUserIsActive/facility:
    get:
      tags:
        - UsersManager
      operationId: getGroupsForFacilityWhereUserIsActive
      summary: Get list of groups of user on specified facility where use is active.
      description: |
        That means User is a VALID in the VO and the Group and groups are assigned to the facility.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getGroupsWhereUserIsActive/resource:
    get:
      tags:
        - UsersManager
      operationId: getGroupsForResourceWhereUserIsActive
      summary: Get list of groups of user on specified resource where use is active.
      description: |
        That means User is a VALID in the VO and the Group and groups are assigned to the resource.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/findUsers:
    get:
      tags:
        - UsersManager
      operationId: findUsers
      summary: Returns list of Users with attributes who matches the searchString, searching name, email, logins.
      parameters:
        - $ref: '#/components/parameters/searchString'
      responses:
        '200':
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/findRichUsers:
    get:
      tags:
        - UsersManager
      operationId: findRichUsers
      summary: Returns list of RichUsers with attributes who matches the searchString, searching name, email, logins.
      parameters:
        - $ref: '#/components/parameters/searchString'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getVosWhereUserIsMember:
    get:
      tags:
        - UsersManager
      operationId: getVosWhereUserIsMember
      summary: Returns list of VOs, where the user is a Member.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getVosWhereUserIsAdmin:
    get:
      tags:
        - UsersManager
      operationId: getVosWhereUserIsAdmin
      summary: Returns list of VOs, where the user is an Administrator.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getGroupsWhereUserIsAdmin/u:
    get:
      tags:
        - UsersManager
      operationId: getGroupsWhereUserIsAdmin
      summary: Returns list of Groups in Perun, where the User is a direct Administrator or he is a member of any group which is Administrator of some of these Groups.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getRichUserExtSources/u:
    get:
      tags:
        - UsersManager
      operationId: getRichUserExtSources
      summary: Gets list of all user's external sources with attributes.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichUserExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/usersManager/createAlternativePassword:
    post:
      tags:
        - UsersManager
      operationId: createAlternativePassword
      summary: Creates alternative password in external system.
      parameters:
        - $ref: '#/components/parameters/userId'
        - {name: description, schema: { type: string }, in: query, required: true}
        - {name: loginNamespace, schema: { type: string }, in: query, required: true}
        - {name: password, schema: { type: string }, in: query, required: true}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/usersManager/deleteAlternativePassword:
    post:
      tags:
        - UsersManager
      operationId: deleteAlternativePassword
      summary: Deletes alternative password in external system.
      parameters:
        - $ref: '#/components/parameters/userId'
        - {name: loginNamespace, schema: { type: string }, in: query, required: true}
        - {name: passwordId, schema: { type: string }, in: query, required: true}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/usersManager/removeUserExtSource:
    post:
      tags:
        - UsersManager
      operationId: removeUserExtSource
      summary: Remove user's external source. Persistent UserExtSources are not removed unless force param is present and set to true.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/userExtSourceId'
        - { name: force, description: "If true, use force deletion.", schema: { type: boolean },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # MembersManager                                #
  #                                               #
  #################################################

  /json/membersManager/getMemberById:
    get:
      tags:
        - MembersManager
      operationId: getMemberById
      summary: Returns Member by its id.
      description: Gets Member
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getRichMember:
    get:
      tags:
        - MembersManager
      operationId: getRichMember
      summary: Returns RichMember by member id.
      description: Get RichMember without attributes
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/RichMemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getRichMemberWithAttributes:
    get:
      tags:
        - MembersManager
      operationId: getRichMemberWithAttributes
      summary: Returns Member by its id.
      description: Get richMember with member/user attributes
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/RichMemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getMemberByUser:
    get:
      tags:
        - MembersManager
      operationId: getMemberByUser
      summary: Returns a Member specified by VO id and User id.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getMembersByUser:
    get:
      tags:
        - MembersManager
      operationId: getMembersByUser
      summary: Returns members for a user.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getMembers:
    get:
      tags:
        - MembersManager
      operationId: getMembers
      summary: Returns members of a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: status, in: query, required: false, schema: { $ref: '#/components/schemas/VoMemberStatuses'}, description: 'optional status'}
      responses:
        200:
          $ref: '#/components/responses/ListOfMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/findMembersInVo:
    get:
      tags:
        - MembersManager
      operationId: findMembersInVo
      summary: Searches for members in a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/searchString'
      responses:
        '200':
          $ref: '#/components/responses/ListOfMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getMemberByExtSourceNameAndExtLogin:
    get:
      tags:
        - MembersManager
      operationId: getMemberByExtSourceNameAndExtLogin
      summary: Searches for members in a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/extLogin'
        - $ref: '#/components/parameters/extSourceName'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  #################################################
  #                                               #
  # FacilitiesManager                             #
  #                                               #
  #################################################

  /json/facilitiesManager/getFacilityById:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityById
      summary: Returns Facility with specified id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityByName:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityByName
      summary: Returns Facility with specified name.
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedUsers:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedUsers
      summary: Lists all users assigned to facility containing resources where service is assigned.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - name: service
          description: "id of Service"
          schema:
            type: integer
          in: query
          required: false
      responses:
        '200':
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getRichFacilities:
    get:
      tags:
        - FacilitiesManager
      operationId: getRichFacilities
      summary: Gets all possible rich facilities with all their owners.
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilitiesByDestination:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesByDestination
      summary: Searches for the Facilities by theirs destination.
      parameters:
        - $ref: '#/components/parameters/destinationName'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /json/facilitiesManager/getFacilitiesByAttribute:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesByAttribute
      summary: Returns all facilities that have the attribute 'attributeName' with the string value 'attributeValue'.
      description: Searching only def and opt attributes. Large attributes are not supported.
      parameters:
        - $ref: '#/components/parameters/attributeName'
        - $ref: '#/components/parameters/attributeValue'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilities:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllFacilities
      summary: Get all facilities.
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilitiesCount:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesCount
      summary: Gets count of all facilities.
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getOwners:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityOwners
      summary: Returns owners of a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfOwnersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addOwner:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityOwner
      summary: Adds owner of a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/ownerId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeOwner:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityOwner
      summary: Removes owner from a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/ownerId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/getAllowedVos:
    post:
      tags:
        - FacilitiesManager
      operationId: getAllowedVos
      summary: Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAllowedGroups:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllowedGroups
      summary: Get all assigned groups on Facility, optionally filtered by Vo or Service or both.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: vo, description: "id of Vo", schema: { type: integer },  in: query, required: false }
        - { name: service, description: "id of Service", schema: { type: integer },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAllowedRichGroupsWithAttributes:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllowedRichGroupsWithAttributes
      summary: Get all assigned RichGroups on Facility with specified set of attributes, optionally filtered by Vo or Service or both.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attrNames'
        - { name: vo, description: "id of Vo", schema: { type: integer },  in: query, required: false }
        - { name: service, description: "id of Service", schema: { type: integer },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedResources:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedResourcesForFacility
      summary: Returns all resources assigned to a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedRichResources:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedRichResourcesForFacility
      summary: Returns all rich resources assigned to a facility with VO property filled.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/createFacility:
    post:
      tags:
        - FacilitiesManager
      operationId: createFacility
      summary: Creates a facility. Caller is automatically set as facility manager.
      parameters:
        - $ref: '#/components/parameters/name'
        - { name: description, required: false, in: query, schema: { type: string }, description: "optional description of a facility" }
      responses:
        '200':
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/deleteFacility:
    post:
      tags:
        - FacilitiesManager
      operationId: deleteFacility
      summary: Deletes a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/updateFacility:
    post:
      tags:
        - FacilitiesManager
      operationId: updateFacility
      summary: Updates a facility.
      responses:
        '200':
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateFacility
              description: "input to updateFacility"
              type: object
              required:
                - facility
              properties:
                facility: { $ref: '#/components/schemas/Facility' }

  /json/facilitiesManager/getOwnerFacilities:
    get:
      tags:
        - FacilitiesManager
      operationId: getOwnerFacilities
      summary: Returns list of all facilities owned by the owner.
      parameters:
        - $ref: '#/components/parameters/ownerId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHosts:
    get:
      tags:
        - FacilitiesManager
      operationId: getHosts
      summary: Returns Hosts of a Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfHostsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHostById:
    get:
      tags:
        - FacilitiesManager
      operationId: getHostById
      summary: Returns a host by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/HostResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHostsByHostname:
    get:
      tags:
        - FacilitiesManager
      operationId: getHostsByHostname
      summary: Returns hosts by hostname. (from all facilities)
      parameters:
        - { name: hostname, required: true, in: query, schema: { type: string }, description: "name of a host" }
      responses:
        '200':
          $ref: '#/components/responses/HostResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityForHost:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityForHost
      summary: Return facility which has the host.
      parameters:
        - $ref: '#/components/parameters/hostId'
      responses:
        '200':
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHostsCount:
    get:
      tags:
        - FacilitiesManager
      operationId: getHostsCount
      summary: Count hosts of Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addHosts:
    post:
      tags:
        - FacilitiesManager
      operationId: addHosts
      summary: Adds hosts to the Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/hostnames'
      responses:
        '200':
          $ref: '#/components/responses/ListOfHostsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeHosts:
    post:
      tags:
        - FacilitiesManager
      operationId: removeHosts
      summary: Remove hosts from a Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/listOfHostIds'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addHost:
    post:
      tags:
        - FacilitiesManager
      operationId: addHost
      summary: Adds a host to the Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: hostname, description: "DNS name of host", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/ListOfHostsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeHost:
    post:
      tags:
        - FacilitiesManager
      operationId: removeHost
      summary: Removes a host.
      parameters:
        - $ref: '#/components/parameters/hostId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedFacilities/service:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedFacilitiesByService
      summary: Get facilities where the service is defined..
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedFacilities/group:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedFacilitiesByGroup
      summary: Get facilities which are assigned to a Group (via resource).
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedFacilities/member:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedFacilitiesByMember
      summary: Get facilities which have the member access on.
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedFacilities/user:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedFacilitiesByUser
      summary: et facilities which have the user access on.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addAdmin/user:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityAdminUser
      summary: Adds a user as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addAdmin/group:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityAdminGroup
      summary: Adds a group as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /urlinjsonout/facilitiesManager/removeAdmin/user:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityAdminUser
      summary: Removes a user as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeAdmin/group:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityAdminGroup
      summary: Removes a group as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /json/facilitiesManager/getAdmins:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityAdminUsers
      description: |
          Get list of all facility administrators for supported role and given facility.
          If onlyDirectAdmins is true, return only direct admins of the group for supported role.
          Supported roles: FacilityAdmin
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: onlyDirectAdmins, schema: { type: boolean }, in: query, required: true, description: "if true, get only direct facility administrators (if false, get both direct and indirect)"}
      responses:
        '200':
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAdminGroups:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityAdminGroups
      summary: Get all Facility group admins.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilitiesWhereUserIsAdmin:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesWhereUserIsAdmin
      summary: Returns list of Facilities, where the user is an Administrator.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilitiesByHostName:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesByHostName
      summary: Return all facilities where exists host with the specific hostname
      parameters:
        - { name: hostname, schema: { type: string }, in: query, required: true, description: "specific hostname"}
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAllowedUsers/v-f-s:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllowedUsersOfFacility
      summary: Return all users which can use this facility
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: vo, schema: { type: integer }, in: query, description: "VO id, if provided, filter out users who aren't in specific VO"}
        - { name: service, schema: { type: integer }, in: query, description: "Service id, if provided, filter out users who aren't allowed to use the service on the facility"}
      responses:
        '200':
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getAllowedUsers - another future versions

  /urlinjsonout/facilitiesManager/copyOwners:
    post:
      tags:
        - FacilitiesManager
      operationId: copyOwners
      summary: Copy owners from source facility to destination facility. You must be facility manager of both.
      parameters:
        - { name: srcFacility, schema: { type: integer }, in: query, required: true, description: "source facility id"}
        - { name: destFacility, schema: { type: integer }, in: query, required: true, description: "destination facility id"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/copyManagers:
    post:
      tags:
        - FacilitiesManager
      operationId: copyManagers
      summary: Copy managers from source facility to destination facility. You must be facility manager of both.
      parameters:
        - { name: srcFacility, schema: { type: integer }, in: query, required: true, description: "source facility id"}
        - { name: destFacility, schema: { type: integer }, in: query, required: true, description: "destination facility id"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/copyAttributes:
    post:
      tags:
        - FacilitiesManager
      operationId: copyAttributes
      summary: Copy attributes (settings) from source facility to destination facility. You must be facility manager of both.
      parameters:
        - { name: srcFacility, schema: { type: integer }, in: query, required: true, description: "source facility id"}
        - { name: destFacility, schema: { type: integer }, in: query, required: true, description: "destination facility id"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityContactGroups/owner:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityContactGroupsForOwner
      summary: Get list of contact groups for the Owner.
      parameters:
        - $ref: '#/components/parameters/ownerId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfContactGroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityContactGroups/user:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityContactGroupsForUser
      summary: Get list of contact groups for the User.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfContactGroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityContactGroups/group:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityContactGroupsForGroup
      summary: Get list of contact groups for the Group.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfContactGroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityContactGroups/facility:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityContactGroupsForFacility
      summary: Get list of contact groups for the Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfContactGroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityContactGroup:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityContactGroup
      summary: Get contact group for the facility and the name.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: name, schema: { type: string }, in: query, required: true, description: "name of the contact group"}
      responses:
        '200':
          $ref: '#/components/responses/ContactGroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAllContactGroupNames:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllContactGroupNames
      summary: Get all exist contact group names.
      responses:
        '200':
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/addFacilityContacts:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityContacts
      summary: Add all contacts in list of facilities contact groups
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAddFacilityContacts
              description: "input to addFacilityContacts"
              type: object
              required:
                - contactGroupsToAdd
              properties:
                contactGroupsToAdd:
                  type: array
                  items:
                    $ref: '#/components/schemas/ContactGroup'

  /json/facilitiesManager/addFacilityContact:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityContact
      summary: Add all contacts in the contact group
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAddFacilityContact
              description: "input to addFacilityContact"
              type: object
              required:
                - contactGroupToAdd
              properties:
                contactGroupToAdd: { $ref: '#/components/schemas/ContactGroup' }

  /json/facilitiesManager/removeFacilityContacts:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityContacts
      summary: Remove all contacts in list of facilities contact groups
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputRemoveFacilityContacts
              description: "input to removeFacilityContacts"
              type: object
              required:
                - contactGroupsToRemove
              properties:
                contactGroupsToRemove:
                  type: array
                  items:
                    $ref: '#/components/schemas/ContactGroup'

  /json/facilitiesManager/removeFacilityContact:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityContact
      summary: Remove all contacts in the contact group
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputRemoveFacilityContact
              description: "input to removeFacilityContact"
              type: object
              required:
                - contactGroupToRemove
              properties:
                contactGroupToRemove: { $ref: '#/components/schemas/ContactGroup' }

  /json/facilitiesManager/getAssignedSecurityTeams:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedSecurityTeams
      summary: Return assigned security teams for specific facility
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfSecurityTeamsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/assignSecurityTeam:
    post:
      tags:
        - FacilitiesManager
      operationId: assignSecurityTeam
      summary: Assign given security team to given facility (means the facility trusts the security team)
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: securityTeam, schema: { type: integer }, in: query, required: true, description: "SecurityTeam id"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeSecurityTeam:
    post:
      tags:
        - FacilitiesManager
      operationId: removeSecurityTeam
      summary: Remove (Unassign) given security team from given facility
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: securityTeam, schema: { type: integer }, in: query, required: true, description: "SecurityTeam id"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/setBan:
    post:
      tags:
        - FacilitiesManager
      operationId: setFacilityBan
      summary: Set ban for user on facility.
      responses:
        '200':
          $ref: '#/components/responses/BanOnFacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetBanForUserOnFacility
              description: "input to setBanForUserOnFacility"
              type: object
              required:
                - banOnFacility
              properties:
                banOnFacility: { $ref: '#/components/schemas/BanOnFacility' }

  /json/facilitiesManager/getBanById:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityBanById
      summary: Get Ban for user on facility by it's id.
      parameters:
        - { name: banId, schema: { type: integer }, in: query, required: true, description: "BanOnFacility id"}
      responses:
        '200':
          $ref: '#/components/responses/BanOnFacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getBan:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityBan
      summary: Get ban by userId and facilityId.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/BanOnFacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getBansForUser:
    get:
      tags:
        - FacilitiesManager
      operationId: getBansForUser
      summary: Get all bans for user on any facility.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfBanOnFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getBansForFacility:
    get:
      tags:
        - FacilitiesManager
      operationId: getBansForFacility
      summary: Get all bans for user on the facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfBanOnFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/updateBan:
    post:
      tags:
        - FacilitiesManager
      operationId: updateFacilityBan
      summary: Update existing ban (description, validation timestamp)
      responses:
        '200':
          $ref: '#/components/responses/BanOnFacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateBanForFacility
              description: "input to updateBanForFacility"
              type: object
              required:
                - banOnFacility
              properties:
                banOnFacility: { $ref: '#/components/schemas/BanOnFacility' }

  /urlinjsonout/facilitiesManager/removeBan/byId:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityBanById
      summary: Remove specific ban by it's id.
      parameters:
        - { name: banId, schema: { type: integer }, in: query, required: true, description: "BanOnFacility id"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeBan/byUserIdFacilityId:
    post:
      tags:
        - FacilitiesManager
      operationId: removeBanByUserIdFacilityId
      summary: Remove specific ban by userId and facilityId.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # OwnersManager                                 #
  #  (completely described)                       #
  #################################################

  /json/ownersManager/createOwner:
    post:
      tags:
        - OwnersManager
      operationId: createOwner
      summary: Creates a new owner.
      responses:
        '200':
          $ref: '#/components/responses/OwnerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCreateOwner
              description: "input to createOwner, no id, numeric ownerType instead of string type"
              type: object
              required:
                - name
                - contact
                - ownerType
              properties:
                name: { type: string, description: "name of contact, e.g. John Doe or NSA"}
                contact: { type: string, description: "email address"}
                ownerType:
                  type: integer
                  enum: [0, 1]
                  description: "0 - technical, 1 - administrative"

  /urlinjsonout/ownersManager/deleteOwner:
    post:
      tags:
        - OwnersManager
      operationId: deleteOwner
      summary: Deletes Owner specified by id. Returns null.
      responses:
        '200':
          $ref: '#/components/responses/OwnerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      parameters:
        - $ref: '#/components/parameters/ownerId'

  /json/ownersManager/getOwnerById:
    get:
      tags:
        - OwnersManager
      operationId: getOwnerById
      summary: Returns Owner by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/OwnerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/ownersManager/getOwners:
    get:
      tags:
        - OwnersManager
      operationId: getAllOwners
      summary: Returns all owners.
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ListOfOwnersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  #################################################
  #                                               #
  # GroupsManager                                 #
  #                                               #
  #################################################

  /json/groupsManager/getGroupById:
    get:
      tags:
        - GroupsManager
      operationId: getGroupById
      summary: Returns a group by id.
      description: Throws GroupNotExistsException when the group doesn't exist.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/GroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/getGroupByName:
    get:
      tags:
        - GroupsManager
      operationId: getGroupByName
      description: |
        Returns a group by VO and Group name.
        IMPORTANT: need to use full name of group (ex. 'toplevel:a:b', not the shortname which is in this example 'b')
        Throws GroupNotExistsException when the group doesn't exist.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/GroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/isGroupMember:
    get:
      tags:
        - GroupsManager
      operationId: isGroupMember
      summary: Return true if Member is member of the Group.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/BooleanResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/getMemberGroups:
    get:
      tags:
        - GroupsManager
      operationId: getMemberGroups
      summary: Returns groups for a member.
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/getAllGroups:
    get:
      tags:
        - GroupsManager
      operationId: getAllGroups
      summary: Returns all groups in a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/getAllRichSubGroupsWithAttributesByNames:
    get:
      tags:
        - GroupsManager
      operationId: getAllRichSubGroupsWithGroupAttributesByNames
      summary: Returns all AllRichSubGroups from parent group containing selected attributes (all level subgroups).
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNamesOptional'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/createGroup/v-n-d:
    post:
      tags:
        - GroupsManager
      operationId: createGroupWithVoNameDescription
      description: Creates a new group in the specific VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/groupName'
        - $ref: '#/components/parameters/groupDescription'
      responses:
        '200':
          $ref: '#/components/responses/GroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/createGroup/pg-n-d:
    post:
      tags:
        - GroupsManager
      operationId: createGroupWithParentGroupNameDescription
      description: Creates a subgroup of a group.
      parameters:
        - { name: parentGroup,
            description: "Parent Group id",
            schema: {
              type: integer
            },
            in: query,
            required: true
        }
        - $ref: '#/components/parameters/groupName'
        - $ref: '#/components/parameters/groupDescription'
      responses:
        '200':
          $ref: '#/components/responses/GroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/deleteGroups:
    post:
      tags:
        - GroupsManager
      operationId: deleteGroups
      summary: Forcefully deletes a list of groups (remove all group members, remove group from resources).
      parameters:
        - $ref: '#/components/parameters/groupIds'
        - { name: forceDelete,
            description: "If true use force delete",
            schema: {
              type: boolean
            },
            in: query,
            required: true
        }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/moveGroup/dg-mg:
    post:
      tags:
        - GroupsManager
      operationId: moveGroupWithDestinationGroupMovingGroup
      summary: Moves "movingGroup" (including subGroups) under "destinationGroup" as subGroup within same Vo. Indirect group members are also processed during move operation.
      parameters:
        - { name: destinationGroup,
            description: "id of Group to have 'movingGroup' as subGroup",
            schema: {
              type: integer
            },
            in: query,
            required: false
        }
        - { name: movingGroup,
            description: "id of Group to be moved under 'destinationGroup'",
            schema: {
              type: integer
            },
            in: query,
            required: true
        }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/addMembers:
    post:
      tags:
        - GroupsManager
      operationId: addMembers
      summary: Adds members to a group. If already a member of the group, the member will be skipped. Non-empty list of members expected, if empty, no member will be added.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/memberIds'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/removeMembers:
    post:
      tags:
        - GroupsManager
      operationId: removeMembers
      summary: Removes members from a group. Non-empty list of members expected. In case of empty list, no member is removed from the group. If member is not in the group or the membership is indirect, it is skipped without a warning but the rest of the members are processed.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/memberIds'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/createGroupUnion:
    post:
      tags:
        - GroupsManager
      operationId: createGroupUnion
      summary: Create union of two groups, where "operandGroup" is technically set as subgroup of "resultGroup". Members from "operandGroup" are added to "resultGroup" as INDIRECT members. Union is honored also in all group member changing operations.
      parameters:
        - $ref: '#/components/parameters/resultGroupId'
        - $ref: '#/components/parameters/operandGroupId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/getGroupUnions:
    get:
      tags:
        - GroupsManager
      operationId: getGroupUnions
      summary: Return all operand groups for specified result groups (all INCLUDED groups). If "reverseDirection" is TRUE than return all result groups for specified operand group (where group is INCLUDED).
      parameters:
         - $ref: '#/components/parameters/groupId'
         - { name: reverseDirection,
             description: "FALSE (default) return INCLUDED groups / TRUE = return groups where INCLUDED",
             schema: {
               type: boolean
             },
             in: query,
             required: true
         }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/groupsManager/removeGroupUnion:
    post:
      tags:
        - GroupsManager
      operationId: removeGroupUnion
      summary: Removes union of two groups, when "operandGroup" is technically removed from subgroups of "resultGroup". Members from "operandGroup" are removed from "resultGroup" if they were INDIRECT members sourcing from this group only.
      parameters:
        - $ref: '#/components/parameters/resultGroupId'
        - $ref: '#/components/parameters/operandGroupId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # ResourceManager                               #
  #                                               #
  #################################################

  /json/resourcesManager/getResourceById:
    get:
      tags:
        - ResourcesManager
      operationId: getResourceById
      summary: Returns a resource by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourceByName:
    get:
      tags:
        - ResourcesManager
      operationId: getResourceByName
      summary: Returns resource by its name, Vo id and Facility id.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/ResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getRichResourceById:
    get:
      tags:
        - ResourcesManager
      operationId: getRichResourceById
      summary: Returns RichResource by id (also containing facility and VO inside).
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/RichResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/createResource:
    post:
      tags:
        - ResourcesManager
      operationId: createResource
      summary: Creates a new resource.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/name'
        - { name: description, schema: { type: string }, in: query, required: false, description: 'optional resource description' }
      responses:
        '200':
          $ref: '#/components/responses/ResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/copyResource:
    post:
      tags:
        - ResourcesManager
      operationId: copyResource
      summary: |
                Copy "template" settings from user's another existing resource and create new resource with this template.
                The settings are attributes, services, tags (if exists), groups and their members (if the resources are from the same VO and withGroups is true)
                Template Resource can be from any of user's facilities.
      responses:
        '200':
          $ref: '#/components/responses/ResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCopyResource
              description: "input to copyResource"
              type: object
              required:
                - templateResource
                - destinationResource
                - withGroups
              properties:
                templateResource: { $ref: '#/components/schemas/Resource' }
                destinationResource: { $ref: '#/components/schemas/Resource' }
                withGroups: { type: boolean, description: 'if copy the resource with group' }

  /json/resourcesManager/updateResource:
    post:
      tags:
        - ResourcesManager
      operationId: updateResource
      summary: Updates a resource.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateResource
              description: "input to updateResource"
              type: object
              required:
                - resource
              properties:
                resource: { $ref: '#/components/schemas/Resource' }

  /urlinjsonout/resourcesManager/deleteResource:
    post:
      tags:
        - ResourcesManager
      operationId: deleteResource
      summary: Deletes a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getFacility:
    get:
      tags:
        - ResourcesManager
      operationId: getFacility
      summary: Get facility which belongs to a specific resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getVo:
    get:
      tags:
        - ResourcesManager
      operationId: getVo
      summary: Returns Vo which is tied to a specific resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAllowedMembers:
    get:
      tags:
        - ResourcesManager
      operationId: getAllowedMembers
      summary: Returns all members assigned to the resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAllowedUsers:
    get:
      tags:
        - ResourcesManager
      operationId: getAllowedUsersOfResource
      summary: Returns all users assigned to the resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignGroupToResource:
    post:
      tags:
        - ResourcesManager
      operationId: assignGroupToResource
      summary: Assigns a group to a resource. Check if attributes for each member from group are valid. Fill members' attributes with missing value.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignGroupsToResource:
    post:
      tags:
        - ResourcesManager
      operationId: assignGroupsToResource
      summary: Assigns groups to a resource. Check if attributes for each member from groups are valid. Fill members' attributes with missing values.
      parameters:
        - $ref: '#/components/parameters/groupIds'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignGroupToResources:
    post:
      tags:
        - ResourcesManager
      operationId: assignGroupToResources
      summary: Assigns a group to resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceIds'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeGroupFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeGroupFromResource
      summary: Remove a group from a resource. After removing, check attributes and fix them if it is needed.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeGroupsFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeGroupsFromResource
      summary: Remove groups from a resource. After removing, check attributes and fix them if it is needed.
      parameters:
        - $ref: '#/components/parameters/groupIds'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeGroupFromResources:
    post:
      tags:
        - ResourcesManager
      operationId: removeGroupFromResources
      summary: Remove a group from resource. After removing, check attributes and fix them if it is needed.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceIds'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedGroups:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedGroups
      summary: List all groups associated with the resource and optionally a member.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - { name: member, required: false, schema: { type: integer}, in: query, description: 'optional member id' }
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedResources/g:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedResourcesWithGroup
      summary: List all resources associated with a group.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedResources/m:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedResourcesWithMember
      summary: List all resources associated with a member's group.
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedRichResources/s-m:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedRichResourcesWithMemberService
      summary: Get all rich resources where the service and the member are assigned with facility property filled.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedRichResources/m:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedRichResourcesWithMember
      summary: List all rich resources associated with a member's group.
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedRichResources/g:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedRichResourcesWithGroup
      summary: List all rich resources associated with a group.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedMembers:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedMembers
      summary: Returns all members assigned to the resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedRichMembers:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedRichMembers
      summary: Returns all members assigned to the resource as RichMembers.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/addAdmin/r-u:
    post:
      tags:
        - ResourcesManager
      operationId: addAdminToUser
      summary: Adds a Resource admin.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/addAdmin/r-g:
    post:
      tags:
        - ResourcesManager
      operationId: addAdminToGroup
      summary: Adds a group administrator to the Resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeAdmin/r-u:
    post:
      tags:
        - ResourcesManager
      operationId: removeUserAdminResource
      summary: Removes a Resource admin.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeAdmin/r-g:
    post:
      tags:
        - ResourcesManager
      operationId: removeGroupAdminResource
      summary: Removes a group administrator of the Resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
            $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAdmins:
    get:
      tags:
        - ResourcesManager
      operationId: getAdmins
      summary: Get list of all resource administrators for supported role and given resource.
      description: If onlyDirectAdmins is == true, return only direct admins of the group for supported role. Supported roles are ResourceAdmin, VOAdmin.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - { name: onlyDirectAdmins, required: true, schema: { type: boolean}, in: query, description: 'boolean if true, get only direct resource administrators (if false, get both direct and indirect)' }
      responses:
        '200':
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAdminGroups:
    get:
      tags:
        - ResourcesManager
      operationId: getAdminGroups
      summary: Get all Resource group admins.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /json/resourcesManager/getRichAdmins:
    get:
      tags:
        - ResourcesManager
      operationId: getRichAdmins
      summary: |
        Get list of all richUser administrators for the resource and supported role with specific attributes.
        Supported roles: ResourceAdmin, VOAdmin
        If "onlyDirectAdmins" is true, return only direct admins of the resource for supported role with specific attributes.
        If "allUserAttributes" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - name: specificAttributes
          description: 'list of specified attributes which are needed in object richUser'
          schema:
            type: array
            items:
              type: string
          in: query
          required: true
        - { name: allUserAttributes, required: true, schema: { type: boolean}, in: query, description: 'if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)' }
        - { name: onlyDirectAdmins, required: true, schema: { type: boolean}, in: query, description: 'if == true, get only direct resource administrators (if false, get both direct and indirect)' }
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesWhereUserIsAdmin:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesWhereUserIsAdmin
      summary: Returns list of Resources for specified VO and Facility, where the user is an Administrator.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesWhereUserIsAdmin/group:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesWhereGroupIsAdmin
      summary: Returns list of Resources for specified VO and Facility, where the group is an Administrator.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesWhereUserIsAdmin/fromVo:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesFromVoWhereUserIsAdmin
      summary: Returns list of Resources for specified VO, where the user is an Administrator.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesWhereUserIsAdmin/all:
    get:
      tags:
        - ResourcesManager
      operationId: getAllResourcesWhereUserIsAdmin
      summary: Returns list of Resources, where the user is an Administrator.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignService:
    post:
      tags:
        - ResourcesManager
      operationId: assignService
      summary: Assigns service to resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignServicesPackage:
    post:
      tags:
        - ResourcesManager
      operationId: assignServicesPackage
      summary: Assign all services from a services package to a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/servicesPackageId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeService:
    post:
      tags:
        - ResourcesManager
      operationId: removeService
      summary: Removes a service from a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeServicesPackage:
    post:
      tags:
        - ResourcesManager
      operationId: removeServicesPackage
      summary: Remove from resource all services from services package.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/servicesPackageId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResources:
    get:
      tags:
        - ResourcesManager
      operationId: getResources
      summary: Get all VO resources.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getRichResources:
    get:
      tags:
        - ResourcesManager
      operationId: getRichResources
      summary: Get all VO rich resources.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesCount/vo:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesCountForVo
      summary: Returns number of VO resources
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesCount/all:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesCountForAll
      summary: Gets count of all users.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/deleteAllResources:
    post:
      tags:
        - ResourcesManager
      operationId: deleteAllResources
      summary: Deletes all VO resources
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAllowedResources:
    get:
      tags:
        - ResourcesManager
      operationId: getAllowedResources
      summary: Get all resources which have the member access on.
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/createResourceTag/resourceTag:
    post:
      tags:
        - ResourcesManager
      operationId: createResourceTagWithResourceTag
      summary: Create new resource tag in VO
      responses:
        '200':
          $ref: '#/components/responses/ResourceTagResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCreateResourceTagWithResourceTag
              description: "input to createResourceTagWithResourceTag"
              type: object
              required:
                - resourceTag
                - vo
              properties:
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }
                vo: { type: integer, description: 'vo id' }

  /urlinjsonout/resourcesManager/createResourceTag/tagName:
    post:
      tags:
        - ResourcesManager
      operationId: createResourceTagWithTagName
      summary: Create new resource tag defined by tag name in VO
      parameters:
        - { name: tagName, required: true, description: "tagName", schema: { type: string },  in: query }
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ResourceTagResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/updateResourceTag:
    post:
      tags:
        - ResourcesManager
      operationId: updateResourceTag
      summary: Update resource tag name by it's id and VO_ID
      responses:
        '200':
          $ref: '#/components/responses/ResourceTagResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateResourceTag
              description: "input to updateResourceTag"
              type: object
              required:
                - resourceTag
              properties:
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /json/resourcesManager/deleteResourceTag:
    post:
      tags:
        - ResourcesManager
      operationId: deleteResourceTag
      summary: Delete resource tag by it's id and VO_ID
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputDeleteResourceTag
              description: "input to deleteResourceTag"
              type: object
              required:
                - resourceTag
              properties:
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /urlinjsonout/resourcesManager/deleteAllResourcesTagsForVo:
    post:
      tags:
        - ResourcesManager
      operationId: deleteAllResourcesTagsForVo
      summary: Delete all resources tags of VO
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/assignResourceTagToResource:
    post:
      tags:
        - ResourcesManager
      operationId: assignResourceTagToResource
      summary: Assigns ResourceRag to resource. The ResourceTag must contain its id, voId and tagName.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAssignResourceTagToResource
              description: "input to assignResourceTagToResource"
              type: object
              required:
                - resource
                - resourceTag
              properties:
                resource: { type: integer, description: 'resource id' }
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /json/resourcesManager/removeResourceTagFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeResourceTagFromResource
      summary: Removes ResourceRag from a resource. The ResourceTag must contain its id, voId and tagName.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputRemoveResourceTagFromResource
              description: "input to removeResourceTagFromResource"
              type: object
              required:
                - resource
                - resourceTag
              properties:
                resource: { type: integer, description: 'resource id' }
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /urlinjsonout/resourcesManager/removeAllResourcesTagFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeAllResourceTagsFromResource
      summary: Removes all resources tags from a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAllResourcesByResourceTag:
    post:
      tags:
        - ResourcesManager
      operationId: getAllResourcesByResourceTag
      summary: Get all resources with the specific tag assigned.
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputGetAllResourcesByResourceTag
              description: "input to getAllResourcesByResourceTag"
              type: object
              required:
                - resourceTag
              properties:
                resource: { type: integer, description: 'resource id' }
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /json/resourcesManager/getAllResourcesTagsForVo:
    get:
      tags:
        - ResourcesManager
      operationId: getAllResourcesTagsForVo
      summary: Gets all resource tags of VO.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourceTagsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAllResourcesTagsForResource:
    get:
      tags:
        - ResourcesManager
      operationId: getAllResourcesTagsForResource
      summary: Gets all resource tags of Resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourceTagsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedServices:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedServicesToResource
      summary: List all services associated with the resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/setBan:
    post:
      tags:
        - ResourcesManager
      operationId: setResourceBan
      summary: Set ban for member on resource.
      responses:
        '200':
          $ref: '#/components/responses/BanOnResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetBan
              description: "input to setBan"
              type: object
              required:
                - banOnResource
              properties:
                banOnResource: { $ref: '#/components/schemas/BanOnResource' }

  /json/resourcesManager/getBanById:
    get:
      tags:
        - ResourcesManager
      operationId: getResourceBanById
      summary: Get Ban for member on resource by it's id.
      parameters:
        - { name: banId, required: true, description: "BanOnResource id", schema: { type: integer },  in: query }
      responses:
        '200':
          $ref: '#/components/responses/BanOnResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getBan:
    get:
      tags:
        - ResourcesManager
      operationId: getResourceBan
      summary: Get ban by memberId and resource id.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/BanOnResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getBansForMember:
    get:
      tags:
        - ResourcesManager
      operationId: getBansForMember
      summary: Get all bans for member on any resource.
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfBanOnResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getBansForResource:
    get:
      tags:
        - ResourcesManager
      operationId: getBansForResource
      summary: Get all bans for members on the resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfBanOnResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/updateBan:
    post:
      tags:
        - ResourcesManager
      operationId: updateResourceBan
      summary: Update existing ban (description, validation timestamp)
      responses:
        '200':
          $ref: '#/components/responses/BanOnResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateBan
              description: "input to updateBan"
              type: object
              required:
                - banOnResource
              properties:
                banOnResource: { $ref: '#/components/schemas/BanOnResource' }

  /urlinjsonout/resourcesManager/removeBan/id:
    post:
      tags:
        - ResourcesManager
      operationId: removeResourceBanById
      summary: Remove specific ban by it's id.
      parameters:
        - { name: banId, required: true, description: "BanOnResource id", schema: { type: integer },  in: query }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeBan/member-resource-id:
    post:
      tags:
        - ResourcesManager
      operationId: removeBanByMemberAndResource
      summary: Remove specific ban by memberId and resourceId.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/addResourceSelfServiceUser:
    post:
      tags:
        - ResourcesManager
      operationId: addResourceSelfServiceUser
      summary: Sets ResourceSelfService role to given user for given resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/addResourceSelfServiceGroup:
    post:
      tags:
        - ResourcesManager
      operationId: addResourceSelfServiceGroup
      summary: Sets ResourceSelfService role to given group for given resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeResourceSelfServiceUser:
    post:
      tags:
        - ResourcesManager
      operationId: removeResourceSelfServiceUser
      summary: Unset ResourceSelfService role to given user for given resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeResourceSelfServiceGroup:
    post:
      tags:
        - ResourcesManager
      operationId: removeResourceSelfServiceGroup
      summary: Unset ResourceSelfService role to given group for given resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  #################################################
  #                                               #
  # VosManager                                    #
  #                                               #
  #################################################

  /json/vosManager/getVos:
    get:
      tags:
        - VosManager
      operationId: getMyVos
      summary: Return list of all VOs the caller is associated with.
      responses:
        '200':
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getAllVos:
    get:
      tags:
        - VosManager
      operationId: getAllVos
      summary: Return list of all VOs in Perun.
      responses:
        '200':
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/deleteVo:
    post:
      tags:
        - VosManager
      operationId: deleteVo
      summary: Deletes a VO. If force == true then VO is deleted including members, groups and resources.
        If force == false or null only empty VO is deleted or exception is thrown.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: force, description: "Force must be true", schema: { type: boolean },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/createVo/withVo:
    post:
      tags:
        - VosManager
      operationId: createVoWithVo
      summary: |
        Creates new VO. Caller is automatically set as VO manager.
        Vo Object must contain:
        name - lenght can be no more than 128 characters
        shortName - can contain only a-z, A-Z, 0-9, '.', '-', '_' and cannot be longer than 32 characters.
        Other parameters are ignored.
        @exampleParam vo { "name" : "My testing VO" , "shortName" : "test_vo" }
      responses:
        '200':
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCreateVoWithVo
              description: "input to createVoWithVo"
              type: object
              required:
                - vo
              properties:
                vo: { $ref: '#/components/schemas/Vo' }

  /urlinjsonout/vosManager/createVo/withName:
    post:
      tags:
        - VosManager
      operationId: createVoWithName
      summary: Creates new VO. Caller is automatically set as VO manager.
      parameters:
        - { name: name, description: "name - length can be no more than 128 characters", schema: { type: string },  in: query, required: true }
        - { name: shortName, description: "shortName - can contain only a-z, A-Z, 0-9, '.', '-', '_' and cannot be longer than 32 characters", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/updateVo:
    post:
      tags:
        - VosManager
      operationId: updateVo
      summary: Updates a VO. Only name parameter is updated. VO to updated is determined by id parameter of passed VO object.
      responses:
        '200':
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateVo
              description: "input to updateVo"
              type: object
              required:
                - vo
              properties:
                vo: { $ref: '#/components/schemas/Vo' }

  /json/vosManager/getVoByShortName:
    get:
      tags:
        - VosManager
      operationId: getVoByShortName
      summary: Returns a VO by its short name.
      parameters:
        - { name: shortName, description: "short name of Vo", schema: { type: string },  in: query }
      responses:
        '200':
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getVoById:
    get:
      tags:
        - VosManager
      operationId: getVoById
      summary: Returns a virtual organization by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/findCandidates:
    get:
      tags:
        - VosManager
      operationId: findCandidates
      summary: |
        Find candidates for VO. Candidates can be used to create new members. Candidates are searched
        in VOs external sources (if available). Candidates, which are already members of VO are never
        returned even if they match searchString. You can also specify maximum number of results.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/searchString'
        - { name: maxNumOfResults, schema: { type: integer}, in: query, required: false, description: 'Number of maximum results' }
      responses:
        '200':
          $ref: '#/components/responses/ListOfCandidatesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/findCandidates/forGroup:
    get:
      tags:
        - VosManager
      operationId: findCandidatesForGroup
      summary: |
        Find candidates for Group. Candidates can be used to create new VO and Group members. Candidates are searched
        in Groups external sources (if available). Candidates, which are already members of VO are never
        returned even if they match searchString.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/searchString'
      responses:
        '200':
          $ref: '#/components/responses/ListOfCandidatesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getCompleteCandidates/forVo:
    get:
      tags:
        - VosManager
      operationId: getCompleteCandidatesForVo
      summary: |
        Find MemberCandidates for VO. MemberCandidates can be used to create new members. They are made of Candidate,
        RichUser and Member objects. Candidates are searched in VO's external sources (if available). RichUsers are
        searched in given VO and are associated with appropriate candidate and member. RichUsers for MemberCandidates
        may also be searched in the whole Perun.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/searchString'
      responses:
        '200':
          $ref: '#/components/responses/ListOfMemberCandidatesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getCompleteCandidates/forGroup:
    get:
      tags:
        - VosManager
      operationId: getCompleteCandidatesForGroup
      summary: |
        Find MemberCandidates for GROUP. MemberCandidates can be used to create new members. They are made of Candidate,
        RichUser and Member objects. Candidates are searched in VO's or GROUP's (depends on privileges) external sources
        (if available). RichUsers are searched in given VO and are associated with appropriate candidate and member.
        RichUsers for appropriate Candidate are also searched in the whole Perun.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/searchString'
      responses:
        '200':
          $ref: '#/components/responses/ListOfMemberCandidatesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getVosCount:
    get:
      tags:
        - VosManager
      operationId: getVosCount
      summary: Gets count of all vos.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/addAdmin/user:
    post:
      tags:
        - VosManager
      operationId: addVoAdminUser
      summary: Adds a user as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/addAdmin/group:
    post:
      tags:
        - VosManager
      operationId: addVoAdminGroup
      summary: Adds a group as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/addSponsorRole/user:
    post:
      tags:
        - VosManager
      operationId: addSponsorRoleToUser
      summary: Add user as a sponsor for guest members of VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/addSponsorRole/group:
    post:
      tags:
        - VosManager
      operationId: addSponsorRoleToGroup
      summary: Add group as a sponsor of guest members of VO. All members of group will become sponsors.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/removeAdmin/user:
    post:
      tags:
        - VosManager
      operationId: removeVoAdminUser
      summary: Removes a user as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/removeAdmin/group:
    post:
      tags:
        - VosManager
      operationId: removeVoAdminGroup
      summary: Removes a group as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/removeSponsorRole/user:
    post:
      tags:
        - VosManager
      operationId: removeSponsorRoleFromUser
      summary: Removes user as a sponsor. His or her sponsored members will be set as expired if the user was their last sponsor.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/removeSponsorRole/group:
    post:
      tags:
        - VosManager
      operationId: removeSponsorRoleFromGroup
      summary: Removes group as a sponsor. All group members will cease to be sponsors, and their sponsored members will be set as expired if the group member was their last sponsor.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/authorizedGroup'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getAdmins:
    get:
      tags:
        - VosManager
      operationId: getVoAdminUsers
      description: |
        Get list of all vo administrators for supported role and specific vo.
        If onlyDirectAdmins is true, return only direct admins of the vo for supported role.
        Supported roles: VOOBSERVER, TOPGROUPCREATOR, VOADMIN
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: role, schema: { $ref: '#/components/schemas/VoAdminRoles' }, in: query, required: true, description: 'supported role name'}
        - { name: onlyDirectAdmins, schema: { type: boolean }, in: query, required: true, description: "get only direct administrators (if false, get both direct and indirect)"}
      responses:
        '200':
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getAdminGroups:
    get:
      tags:
        - VosManager
      operationId: getVoAdminGroups
      description: |
        Get list of administrator groups of the given VO.
        Supported roles: VOOBSERVER, TOPGROUPCREATOR, VOADMIN
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: role, schema: { $ref: '#/components/schemas/VoAdminRoles' }, in: query, required: true, description: 'supported role name'}
      responses:
        '200':
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getRichAdmins:
    get:
      tags:
        - VosManager
      operationId: getRichAdminsForVo
      description: |
        Get list of all richUser administrators for the vo and supported role with specific attributes.
        Supported roles: VOOBSERVER, TOPGROUPCREATOR, VOADMIN
        If "onlyDirectAdmins" is == true, return only direct admins of the vo for supported role with specific attributes.
        If "allUserAttributes" is == true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: role, schema: { $ref: '#/components/schemas/VoAdminRoles' }, in: query, required: true, description: 'role name'}
        - $ref: '#/components/parameters/specificAttributes'
        - { name: allUserAttributes, schema: { type: boolean }, in: query, required: true, description: 'if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)'}
        - { name: onlyDirectAdmins, schema: { type: boolean }, in: query, required: true, description: 'if == true, get only direct vo administrators (if false, get both direct and indirect)'}
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # RegistrarManager                              #
  #                                               #
  #################################################

  /json/registrarManager/consolidateIdentityUsingToken:
    get:
      tags:
        - RegistrarManager
      operationId: consolidateIdentityUsingToken
      summary: Joins current user identity with the one previously provided and referenced by the token.
      parameters:
        - { name: token, schema: { type: string }, in: query, required: true, description: "token to be used for joining identities" }
      responses:
        '200':
          $ref: '#/components/responses/ListOfUserExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/sendInvitation:
    post:
      tags:
        - RegistrarManager
      operationId: sendInvitation
      summary: Sends invitation email to user which is not member of VO
      parameters:
        - { name: voId, schema: { type: number }, in: query, description: "id of VO to send invitation into"}
        - { name: name, schema: { type: string }, in: query, description: "name of person used in invitation email (optional)"}
        - { name: email, schema: { type: string }, in: query, required: true, description: "email address to send invitation to"}
        - { name: language, schema: { type: string }, in: query, required: true, description: "preferred language to use"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/sendInvitation/g:
    post:
      tags:
        - RegistrarManager
      operationId: sendInvitationForGroup
      summary: Sends invitation email to user which is not member of VO and Group
      description: |
        Invitation link targets VO application form fist, after submission, Group application form is displayed.
      parameters:
        - { name: voId, schema: { type: number }, in: query, description: "id of VO to send invitation into"}
        - { name: groupId, schema: { type: number }, in: query, description: "id of Group to send invitation into"}
        - { name: name, schema: { type: string }, in: query, description: "name of person used in invitation email (optional)"}
        - { name: email, schema: { type: string }, in: query, required: true, description: "email address to send invitation to"}
        - { name: language, schema: { type: string }, in: query, required: true, description: "preferred language to use"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/sendInvitation/u:
    post:
      tags:
        - RegistrarManager
      operationId: sendInvitationToExistingUser
      summary: Sends invitation email to user which is not member of VO
      parameters:
        - { name: userId, schema: { type: number }, in: query, description: "id of user to send invitation to"}
        - { name: voId, schema: { type: number }, in: query, description: "id of VO to send invitation into"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/sendInvitation/u-g:
    post:
      tags:
        - RegistrarManager
      operationId: sendInvitationGroupToExistingUser
      summary: Sends invitation email to user which is not member of Group
      parameters:
        - { name: userId, schema: { type: number }, in: query, description: "id of user to send invitation to"}
        - { name: voId, schema: { type: number }, in: query, description: "id of VO to send invitation into"}
        - { name: groupId, schema: { type: number }, in: query, description: "id of Group to send invitation into"}
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationsForVo:
    get:
      tags:
        - RegistrarManager
      operationId: getApplicationsForVo
      summary: Gets all applications for a given VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: "state[]", schema: { type: array, items: { type: string } }, in: query, description: "list of states: NEW, VERIFIED, APPROVED, REJECTED" }
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationsForGroup:
    get:
      tags:
        - RegistrarManager
      operationId: getApplicationsForGroup
      summary: Gets all applications for a given Group.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - { name: "state[]", schema: { type: array, items: { type: string } }, in: query, description: "list of states: NEW, VERIFIED, APPROVED, REJECTED" }
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationById:
    get:
      tags:
        - RegistrarManager
      operationId: getApplicationById
      summary: Returns application object by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ApplicationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationDataById:
    get:
      tags:
        - RegistrarManager
      operationId: getApplicationDataById
      summary: Returns data submitted by user in given application (by id).
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationFormItemDataResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/verifyApplication:
    post:
      tags:
        - RegistrarManager
      operationId: verifyApplication
      summary: Forcefully marks application as verified (only when application was in NEW state).
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ApplicationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/approveApplication:
    post:
      tags:
        - RegistrarManager
      operationId: approveApplication
      summary: Manually approves an application.
      description: |
        Expected to be called as a result of direct VO administrator action in the web UI.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ApplicationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/rejectApplication:
    post:
      tags:
        - RegistrarManager
      operationId: rejectApplication
      summary: Manually rejects an application.
      description: |
        Expected to be called as a result of direct VO administrator action in the web UI.
      parameters:
        - $ref: '#/components/parameters/id'
        - { name: reason, schema: { type: string }, in: query, description: "description of reason", required: false }
      responses:
        '200':
          $ref: '#/components/responses/ApplicationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/deleteApplication:
    post:
      tags:
        - RegistrarManager
      operationId: deleteApplication
      summary: Deletes an application.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/sendMessage:
    post:
      tags:
        - RegistrarManager
      operationId: sendMessage
      summary: Re-send mail notification for existing application.
      description: |
        Message of specified type is sent only, when application is in expected state related to the notification.
        Note, that some data related to processing application are not available (e.g. list of exceptions during approval), since this method doesn't perform any action with Application itself.
        Perun admin can send any notification except USER_INVITE type, see #sendInvitation() for this.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSendMessage
              description: "input to sendMessage"
              type: object
              required:
                - mailType
                - applicationId
              properties:
                mailType: { $ref: '#/components/schemas/MailType' }
                applicationId: { type: integer, description: "application id" }
                reason: { type: string, description: "you can specify reason for case: mailType == APP_REJECTED_USER" }

  /json/registrarManager/getApplicationForm/vo:
    get:
      tags:
        - RegistrarManager
      operationId: getVoApplicationForm
      summary: Gets an application form for a given VO.
      description: |
        There is exactly one form for membership per VO, one form is used for both initial registration and annual account expansion,
        just the form items are marked whether the should be present in one, the other, or both types of application.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ApplicationFormResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationForm/group:
    get:
      tags:
        - RegistrarManager
      operationId: getGroupApplicationForm
      summary: Gets an application form for a given Group.
      description: |
        There is exactly one form for membership per Group, one form is used for both initial registration and annual account expansion,
        just the form items are marked whether the should be present in one, the other, or both types of application.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ApplicationFormResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getFormItems/vo:
    get:
      tags:
        - RegistrarManager
      operationId: getFormItemsForVo
      summary: Gets all items in VO application form.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationFormItemsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getFormItems/vo-type:
    get:
      tags:
        - RegistrarManager
      operationId: getFormItemsForVoWithType
      summary: Gets items of specified type in VO application form, for initital registration or extension of account.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: type, schema: { type: string }, in: query, description: "application type: INITIAL or EXTENSION" }
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationFormItemsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getFormItems/group:
    get:
      tags:
        - RegistrarManager
      operationId: getFormItemsForGroup
      summary: Gets all items in Group application form.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationFormItemsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getFormItems/group-type:
    get:
      tags:
        - RegistrarManager
      operationId: getFormItemsForGroupWithType
      summary: Gets items of specified type in Group application form, for initital registration or extension of account.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - { name: type, schema: { type: string }, in: query, description: "application type: INITIAL or EXTENSION" }
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationFormItemsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/updateFormItems/vo:
    post:
      tags:
        - RegistrarManager
      operationId: updateFormItemsForVo
      summary: Updates form items sent in list.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateFormItemsForVo
              description: "input to updateFormItemsForVo"
              type: object
              properties:
                vo: { type: integer, description: "vo id" }
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/ApplicationFormItem'

  /json/registrarManager/updateFormItems/group:
    post:
      tags:
        - RegistrarManager
      operationId: updateFormItemsForGroup
      summary: Updates form items sent in list.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateFormItemsForGroup
              description: "input to updateFormItemsForGroup"
              type: object
              properties:
                group: { type: integer, description: "group id" }
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/ApplicationFormItem'

  /json/registrarManager/updateForm:
    post:
      tags:
        - RegistrarManager
      operationId: updateForm
      summary: Updates the form attributes, not the form items.
      responses:
        '200':
          $ref: '#/components/responses/ApplicationFormResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateForm
              description: "input to updateForm"
              type: object
              properties:
                applicationForm: { $ref: '#/components/schemas/ApplicationForm' }

  /urlinjsonout/registrarManager/copyForm/voToVo:
    post:
      tags:
        - RegistrarManager
      operationId: copyFormFromVoToVo
      summary: Copy all form items from selected VO into another.
      parameters:
        - { name: fromVo, schema: { type: integer }, in: query, description: "source VO" }
        - { name: toVo, schema: { type: integer }, in: query, description: "destination VO" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/copyForm/groupToVo:
    post:
      tags:
        - RegistrarManager
      operationId: copyFormFromGroupToVo
      summary: Copy all form items from selected Group into VO.
      parameters:
        - { name: fromGroup, schema: { type: integer }, in: query, description: "source group" }
        - { name: toVo, schema: { type: integer }, in: query, description: "destination VO" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/copyForm/voToGroup:
    post:
      tags:
        - RegistrarManager
      operationId: copyFormFromVoToGroup
      summary: Copy all form items from selected VO into Group.
      parameters:
        - { name: fromVo, schema: { type: integer }, in: query, description: "source VO" }
        - { name: toGroup, schema: { type: integer }, in: query, description: "destination group" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/copyForm/groupToGroup:
    post:
      tags:
        - RegistrarManager
      operationId: copyFormFromGroupToGroup
      summary: Copy all form items from selected Group into another.
      parameters:
        - { name: fromGroup, schema: { type: integer }, in: query, description: "source group" }
        - { name: toGroup, schema: { type: integer }, in: query, description: "destination group" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationMails/v:
    get:
      tags:
        - RegistrarManager
      operationId: getApplicationMailsForVo
      summary:  Returns all mail notifications related to specific app form.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationMailsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationMails/g:
    get:
      tags:
        - RegistrarManager
      operationId: getApplicationMailsForGroup
      summary:  Returns all mail notifications related to specific app form.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfApplicationMailsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/setSendingEnabled:
    post:
      tags:
        - RegistrarManager
      operationId: setSendingEnabled
      summary: Enable or disable sending for list of mail definitions.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetSendingEnabled
              description: "input to setSendingEnabled"
              type: object
              required:
                - mails
                - enabled
              properties:
                mails:
                  type: array
                  items:
                    $ref: '#/components/schemas/ApplicationMail'
                enabled: { type: boolean }

  /urlinjsonout/registrarManager/copyMails/voToVo:
    post:
      tags:
        - RegistrarManager
      operationId: copyMailsFromVoToVo
      summary: Copy all e-mail notifications from selected VO into another.
      parameters:
        - { name: fromVo, schema: { type: integer }, in: query, description: "source VO" }
        - { name: toVo, schema: { type: integer }, in: query, description: "destination VO" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/copyMails/groupToVo:
    post:
      tags:
        - RegistrarManager
      operationId: copyMailsFromGroupToVo
      summary: Copy all e-mail notifications from selected Group into VO.
      parameters:
        - { name: fromGroup, schema: { type: integer }, in: query, description: "source group" }
        - { name: toVo, schema: { type: integer }, in: query, description: "destination VO" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/copyMails/voToGroup:
    post:
      tags:
        - RegistrarManager
      operationId: copyMailsFromVoToGroup
      summary: Copy all e-mail notifications from selected VO into Group.
      parameters:
        - { name: fromVo, schema: { type: integer }, in: query, description: "source VO" }
        - { name: toGroup, schema: { type: integer }, in: query, description: "destination group" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/copyMails/groupToGroup:
    post:
      tags:
        - RegistrarManager
      operationId: copyMailsFromGroupToGroup
      summary: Copy all e-mail notifications from selected Group into another.
      parameters:
        - { name: fromGroup, schema: { type: integer }, in: query, description: "source group" }
        - { name: toGroup, schema: { type: integer }, in: query, description: "destination group" }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/deleteApplicationMail/v:
    post:
      tags:
        - RegistrarManager
      operationId: deleteApplicationMailForVo
      summary: Deletes an e-mail notification from DB based on id property.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/deleteApplicationMail/g:
    post:
      tags:
        - RegistrarManager
      operationId: deleteApplicationMailForGroup
      summary: Deletes an e-mail notification from DB based on id property.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/updateApplicationMail:
    post:
      tags:
        - RegistrarManager
      operationId: updateApplicationMail
      summary: Updates an e-mail notification.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateApplicationMail
              description: "input to updateApplicationMail"
              type: object
              required:
                - mail
              properties:
                mail: { $ref: '#/components/schemas/ApplicationMail' }

  /json/registrarManager/addApplicationMail/v:
    post:
      tags:
        - RegistrarManager
      operationId: addApplicationMailForVo
      summary: Add new mail notification.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAddApplicationMailForVo
              description: "input to addApplicationMailForVo"
              type: object
              required:
                - vo
                - mail
              properties:
                vo: { type: integer }
                mail: { $ref: '#/components/schemas/ApplicationMail' }

  /json/registrarManager/addApplicationMail/g:
    post:
      tags:
        - RegistrarManager
      operationId: addApplicationMailForGroup
      summary: Add new mail notification.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAddApplicationMailForGroup
              description: "input to addApplicationMailForGroup"
              type: object
              required:
                - group
                - mail
              properties:
                group: { type: integer }
                mail: { $ref: '#/components/schemas/ApplicationMail' }

  /urlinjsonout/registrarManager/createApplicationForm/vo:
    post:
      tags:
        - RegistrarManager
      operationId: createApplicationFormInVo
      summary: Create application form for a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/registrarManager/createApplicationForm/group:
    post:
      tags:
        - RegistrarManager
      operationId: createApplicationFormInGroup
      summary: Create application form for a group.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getConsolidatorToken:
    get:
      tags:
        - RegistrarManager
      operationId: getConsolidatorToken
      summary: Get time-limited token proving user identity in external source (for now 3 minutes).
      description: |
        It can be used to join user identity with another by calling consolidateIdentityUsingToken() method and passing the token.
        Please note, that different authz (identity) must be used to perform both calls.
      responses:
        '200':
          $ref: '#/components/responses/StringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/updateFormItemData:
    post:
      tags:
        - RegistrarManager
      operationId: updateFormItemData
      summary: Update application form item data value, which was originally submitted by the User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputFormItemData
              description: "input to updateFormItemData"
              type: object
              required:
                - appId
                - data
              properties:
                appId: { type: integer, description: "application id" }
                data: { $ref: '#/components/schemas/ApplicationFormItemData' }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # ServicesManager                               #
  #                                               #
  #################################################

  /urlinjsonout/servicesManager/blockServiceOnFacility:
    post:
      tags:
        - ServicesManager
      operationId: blockServiceOnFacility
      summary: Bans service on a facility.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/blockServiceOnDestination/s-d:
    post:
      tags:
        - ServicesManager
      operationId: blockServiceOnDestination
      summary: Bans Service on a destination.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/destinationId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/blockServiceOnDestination/s-dname-dtype:
    post:
      tags:
        - ServicesManager
      operationId: blockServiceOnDestinationWithNameAndType
      summary: Bans Service on a destination.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/destinationName'
        - $ref: '#/components/parameters/destinationType'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/blockAllServicesOnFacility:
    post:
      tags:
        - ServicesManager
      operationId: blockAllServicesOnFacility
      summary: Block all services currently assigned on this facility.
              Newly assigned services are still allowed for propagation.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/blockAllServicesOnDestination/d:
    post:
      tags:
        - ServicesManager
      operationId: blockAllServicesOnDestinationById
      summary: Block all services currently assigned on this destination.
               Newly assigned services are still allowed for propagation.
      parameters:
        - $ref: '#/components/parameters/destinationId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/blockAllServicesOnDestination/dname-dtype:
    post:
      tags:
        - ServicesManager
      operationId: blockAllServicesOnDestinationByName
      summary: Block all services currently assigned on this destination.
        Newly assigned services are still allowed for propagation.
      parameters:
        - $ref: '#/components/parameters/destinationName'
        - $ref: '#/components/parameters/destinationType'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServicesBlockedOnFacility:
    get:
      tags:
        - ServicesManager
      operationId: getServicesBlockedOnFacility
      summary: Returns list of denials for a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServicesBlockedOnDestination:
    get:
      tags:
        - ServicesManager
      operationId: getServicesBlockedOnDestination
      summary: Returns list of denials for a destination.
      parameters:
        - $ref: '#/components/parameters/destinationId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/isServiceBlockedOnFacility:
    get:
      tags:
        - ServicesManager
      operationId: isServiceBlockedOnFacility
      summary: Is this Service denied on the facility?
        Return int 1 = true - the Service is denied on the facility, 0 = false - the Service is NOT denied on the facility
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/isServiceBlockedOnDestination:
    get:
      tags:
        - ServicesManager
      operationId: isServiceBlockedOnDestination
      summary: Is this Service denied on the destination?
        Return int 1 = true - the Service is denied on the destination, 0 = false - the Service is NOT denied on the destination
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/destinationId'
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/unblockAllServicesOnFacility:
    post:
      tags:
        - ServicesManager
      operationId: unblockAllServicesOnFacility
      summary: Erase all the possible denials on this facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/unblockAllServicesOnDestination/d:
    post:
      tags:
        - ServicesManager
      operationId: unblockAllServicesOnDestinationById
      summary: Erase all the possible denials on this destination.
      parameters:
        - $ref: '#/components/parameters/destinationId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/unblockAllServicesOnDestination/dname-dtype:
    post:
      tags:
        - ServicesManager
      operationId: unblockAllServicesOnDestinationByName
      summary: Erase all the possible denials on this destination.
      parameters:
        - $ref: '#/components/parameters/destinationName'
        - $ref: '#/components/parameters/destinationType'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/unblockServiceOnFacility:
    post:
      tags:
        - ServicesManager
      operationId: unblockServiceOnFacility
      summary: Free the denial of the Service on this facility. If the Service was banned
              on this facility, it will be freed. In case the Service was not banned on
              this facility, nothing will happen.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/unblockServiceOnDestination/s-d:
    post:
      tags:
        - ServicesManager
      operationId: unblockServiceOnDestinationById
      summary: Free the denial of the Service on this destination. If the Service was banned on
         this destination, it will be freed. In case the Service was not banned on this
         destination, nothing will happen.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/destinationId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/unblockServiceOnDestination/s-dname-dtype:
    post:
      tags:
        - ServicesManager
      operationId: unblockServiceOnDestinationByName
      summary: Free the denial of the Service on this destination. If the Service was banned on
        this destination, it will be freed. In case the Service was not banned on this
        destination, nothing will happen.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/destinationName'
        - $ref: '#/components/parameters/destinationType'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/forceServicePropagation:
    post:
      tags:
        - ServicesManager
      operationId: forceServicePropagation
      summary: Forces service propagation on defined facility.
              Return int 1 = true if it is possible, 0 = false if not
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/optionalFacilityId'
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/planServicePropagation:
    post:
      tags:
        - ServicesManager
      operationId: planServicePropagation
      summary: Plans service propagation on defined facility.
        Return int 1 = true if it is possible, 0 = false if not
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/optionalFacilityId'
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getFacilityAssignedServicesForGUI:
    get:
      tags:
        - ServicesManager
      operationId: getFacilityAssignedServicesForGUI
      summary: Return list of ServiceForGUI assigned on facility, (Service with "allowedOnFacility" property filled).
              1 - allowed / 0 - service is service is denied.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServiceForGUIResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/createService:
    post:
      tags:
        - ServicesManager
      operationId: createServiceWithService
      summary: Creates a new service.
        Service object must contain name. Parameters desctiption, script, delay, recurrence, enabled are optional. Other parameters ignored.
      responses:
        '200':
          $ref: '#/components/responses/ServiceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCreateService
              description: "input to createService"
              type: object
              required:
                - service
              properties:
                service: { $ref: '#/components/schemas/Service' }

  /urlinjsonout/servicesManager/createService:
    post:
      tags:
        - ServicesManager
      operationId: createService
      summary: Creates a new service.
      parameters:
        - { name: name, description: "name", schema: { type: string },  in: query, required: true }
        - { name: description, description: "description", schema: { type: string },  in: query, required: true }
        - { name: script, description: "script which should be constructed like ./service_name (where anything else than [a-z,A-Z] is converted to _)", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/ServiceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/deleteService:
    post:
      tags:
        - ServicesManager
      operationId: deleteService
      summary: Deletes a service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/updateService:
    post:
      tags:
        - ServicesManager
      operationId: updateService
      summary: Updates a service.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateService
              description: "input to updateService"
              type: object
              required:
                - service
              properties:
                service: { $ref: '#/components/schemas/Service' }

  /json/servicesManager/getServiceById:
    get:
      tags:
        - ServicesManager
      operationId: getServiceById
      summary: Returns a service by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/ServiceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServiceByName:
    get:
      tags:
        - ServicesManager
      operationId: getServiceByName
      summary: Returns a service by its name.
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          $ref: '#/components/responses/ServiceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServices:
    get:
      tags:
        - ServicesManager
      operationId: getServices
      summary: Returns all services.
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServicesByAttributeDefinition:
    get:
      tags:
        - ServicesManager
      operationId: getServicesByAttributeDefinition
      summary: Get all services with given attribute.
      parameters:
        - $ref: '#/components/parameters/attributeDefinitionId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getHierarchicalData:
    get:
      tags:
        - ServicesManager
      operationId: getHierarchicalData
      summary: Generates the list of attributes per each member associated with the resource.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: filterExpiredMembers, description: "if true the method does not take members expired in groups into account", schema: { type: boolean },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/ServiceAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getFlatData:
    get:
      tags:
        - ServicesManager
      operationId: getFlatData
      summary: Generates the list of attributes per each user and per each resource. Never return member or member-resource attribute.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: filterExpiredMembers, description: "if true the method does not take members expired in groups into account", schema: { type: boolean },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/ServiceAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDataWithGroups:
    get:
      tags:
        - ServicesManager
      operationId: getDataWithGroups
      summary: Generates the list of attributes per each member associated with the resources and groups.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: filterExpiredMembers, description: "if true the method does not take members expired in groups into account", schema: { type: boolean },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/ServiceAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDataWithVos:
    get:
      tags:
        - ServicesManager
      operationId: getDataWithVos
      summary: Generates the list of attributes per each member associated with the resources and groups in vos.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: filterExpiredMembers, description: "if true the method does not take members expired in groups into account", schema: { type: boolean },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/ServiceAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServicesPackages:
    get:
      tags:
        - ServicesManager
      operationId: getServicesPackages
      summary: Returns packages.
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesPackageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServicesPackageById:
    get:
      tags:
        - ServicesManager
      operationId: getServicesPackageById
      summary: Gets package by id.
      parameters:
        - $ref: '#/components/parameters/servicesPackageId'
      responses:
        '200':
          $ref: '#/components/responses/ServicesPackageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServicesPackageByName:
    get:
      tags:
        - ServicesManager
      operationId: getServicesPackageByName
      summary: Gets package by name.
      parameters:
        - { name: name, description: "ServicesPackage name", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/ServicesPackageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/createServicesPackage:
    post:
      tags:
        - ServicesManager
      operationId: createServicesPackage
      summary: Creates a new services package.
      responses:
        '200':
          $ref: '#/components/responses/ServicesPackageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: InputCreateServicesPackage
              description: Input to createServicesPackage
              required:
                - servicesPackage
              properties:
                servicesPackage:
                  $ref: '#/components/schemas/ServicesPackage'

  /urlinjsonout/servicesManager/createServicesPackage:
    post:
      tags:
        - ServicesManager
      operationId: createServicesPackageByNameAndDescription
      summary: Creates a new services package.
      parameters:
        - { name: name, description: "name", schema: { type: string },  in: query, required: true }
        - { name: description, description: "description", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/ServicesPackageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/deleteServicesPackage:
    post:
      tags:
        - ServicesManager
      operationId: deleteServicesPackage
      summary: Deletes a services package.
      parameters:
        - $ref: '#/components/parameters/servicesPackageId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/updateServicesPackage:
    post:
      tags:
        - ServicesManager
      operationId: updateServicesPackage
      summary: Updates a service package.
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: InputUpdateServicesPackage
              description: Input to updateServicesPackage
              required:
                - servicesPackage
              properties:
                servicesPackage:
                  $ref: '#/components/schemas/ServicesPackage'

  /urlinjsonout/servicesManager/addServiceToServicesPackage:
    post:
      tags:
        - ServicesManager
      operationId: addServiceToServicesPackage
      summary: Adds a Service to a Services Package.
      parameters:
        - $ref: '#/components/parameters/servicesPackageId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/removeServiceFromServicesPackage:
    post:
      tags:
        - ServicesManager
      operationId: removeServiceFromServicesPackage
      summary: Removes a Service from a Services Package.
      parameters:
        - $ref: '#/components/parameters/servicesPackageId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServicesFromServicesPackage:
    get:
      tags:
        - ServicesManager
      operationId: getServicesFromServicesPackage
      summary: Lists services stored in a package.
      parameters:
        - $ref: '#/components/parameters/servicesPackageId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/addRequiredAttribute:
    post:
      tags:
        - ServicesManager
      operationId: addRequiredAttribute
      summary: Mark the attribute as required for the service. Required attributes are requisite for Service to run.
           If you add attribute which has a default attribute then this default attribute will be automatically add too.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/addRequiredAttributes:
    post:
      tags:
        - ServicesManager
      operationId: addRequiredAttributes
      summary: Batch version of addRequiredAttribute.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/removeRequiredAttribute:
    post:
      tags:
        - ServicesManager
      operationId: removeRequiredAttribute
      summary: Remove required attribute from service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/removeRequiredAttributes:
    post:
      tags:
        - ServicesManager
      operationId: removeRequiredAttributes
      summary: Remove required attributes from service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/removeAllRequiredAttributes:
    post:
      tags:
        - ServicesManager
      operationId: removeAllRequiredAttributes
      summary: Remove all required attributes from service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDestinationById:
    get:
      tags:
        - ServicesManager
      operationId: getDestinationById
      summary: Returns a destination by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/DestinationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDestinations/s-f:
    get:
      tags:
        - ServicesManager
      operationId: getDestinations
      summary: Returns list of all destinations defined for the service and facility.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDestinations/all:
    get:
      tags:
        - ServicesManager
      operationId: getAllDestinations
      summary: Get list of all destinations.
      responses:
        '200':
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /json/servicesManager/getAllRichDestinations/s:
    get:
      tags:
        - ServicesManager
      operationId: getAllRichDestinationsForService
      summary: Returns list of all rich destinations defined for the service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getAllRichDestinations/f:
    get:
      tags:
        - ServicesManager
      operationId: getAllRichDestinationsForFacility
      summary: Returns list of all rich destinations defined for the facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getRichDestinations:
    get:
      tags:
        - ServicesManager
      operationId: getRichDestinations
      summary: Returns list of all rich destinations defined for the service and facility.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfRichDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/addDestination:
    post:
      tags:
        - ServicesManager
      operationId: addDestination
      summary: Adds an destination for a facility and service. If destination doesn't exist it will be created.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: destination, description: "Destination's destination, usually a DNS name", schema: { type: string },  in: query, required: true }
        - { name: type, description: "Destination's type", schema: { $ref: '#/components/schemas/DestinationType' },  in: query, required: true }
        - { name: propagationType, description: "Destination's propagationType", schema: { $ref: '#/components/schemas/DestinationPropagationType' },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/DestinationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/addDestination:
    post:
      tags:
        - ServicesManager
      operationId: addDestinationToMultipleServices
      description: Adds an destination for a facility and list of services. If destination doesn't exist it will be created.
      responses:
        '200':
          $ref: '#/components/responses/DestinationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAddDestinationToMultipleServices
              description: "input to addDestinationToMultipleServices"
              type: object
              required:
                - services
                - facility
                - destination
                - type
              properties:
                services:
                  type: array
                  items:
                    $ref: '#/components/schemas/Service'
                facility: { type: integer }
                destination: { type: string }
                type: { $ref: '#/components/schemas/DestinationType' }
                propagationType: { $ref: '#/components/schemas/DestinationPropagationType' }


  /urlinjsonout/servicesManager/addDestinationsForAllServicesOnFacility:
    post:
      tags:
        - ServicesManager
      operationId: addDestinationsForAllServicesOnFacility
      summary: Adds destination for all services defined on the facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/destinationName'
        - { name: type, description: "Destination type (host,user@host,user@host:port,url,mail,service-specific)", schema: { $ref: '#/components/schemas/DestinationType' },  in: query, required: true }
        - { name: propagationType, description: "propagation type (PARALLEL, DUMMY - doesn't send data)", schema: { $ref: '#/components/schemas/DestinationPropagationType' },  in: query, required: false }
      responses:
        '200':
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/addDestinationsDefinedByHostsOnFacility/s-f:
    post:
      tags:
        - ServicesManager
      operationId: addDestinationsDefinedByHostsOnFacilityWithServiceAndFacility
      summary: Add services destinations for all services currently available on facility
          (assigned to all facility's resources). Destinations names are taken from
          all facility's host hostnames.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/addDestinationsDefinedByHostsOnFacility/lists-f:
    post:
      tags:
        - ServicesManager
      operationId: addDestinationsDefinedByHostsOnFacilityWithListOfServiceAndFacility
      summary: Add services destinations for list of services. Destinations names are taken from
                all facility's host hostnames.
      responses:
        '200':
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAddDestinationsDefinedByHostsOnFacility
              description: "input to addDestinationsDefinedByHostsOnFacility"
              type: object
              required:
                - services
                - facility
              properties:
                services:
                  type: array
                  items:
                    $ref: '#/components/schemas/Service'
                facility: { type: integer }

  /urlinjsonout/servicesManager/addDestinationsDefinedByHostsOnFacility/f:
    post:
      tags:
        - ServicesManager
      operationId: addDestinationsDefinedByHostsOnFacilityWithFacility
      summary: Add services destinations for one service. Destinations names are taken from
                all facility's host hostnames.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/removeDestination:
    post:
      tags:
        - ServicesManager
      operationId: removeDestination
      summary: Removes the specified destination from the facility and service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: destination, description: "Destination's destination", schema: { type: string },  in: query, required: true }
        - { name: type, description: "Destination's type", schema: { $ref: '#/components/schemas/DestinationType' },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/removeAllDestinations:
    post:
      tags:
        - ServicesManager
      operationId: removeAllDestinations
      summary: Removes all destinations from a facility and service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getFacilitiesDestinations:
    get:
      tags:
        - ServicesManager
      operationId: getFacilitiesDestinations
      summary: List all destinations for all facilities which are joined by resources to the VO.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDestinationsCount:
    get:
      tags:
        - ServicesManager
      operationId: getDestinationsCount
      summary: Gets count of all destinations.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getAssignedServices:
    get:
      tags:
        - ServicesManager
      operationId: getAssignedServices
      summary: List all services associated with the facility (via resource).
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getAssignedResourcesForService:
    get:
      tags:
        - ServicesManager
      operationId: getAssignedResources
      summary: Lists resources assigned to service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # TasksManager                                  #
  #                                               #
  #################################################

  /json/tasksManager/getTask:
    get:
      tags:
        - TasksManager
      operationId: getTask
      summary: Returns a task.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/TaskResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/listAllTasks:
    get:
      tags:
        - TasksManager
      operationId: listAllTasks
      summary: Returns all tasks.
      responses:
        '200':
          $ref: '#/components/responses/ListOfTasksResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/listAllTasksForFacility:
    get:
      tags:
        - TasksManager
      operationId: listAllTasksForFacility
      summary: Returns all tasks associated with selected facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfTasksResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/isThereSuchTask:
    get:
      tags:
        - TasksManager
      operationId: isThereSuchTask
      summary: Whether task exists.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/countTasks:
    get:
      tags:
        - TasksManager
      operationId: countTasks
      summary: Returns the count of all tasks.
      responses:
        '200':
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskResults:
    get:
      tags:
        - TasksManager
      operationId: getTaskResults
      summary: Returns all task results.
      responses:
        '200':
          $ref: '#/components/responses/ListOfTaskResultsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskResultsByTask:
    get:
      tags:
        - TasksManager
      operationId: getTaskResultsByTask
      summary:  Return list of TaskResults by a Task.
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfTaskResultsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskResultsForGUIByTaskOnlyNewest:
    get:
      tags:
        - TasksManager
      operationId: getTaskResultsForGUIByTaskOnlyNewest
      summary:  Return list of only newest TaskResults by a Task for GUI.
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfTaskResultsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskResultsForGUIByTaskAndDestination:
    get:
      tags:
        - TasksManager
      operationId: getTaskResultsForGUIByTaskAndDestination
      summary:  Return list of TaskResults by a Task and destination for GUI.
      parameters:
        - $ref: '#/components/parameters/taskId'
        - $ref: '#/components/parameters/destinationId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfTaskResultsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskResultsForGUIByTask:
    get:
      tags:
        - TasksManager
      operationId: getTaskResultsForGUIByTask
      summary:  Return list of TaskResults by a Task for GUI.
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfTaskResultsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskResultById:
    get:
      tags:
        - TasksManager
      operationId: getTaskResultById
      summary:  Returns TaskResult by its id.
      parameters:
        - $ref: '#/components/parameters/taskResultId'
      responses:
        '200':
          $ref: '#/components/responses/TaskResultResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskById:
    get:
      tags:
        - TasksManager
      operationId: getTaskById
      summary:  Returns Task by its id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/TaskResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getFacilityState:
    get:
      tags:
        - TasksManager
      operationId: getFacilityState
      summary:   Return propagation status of facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/FacilityStateResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getAllFacilitiesStates:
    get:
      tags:
        - TasksManager
      operationId: getAllFacilitiesStates
      summary: Return propagation status of all facilities in Perun/Vo.
      parameters:
        - $ref: '#/components/parameters/optionalVoId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfFacilityStatesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getAllResourcesState:
    get:
      tags:
        - TasksManager
      operationId: getAllResourcesState
      summary: Return propagation status of all resources related to VO.
      parameters:
        - { name: voId, description: "VO id", schema: { type: integer },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/ListOfResourceStatesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getTaskResultsForDestinations:
    get:
      tags:
        - TasksManager
      operationId: getTaskResultsForDestinations
      summary: Returns task results for defined destinations.
      parameters:
        - name: destinations[]
          in: query
          schema:
            type: array
            items:
              type: string
          description: 'List<String> Destinations'
          required: true
      responses:
        '200':
          $ref: '#/components/responses/ListOfTaskResultsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/getFacilityServicesState:
    get:
      tags:
        - TasksManager
      operationId: getFacilityServicesState
      summary: Returns service states for defined facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        '200':
          $ref: '#/components/responses/ListOfServiceStatesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/tasksManager/deleteTask:
    post:
      tags:
        - TasksManager
      operationId: deleteTask
      summary:  Delete Task and TaskResults.
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # RTMessagesManager                               #
  #                                               #
  #################################################

  /urlinjsonout/rtMessagesManager/sentMessageToRT/q:
    post:
      tags:
        - RTMessagesManager
      operationId: sentMessageToRTWithQueue
      summary:  Sends a message to RT. Only text information is sent.
      parameters:
        - { name: queue, description: "RT queue", schema: { type: string },  in: query, required: true }
        - { name: subject, description: "Message subject", schema: { type: string },  in: query, required: true }
        - { name: text, description: "Message text", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/RTMessageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/rtMessagesManager/sentMessageToRT/m-q:
    post:
      tags:
        - RTMessagesManager
      operationId: sentMessageToRTWithMemberQueue
      summary:  Sends a message to RT. Member id is sent.
      parameters:
        - { name: memberId, description: "Member whose e-mail address will be user", schema: { type: integer },  in: query, required: true }
        - { name: queue, description: "RT queue", schema: { type: string },  in: query, required: true }
        - { name: subject, description: "Message subject", schema: { type: string },  in: query, required: true }
        - { name: text, description: "Message text", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/RTMessageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/rtMessagesManager/sentMessageToRT/v-q:
    post:
      tags:
        - RTMessagesManager
      operationId: sentMessageToRTWithVoQueue
      summary:  Sends a message to RT. VO id is sent.
      parameters:
        - { name: voId, description: "VO id", schema: { type: integer },  in: query, required: true }
        - { name: queue, description: "RT queue", schema: { type: string },  in: query, required: true }
        - { name: subject, description: "Message subject", schema: { type: string },  in: query, required: true }
        - { name: text, description: "Message text", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/RTMessageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/rtMessagesManager/sentMessageToRT/v:
    post:
      tags:
        - RTMessagesManager
      operationId: sentMessageToRTWithVo
      summary:  Sends a message to RT. VO id is sent. Queue is not sent.
      parameters:
        - { name: voId, description: "VO id", schema: { type: integer },  in: query, required: true }
        - { name: subject, description: "Message subject", schema: { type: string },  in: query, required: true }
        - { name: text, description: "Message text", schema: { type: string },  in: query, required: true }
      responses:
        '200':
          $ref: '#/components/responses/RTMessageResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
